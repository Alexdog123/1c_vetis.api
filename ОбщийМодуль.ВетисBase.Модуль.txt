
// тип, описывающий параметры запрашиваемого у сервиса списка объектов
Функция ListOptions(count = 100, offset = 0) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ListOptions"));
	
	_Объект.count = count;
	_Объект.offset = offset;
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий дату и время
// преобразует дату 1с в xd и обратно
Функция ComplexDate(пДата) Экспорт
	
	Если ТипЗнч(пДата) = Тип("Дата") Тогда
		
		_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ComplexDate"));
		
		_Объект.year  = Формат(Год(пДата), "ЧГ=");
		_Объект.month = Формат(Месяц(пДата),"ЧЦ=2; ЧВН=");
		_Объект.day   = Формат(День(пДата),"ЧЦ=2; ЧВН=");
		_Объект.hour  = "00";
	Иначе
		_свойства = пДата.Свойства();
		_гггг = ?(_свойства.Получить("year") = Неопределено, 1, Число(пДата.year));
		_мм = ?(_свойства.Получить("month") = Неопределено, 1, Число(пДата.month));
		_дд = ?(_свойства.Получить("day") = Неопределено, 1, Число(пДата.day));
		_Объект = Дата(_гггг, _мм, _дд);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция DataInterval(beginDate, endDate) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "DataInterval"));
	
	_Объект.beginDate = xsDate(beginDate);
	_Объект.endDate   = xsDate(endDate);
	
	Возврат _Объект;
	
КонецФункции

Функция xsBoolean(value) Экспорт
	
	Если ТипЗнч(value) = Тип("Булево") Тогда
		Возврат XMLСтрока(value);
	Иначе
		Возврат XMLЗначение(Тип("Булево"), value);
	КонецЕсли;
	
КонецФункции

Функция xsDate(value, пДатаВремя = Истина) Экспорт
	
	Если ТипЗнч(value) = Тип("Дата") Тогда
		Возврат XMLСтрока(value);
	Иначе
		Возврат XMLЗначение(Тип("Дата"), value);
	КонецЕсли;
	
КонецФункции


#Область RegisterModificationType
// тип, описывающий тип операции на изменение реестра

Функция RegisterModificationType(type) Экспорт
	
	Если      type = 1 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE();
	ИначеЕсли type = 2 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE();
	ИначеЕсли type = 3 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_UPDATE();
	ИначеЕсли type = 4 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_DELETE();
	ИначеЕсли type = 5 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_MERGE();
	ИначеЕсли type = 6 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_ATTACH();
	ИначеЕсли type = 7 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_SPLIT();
	ИначеЕсли type = 8 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FORK();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция RegisterModificationTypeОписание(type) Экспорт
	
	Если      type = ВетисКонстанты.RegisterModificationType_CREATE() ИЛИ type = 1 Тогда
		Возврат "Добавление";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE() ИЛИ type = 2 Тогда
		Возврат "Поиск";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_UPDATE() ИЛИ type = 3 Тогда
		Возврат "Внесение изменений";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_DELETE() ИЛИ type = 4 Тогда
		Возврат "Удаление";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_MERGE()  ИЛИ type = 5 Тогда
		Возврат "Объединение";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_ATTACH() ИЛИ type = 6 Тогда
		Возврат "Прикрепление";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_SPLIT()  ИЛИ type = 7 Тогда
		Возврат "Разделение";
	ИначеЕсли type = ВетисКонстанты.RegisterModificationType_FORK()   ИЛИ type = 8 Тогда
		Возврат "Ответвление";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция RegisterModificationTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 8 Цикл
		_Список.Добавить(RegisterModificationType(_Индекс), RegisterModificationTypeОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VersionStatus

Функция VersionStatusОписание(status) Экспорт
	
	Если status = 100 Тогда
		Возврат "Запись создана";
	ИначеЕсли status = 102 Тогда
		Возврат "Отправлена";
	ИначеЕсли status = 110 Тогда
		Возврат "Запись создана в результате объединения двух или более других";
	ИначеЕсли status = 120 Тогда
		Возврат "Запись создана в результате разделения другой";
	ИначеЕсли status = 200 Тогда
		Возврат "В запись были внесены изменения";
	ИначеЕсли status = 201 Тогда
		Возврат "Запись журнала аннулирована";
	ИначеЕсли status = 202 Тогда
		Возврат "Запись продукции изменена путём списания";
	ИначеЕсли status = 230 Тогда
		Возврат "Запись была обновлена в результате присоединения другой";
	ИначеЕсли status = 240 Тогда
		Возврат "Запись была обновлена в результате отделения от неё другой";
	ИначеЕсли status = 300 Тогда
		Возврат "Запись была перемещена в другую группу";
	ИначеЕсли status = 400 Тогда
		Возврат "Запись была удалена";
	ИначеЕсли status = 410 Тогда
		Возврат "Запись была удалена в результате объединения";
	ИначеЕсли status = 420 Тогда
		Возврат "Запись была удалена в результате разделения";
	ИначеЕсли status = 430 Тогда
		Возврат "Запись была удалена в результате присоединения";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VersionStatusСписок() Экспорт
	
	Список = Новый СписокЗначений();
	
	Список.Добавить(100, VersionStatusОписание(100));
	Список.Добавить(102, VersionStatusОписание(102));
	Список.Добавить(110, VersionStatusОписание(110));
	Список.Добавить(120, VersionStatusОписание(120));
	Список.Добавить(200, VersionStatusОписание(200));
	Список.Добавить(201, VersionStatusОписание(201));
	Список.Добавить(202, VersionStatusОписание(202));
	Список.Добавить(230, VersionStatusОписание(230));
	Список.Добавить(240, VersionStatusОписание(240));
	Список.Добавить(300, VersionStatusОписание(300));
	Список.Добавить(400, VersionStatusОписание(400));
	Список.Добавить(410, VersionStatusОписание(410));
	Список.Добавить(420, VersionStatusОписание(420));
	Список.Добавить(430, VersionStatusОписание(430));
	
	Возврат(Список);
	
КонецФункции 

#КонецОбласти

Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/base";
	
КонецФункции

