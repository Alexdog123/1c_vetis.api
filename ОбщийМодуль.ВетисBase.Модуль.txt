
// тип, описывающий параметры запрашиваемого у сервиса списка объектов
Функция ListOptions(count = 100, offset = 0) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ListOptions"));
	
	_Объект.count = count;
	_Объект.offset = offset;
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий дату и время
// преобразует дату 1с в xd и обратно
Функция ComplexDate(пДата) Экспорт
	
	Если ТипЗнч(пДата) = Тип("Дата") Тогда
		
		_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ComplexDate"));
		
		_Объект.year  = Формат(Год(пДата), "ЧГ=");
		_Объект.month = Формат(Месяц(пДата),"ЧЦ=2; ЧВН=");
		_Объект.day   = Формат(День(пДата),"ЧЦ=2; ЧВН=");
		_Объект.hour  = "00";
	Иначе
		_свойства = пДата.Свойства();
		_гггг = ?(_свойства.Получить("year") = Неопределено, 1, Число(пДата.year));
		_мм = ?(_свойства.Получить("month") = Неопределено, 1, Число(пДата.month));
		_дд = ?(_свойства.Получить("day") = Неопределено, 1, Число(пДата.day));
		_Объект = Дата(_гггг, _мм, _дд);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция DataInterval(beginDate, endDate) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "DataInterval"));
	
	_Объект.beginDate = ВетисОбщегоНазначения.XMLДатаВремя(beginDate);
	_Объект.endDate   = ВетисОбщегоНазначения.XMLДатаВремя(endDate);
	
	Возврат _Объект;
	
КонецФункции


#Область RegisterModificationType
// тип, описывающий тип операции на изменение реестра

// добавление новой записи
Функция RegisterModificationType_CREATE() Экспорт
	
	Возврат "CREATE";
	
КонецФункции

// Поиск существующей или добавление новой записи
Функция RegisterModificationType_FIND_OR_CREATE() Экспорт
	
	Возврат "FIND_OR_CREATE";
	
КонецФункции

// Внесение изменений в существующую запись
Функция RegisterModificationType_UPDATE() Экспорт
	
	Возврат "UPDATE";
	
КонецФункции

// Удаление существующей записи
Функция RegisterModificationType_DELETE() Экспорт
	
	Возврат "DELETE";
	
КонецФункции

Функция RegisterModificationType_MERGE() Экспорт
	
	Возврат "MERGE";
	
КонецФункции

Функция RegisterModificationType_ATTACH() Экспорт
	
	Возврат "ATTACH";
	
КонецФункции

Функция RegisterModificationType_SPLIT() Экспорт
	
	Возврат "SPLIT";
	
КонецФункции

Функция RegisterModificationType_FORK() Экспорт
	
	Возврат "FORK";
	
КонецФункции

// описание
Функция RegisterModificationTypeОписание(nature) Экспорт
	
	Если nature = RegisterModificationType_CREATE() Тогда
		Возврат "Добавление";
	ИначеЕсли nature = RegisterModificationType_FIND_OR_CREATE() Тогда
		Возврат "Поиск";
	ИначеЕсли nature = RegisterModificationType_UPDATE() Тогда
		Возврат "Внесение изменений";
	ИначеЕсли nature = RegisterModificationType_DELETE() Тогда
		Возврат "Удаление";
	ИначеЕсли nature = RegisterModificationType_MERGE() Тогда
		Возврат "Объединение";
	ИначеЕсли nature = RegisterModificationType_ATTACH() Тогда
		Возврат "Прикрепление";
	ИначеЕсли nature = RegisterModificationType_SPLIT() Тогда
		Возврат "Разделение";
	ИначеЕсли nature = RegisterModificationType_FORK() Тогда
		Возврат "Ответвление";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// список
Функция RegisterModificationTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(RegisterModificationType_CREATE(),         RegisterModificationTypeОписание(RegisterModificationType_CREATE()));
	_Список.Добавить(RegisterModificationType_FIND_OR_CREATE(), RegisterModificationTypeОписание(RegisterModificationType_FIND_OR_CREATE()));
	_Список.Добавить(RegisterModificationType_UPDATE(),         RegisterModificationTypeОписание(RegisterModificationType_UPDATE()));
	_Список.Добавить(RegisterModificationType_DELETE(),         RegisterModificationTypeОписание(RegisterModificationType_DELETE()));
	_Список.Добавить(RegisterModificationType_MERGE(),          RegisterModificationTypeОписание(RegisterModificationType_MERGE()));
	_Список.Добавить(RegisterModificationType_ATTACH(),         RegisterModificationTypeОписание(RegisterModificationType_ATTACH()));
	_Список.Добавить(RegisterModificationType_SPLIT(),          RegisterModificationTypeОписание(RegisterModificationType_SPLIT()));
	_Список.Добавить(RegisterModificationType_FORK(),           RegisterModificationTypeОписание(RegisterModificationType_FORK()));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти


Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/base";
	
КонецФункции

