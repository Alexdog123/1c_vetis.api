
// Тип, описывающий ветеринарно-сопроводительный документ (ВСД).
// Параметры:
//  vetDocumentUuid - Идентификатор ВСД
Функция VetDocument(vetDocumentUuid) Экспорт
	
	_Объект = Создать("VetDocument");
	
	_Объект.uuid = vetDocumentUuid;
	
	Возврат _Объект;
	
КонецФункции

Функция VetDocumentListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "vetDocument");
	
КонецФункции

// Тип, описывающий поставку.
// Параметры:
//  consignor - ent:BusinessMember - Сведения об отправителе.
//  consignee - ent:BusinessMember - Сведения о получателе.
//  consignment - vetd:Consignment - Фактические сведения о входящей партии или группе животных.
//  accompanyingForms - vetd:ConsignmentDocumentList - Сопроводительные документы.
Функция Delivery(consignor, consignee, consignment, accompanyingForms) Экспорт
	
	_Объект = Создать("Delivery");
	
	_Объект.deliveryDate = ТекущаяДата();// Дата поставки.
	_Объект.consignor = consignor;
	_Объект.consignee = consignee;
	_Объект.consignment = consignment;
	_Объект.accompanyingForms = accompanyingForms;
	
	Возврат _Объект;
	
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41188
	// В случае если вы передаете в запросе несколько объектов consignment ("..Request/delivery/consignment")
	// и несколько объектов vetCertificate ("..Request/delivery/accompanyingForms/vetCertificate")
	// то связь между ними должна быть установлена путем указания атрибутов "id" - у элемента consignment
	// и "for" - для элемента vetCertificate.
	// 
	// В случае если вы передаете в запросе несколько объектов consignment и один объект vetCertificate,
	// то атрибуты id и for могут быть не указаны,
	// но в этом случае информация из единственного элемента vetCertificate будет распространяться на все ВСД,
	// оформляемые в этом запросе.
	//
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41192
	// Возможно, что неверно указали значения для атрибутов id и for.
	// Их типы ID и IDREF, соответственно, и должны начинаться с "_" или буквенного символа.
	
КонецФункции

// Обобщенные сведения о результате приема партии продукции.
// Параметры:
//  presence - argc:DocumentNature - Природа ВСД (электронный или бумажный)
//  docInspection - vetd:DeliveryInspection - Соответствуют ли сведения о партии, указанной в ВСД, фактическим
//  vetInspection - vetd:DeliveryInspection - Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
//  decision - vetd:DeliveryDecision - Принятое решение о приёме входной партии.
Функция DeliveryFactList(presence, docInspection, vetInspection, decision) Экспорт
	
	_Объект = Создать("DeliveryFactList");
	
	_Объект.vetCertificatePresence = presence;
	_Объект.docInspection = docInspection;
	_Объект.vetInspection = vetInspection;
	_Объект.decision = decision;
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
// Параметры:
// 	result - vetd:DeliveryInspectionResult - Результат контроля.
//  responsible - argc:User - Ответственный за контроль.
Функция DeliveryInspection(result, responsible = Неопределено) Экспорт
	
	_Объект = Создать("DeliveryInspection");
	
	_Объект.result = result;
	
	Если responsible = Неопределено Тогда
		_Объект.responsible = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	Иначе
		_Объект.responsible = responsible;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция ConsignmentDocumentList(waybill, VetDocument) Экспорт
	
	_Объект = Создать("ConsignmentDocumentList");
	
	_Объект.waybill = waybill;// Сведения о товарно-транспортной накладной.
	_Объект.VetDocument = VetDocument;// Ветеринарно-сопроводительный документ (ВСД).
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий транспортную партию груза.
Функция Consignment() Экспорт
	
	_Объект = Создать("Consignment");
	
	//_Объект.productName = name;//	Наименование продукции в соответствии с оформленной товарной накладной.
	//_Объект.productCode = articul;// Артикул (код) продукции в соответствии с оформленной товарной накладной.
	//_Объект.sourceStockEntry = StockEntry(stockEntry);// Запись журнала, из которой формируется транспортная партия.
	
	//_Объект.id = "";// Идентификатор, определяющий consignment в запросе. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	//_Объект.partOf = "";// Ссылка на consignment в разделе delivery запроса. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39747
	// Этот атрибут был заявлен на перспективу.
	// В дальнейшем планируется добавить возможность гашения нескольких партий товара.
	// На данный момент использование или неиспользование этого атрибута ошибочным не является.
	
	//свойства базового типа bath:
	
	//_Объект.productType      = productType;// Тип продукции.
	//_Объект.product          = ВетисArgusProduction.Product(product);// Продукция.
	//_Объект.subProduct       = ВетисArgusProduction.SubProduct(subProduct);// Вид продукции.
	//_Объект.productItem      = ВетисArgusProduction.ProductItem(productItem);// Наименование произведенной продукции в номенклатуре производителя.
	//_Объект.volume           = volume;// Объем произведенной продукции. Значение должно быть больше нуля.
	//_Объект.unit             = ВетисArgusCommon.Unit(unit);// Единица измерения объема произведенной продукции.
	
	//_Объект.packingList      = ВетисArgusCommon.PackingFormList(pack);// Список видов упаковки, которые используются для производственной партии.
	//_Объект.packingAmount    = packAmount;// Общее количество единиц упаковки для производственной партии.
	//_Объект.dateOfProduction = GoodsDate(ТекущаяДата());// Дата выработки продукции.
	//_Объект.expiryDate       = GoodsDate(ДобавитьМесяц(ТекущаяДата(), 12));// Дата окончания срока годности продукции.
	//_Объект.perishable       = false;// Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.
	
	//_Объект.countryOfOrigin  = ;// Страна происхождения продукции.
	//_Объект.producerList     = ;// Список производителей продукции.
	//_Объект.productMarkingList = 1;// Список маркировки продукции, доступной для данного производителя.
	//_Объект.lowGradeCargo    = 1;// Является ли продукция некачественной.
	//_Объект.owner            = 1;// Собственник продукции.
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий cведения о записи журнала продукции.
Функция StockEntry(guid) Экспорт
	
	_Объект = Создать("StockEntry");
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция StockEntryListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "stockEntry");
	
КонецФункции

// Тип, описывающий дату производства, либо дату окончания срока годности продукции.
// Может указываться единичной датой, интервалом, либо строкой.
Функция GoodsDate(firstDate, secondDate = Неопределено) Экспорт
	
	_Объект = Создать("GoodsDate");
	
	Если ТипЗнч(firstDate) = Тип("Дата") Тогда
		_Объект.firstDate = ВетисBase.ComplexDate(firstDate);
	Иначе
		_Объект.informalDate = firstDate;
	КонецЕсли;
	
	Если НЕ secondDate = Неопределено Тогда
		_Объект.secondDate = secondDate;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий партию груза.
Функция Batch(productType, product, subProduct, productItem, volume, unit) Экспорт
	
	_Объект = Создать("Batch");
	
	_Объект.productType      = productType;// Тип продукции.
	_Объект.product          = ВетисArgusProduction.Product(product);// Продукция.
	_Объект.subProduct       = ВетисArgusProduction.SubProduct(subProduct);// Вид продукции.
	_Объект.productItem      = ВетисArgusProduction.ProductItem(productItem);// Наименование произведенной продукции в номенклатуре производителя.
	_Объект.volume           = volume;// Объем произведенной продукции. Значение должно быть больше нуля.
	_Объект.unit             = ВетисArgusCommon.Unit(unit);// Единица измерения объема произведенной продукции.
	
	//_Объект.packingList      = ВетисArgusCommon.PackingFormList();// Список видов упаковки, которые используются для производственной партии.
	//_Объект.packingAmount    = 0;// Общее количество единиц упаковки для производственной партии.
	//_Объект.dateOfProduction = GoodsDate(ТекущаяДата());// Дата выработки продукции.
	//_Объект.expiryDate       = GoodsDate(ДобавитьМесяц(ТекущаяДата(), 12));// Дата окончания срока годности продукции.
	//_Объект.perishable       = false;// Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.
	
	//_Объект.countryOfOrigin  = 1;// Страна происхождения продукции.
	//_Объект.producerList     = 1;// Список производителей продукции.
	//_Объект.productMarkingList = 1;// Список маркировки продукции, доступной для данного производителя.
	//_Объект.lowGradeCargo    = 1;// Является ли продукция некачественной.
	//_Объект.owner            = 1;// Собственник продукции.

	Возврат _Объект;
	
КонецФункции


Функция ProductMarking(content) Экспорт
	
	_Объект = Создать("ProductMarking");
	
	_Объект.class = ВетисКонстанты.ProductMarkingClass_UNDEFINED();//пока только UNDEFINED
	
	_Объект.__content = content;
	
	Возврат _Объект;
	
КонецФункции

Функция ProductMarkingList(content) Экспорт
	
	_Объект = Создать("ProductMarking");
	
	ProductMarkingДобавить(_Объект, content);
	
	Возврат _Объект;
	
КонецФункции

Функция ProductMarkingДобавить(List, content) Экспорт
	
	Если ТипЗнч(content) = Тип("Массив") Тогда
		Для каждого _content Из content Цикл
			List.productMarking.Добавить(ФормаXML.Элемент, URI(), "productMarking", ProductMarking(_content));
		КонецЦикла;
	ИначеЕсли ТипЗнч(content) = Тип("Строка") Тогда
		List.productMarking.Добавить(ФормаXML.Элемент, URI(), "productMarking", ProductMarking(content));
	КонецЕсли;
	
КонецФункции


Функция DiscrepancyReport(issueSeries, issueNumber, issueDate, reason, description) Экспорт
	
	_Объект = Создать("DiscrepancyReport");
	
	_Объект.issueSeries = issueSeries;
	_Объект.issueNumber = issueNumber;
	_Объект.issueDate   = ?(ТипЗнч(issueDate) = Тип("Дата"), XMLСтрока(issueDate), issueDate);
	_Объект.reason      = DiscrepancyReason(reason);
	_Объект.description = description;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReason(name) Экспорт
	
	_Объект = Создать("DiscrepancyReason");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции


#Область AnimalSpentPeriod
// Тип, описывающий cколько времени животные находились на территории ТС.

Функция AnimalSpentPeriod(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_ZERO();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция AnimalSpentPeriodОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH()          ИЛИ value = 1 Тогда
		Возврат "Животные находились на территории ТС с рождения";
	ИначеЕсли value = ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS() ИЛИ value = 2 Тогда
		Возврат "Животные находились на территории ТС не менее 6 месяцев";
	ИначеЕсли value = ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS()           ИЛИ value = 3 Тогда
		Возврат "Животные находились на территории ТС указанное кол-во месяцев";
	ИначеЕсли value = ВетисКонстанты.AnimalSpentPeriod_ZERO()                ИЛИ value = 4 Тогда
		Возврат "Животные не находились на территории ТС";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция AnimalSpentPeriodСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 4 Цикл
		_Список.Добавить(AnimalSpentPeriod(_Индекс), AnimalSpentPeriodОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область DeliveryDecision
// Тип, описывающий контроль поставки (документарный, ветеринарный).

Функция DeliveryDecision(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecisionОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.DeliveryDecision_ACCEPT_ALL() ИЛИ value = 1 Тогда
		Возврат "Принять всю поставку";
	ИначеЕсли value = ВетисКонстанты.DeliveryDecision_PARTIALLY()  ИЛИ value = 2 Тогда
		Возврат "Принять часть груза, на оставшуюся оформить возврат";
	ИначеЕсли value = ВетисКонстанты.DeliveryDecision_RETURN_ALL() ИЛИ value = 3 Тогда
		Возврат "Оформить возврат на всю поставку";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecisionСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 3 Цикл
		_Список.Добавить(DeliveryDecision(_Индекс), DeliveryDecisionОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область DeliveryInspectionResult
// Тип, описывающий результат контроля поставки.

Функция DeliveryInspectionResult(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResultОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS()  ИЛИ value = 1 Тогда
		Возврат "Груз соответствует сведениям, заявленным в документах";
	ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_MISMATCH()     ИЛИ value = 2 Тогда
		Возврат "Груз отличается от сведений, указанных в сопроводительных документах";
	ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED() ИЛИ value = 3 Тогда
		Возврат "Контроль не проводился";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResultСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(DeliveryInspectionResult(1), DeliveryInspectionResultОписание(1));
	_Список.Добавить(DeliveryInspectionResult(2), DeliveryInspectionResultОписание(2));
	_Список.Добавить(DeliveryInspectionResult(3), DeliveryInspectionResultОписание(3));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VetDocumentForm
// Тип, описывающий форму ветеринарно-сопроводительного докумнета (ВСД).

Функция VetDocumentForm(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC1();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC2();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
	ИначеЕсли value = 6 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC3();
	ИначеЕсли value = 7 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
	ИначеЕсли value = 8 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
	ИначеЕсли value = 9 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT61();
	ИначеЕсли value = 10 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT62();
	ИначеЕсли value = 11 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT63();
	ИначеЕсли value = 12 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentFormОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.VetDocumentForm_CERTCU1()    ИЛИ value = 1 Тогда
		Возврат "Форма 1 ветеринарного сертификата ТС";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC1()       ИЛИ value = 2 Тогда
		Возврат "Форма 1 ветеринарного свидетельства";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU2()    ИЛИ value = 3 Тогда
		Возврат "Форма 2 ветеринарного сертификата ТС";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC2()       ИЛИ value = 4 Тогда
		Возврат "Форма 2 ветеринарного свидетельства";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU3()    ИЛИ value = 5 Тогда
		Возврат "Форма 3 ветеринарного сертификата ТС";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC3()       ИЛИ value = 6 Тогда
		Возврат "Форма 3 ветеринарного свидетельства";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_NOTE4()      ИЛИ value = 7 Тогда
		Возврат "Форма 4 ветеринарной справки";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT5I()     ИЛИ value = 8 Тогда
		Возврат "Форма 5i ветеринарного сертификата";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT61()     ИЛИ value = 9 Тогда
		Возврат "Форма 6.1 ветеринарного сертификата";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT62()     ИЛИ value = 10 Тогда
		Возврат "Форма 6.2 ветеринарного сертификата";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT63()     ИЛИ value = 11 Тогда
		Возврат "Форма 6.3 ветеринарного сертификата";
	ИначеЕсли value = ВетисКонстанты.VetDocumentForm_PRODUCTIVE() ИЛИ value = 12 Тогда
		Возврат "Производственный сертификат";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentFormСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 12 Цикл
		_Список.Добавить(VetDocumentForm(_Индекс), VetDocumentFormОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VetDocumentStatus
// Тип, описывающий статус ветеринарно-сопроводительного докумнета (ВСД).

Функция VetDocumentStatus(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentStatusОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.VetDocumentStatus_CONFIRMED() ИЛИ value = 1 Тогда
		Возврат "Действующий сертификат, по которому разрешено совершать транзакцию с грузом";
	ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_WITHDRAWN() ИЛИ value = 2 Тогда
		Возврат "Не действующий более сертификат";
	ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_UTILIZED()  ИЛИ value = 3 Тогда
		Возврат "Действующий сертификат, по которому транзакция уже была совершена";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentStatusСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(VetDocumentStatus(1), VetDocumentStatusОписание(1));
	_Список.Добавить(VetDocumentStatus(2), VetDocumentStatusОписание(2));
	_Список.Добавить(VetDocumentStatus(3), VetDocumentStatusОписание(3));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VetDocumentType
// Тип, описывающий тип ветеринарно-сопроводительного документа (ВСД).
// Типы сертификатов в документации перечислены как для запросов, так и для ответов сервиса.
// В запросе на список ветеринарных сертификатов можно указать только входящие или исходящие.
// В ответе сервиса придут транспортные и возвратные сертификаты.
// То есть в запросе можно указать направление отправки сертификата (от предприятия или на предприятие),
// а в ответе придет информация о том какие из них были транспортными, а какие были оформлены как возвратными.

Функция VetDocumentType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentType_INCOMING();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentTypeОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.VetDocumentType_INCOMING()   ИЛИ value = 1 Тогда
		Возврат "Входящий";
	ИначеЕсли value = ВетисКонстанты.VetDocumentType_OUTGOING()   ИЛИ value = 2 Тогда
		Возврат "Исходящий";
	ИначеЕсли value = ВетисКонстанты.VetDocumentType_PRODUCTIVE() ИЛИ value = 3 Тогда
		Возврат "Производственный";
	ИначеЕсли value = ВетисКонстанты.VetDocumentType_RETURNABLE() ИЛИ value = 4 Тогда
		Возврат "Возвратный";
	ИначеЕсли value = ВетисКонстанты.VetDocumentType_TRANSPORT()  ИЛИ value = 5 Тогда
		Возврат "Транспортный";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(VetDocumentType(1), VetDocumentTypeОписание(1));
	_Список.Добавить(VetDocumentType(2), VetDocumentTypeОписание(2));
	_Список.Добавить(VetDocumentType(3), VetDocumentTypeОписание(3));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область ProductMarkingClass

Функция ProductMarkingClass(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_UNDEFINED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_BN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_SSCC();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductMarkingClassОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.ProductMarkingClass_UNDEFINED() ИЛИ value = 1 Тогда
		Возврат "";
	ИначеЕсли value = ВетисКонстанты.ProductMarkingClass_BN()        ИЛИ value = 2 Тогда
		Возврат "Номер партии";
	ИначеЕсли value = ВетисКонстанты.ProductMarkingClass_SSCC()      ИЛИ value = 3 Тогда
		Возврат "SSCC-код";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductMarkingClassСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(ProductMarkingClass(1), ProductMarkingClassОписание(1));
	_Список.Добавить(ProductMarkingClass(2), ProductMarkingClassОписание(2));
	_Список.Добавить(ProductMarkingClass(3), ProductMarkingClassОписание(3));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти


Функция Создать(Имя) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), Имя));
	
	Возврат _Объект;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/vet-document";
	
КонецФункции

