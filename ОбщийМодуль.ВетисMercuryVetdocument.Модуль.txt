
// Тип, описывающий ветеринарно-сопроводительный документ (ВСД).
Функция VetDocument() Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "VetDocument"));
	
	_Объект.cargoInspected = Истина;// Осуществлен контроль гос.ветврачом на соответствие требованиям.
	_Объект.cargoExpertized = Ложь;// Проводилась ли ветсанэкспертиза.
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий поставку.
Функция Delivery(consignorBE, consignorE, consigneeBE, consigneeE,
	productType, product, subProduct, productItem, volume, unit) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Delivery"));
	
	_Объект.deliveryDate = ТекущаяДата();// Дата поставки.
	_Объект.consignor = ВетисCerberusEnterprise.BusinessMember(consignorBE, consignorE);// Сведения об отправителе (владельце).
	_Объект.consignee = ВетисCerberusEnterprise.BusinessMember(consigneeBE, consigneeE);// Сведения о получателе груза.
	_Объект.consignment = Consignment(productType, product, subProduct, productItem, volume, unit);// Сведения о транспортной партии.
	//_Объект.accompanyingForms = "";// Сопроводительные документы.
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит обобщенные сведения о результате приема партии продукции.
Функция DeliveryFactList(presence, docInspection, vetInspection, decision) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "DeliveryFactList"));
	
	_Объект.vetCertificatePresence = presence;
	_Объект.docInspection = docInspection;// Соответствуют ли сведения о партии, указанной в ВСД, фактическим.
	_Объект.vetInspection = vetInspection;// Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
	_Объект.decision = decision;// Принятое решение о приёме входной партии.
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция DeliveryInspection(result) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "DeliveryFactList"));
	
	_Объект.responsible = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());// Ответственный за контроль.
	_Объект.result = result;// Результат контроля.
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция ConsignmentDocumentList(waybill, VetDocument) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ConsignmentDocumentList"));
	
	_Объект.waybill = waybill;// Сведения о товарно-транспортной накладной.
	_Объект.VetDocument = VetDocument;// Ветеринарно-сопроводительный документ (ВСД).
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий транспортную партию груза.
Функция Consignment(productType, product, subProduct, productItem, volume, unit) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Consignment"));
	
	//_Объект.productName = name;//	Наименование продукции в соответствии с оформленной товарной накладной.
	//_Объект.productCode = articul;// Артикул (код) продукции в соответствии с оформленной товарной накладной.
	//_Объект.sourceStockEntry = StockEntry(stockEntry);// Запись журнала, из которой формируется транспортная партия.
	
	//_Объект.id = "";// Идентификатор, определяющий consignment в запросе. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	//_Объект.partOf = "";// Ссылка на consignment в разделе delivery запроса. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39747
	// Этот атрибут был заявлен на перспективу.
	// В дальнейшем планируется добавить возможность гашения нескольких партий товара.
	// На данный момент использование или неиспользование этого атрибута ошибочным не является.
	
	//свойства базового типа bath:
	
	_Объект.productType      = productType;// Тип продукции.
	_Объект.product          = ВетисArgusProduction.Product(product);// Продукция.
	_Объект.subProduct       = ВетисArgusProduction.SubProduct(subProduct);// Вид продукции.
	_Объект.productItem      = ВетисArgusProduction.ProductItem(productItem);// Наименование произведенной продукции в номенклатуре производителя.
	_Объект.volume           = volume;// Объем произведенной продукции. Значение должно быть больше нуля.
	_Объект.unit             = ВетисArgusCommon.Unit(unit);// Единица измерения объема произведенной продукции.
	
	//_Объект.packingList      = ВетисArgusCommon.PackingFormList(pack);// Список видов упаковки, которые используются для производственной партии.
	//_Объект.packingAmount    = packAmount;// Общее количество единиц упаковки для производственной партии.
	//_Объект.dateOfProduction = GoodsDate(ТекущаяДата());// Дата выработки продукции.
	//_Объект.expiryDate       = GoodsDate(ДобавитьМесяц(ТекущаяДата(), 12));// Дата окончания срока годности продукции.
	//_Объект.perishable       = false;// Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.
	
	//_Объект.countryOfOrigin  = ;// Страна происхождения продукции.
	//_Объект.producerList     = ;// Список производителей продукции.
	//_Объект.productMarkingList = 1;// Список маркировки продукции, доступной для данного производителя.
	//_Объект.lowGradeCargo    = 1;// Является ли продукция некачественной.
	//_Объект.owner            = 1;// Собственник продукции.
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий cведения о записи журнала продукции.
Функция StockEntry(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "StockEntry"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция StockEntryListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "stockEntry");
	
КонецФункции

// Тип, описывающий дату производства, либо дату окончания срока годности продукции.
// Может указываться единичной датой, интервалом, либо строкой.
Функция GoodsDate(firstDate, secondDate = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "GoodsDate"));
	
	Если ТипЗнч(firstDate) = Тип("Дата") Тогда
		_Объект.firstDate = ВетисBase.ComplexDate(firstDate);
	Иначе
		_Объект.informalDate = firstDate;
	КонецЕсли;
	
	Если secondDate = Неопределено Тогда
		_Объект.secondDate = secondDate;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий партию груза.
Функция Batch(productType, product, subProduct, productItem, volume, unit) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Batch"));
	
	_Объект.productType      = productType;// Тип продукции.
	_Объект.product          = ВетисArgusProduction.Product(product);// Продукция.
	_Объект.subProduct       = ВетисArgusProduction.SubProduct(subProduct);// Вид продукции.
	_Объект.productItem      = ВетисArgusProduction.ProductItem(productItem);// Наименование произведенной продукции в номенклатуре производителя.
	_Объект.volume           = volume;// Объем произведенной продукции. Значение должно быть больше нуля.
	_Объект.unit             = ВетисArgusCommon.Unit(unit);// Единица измерения объема произведенной продукции.
	
	//_Объект.packingList      = ВетисArgusCommon.PackingFormList();// Список видов упаковки, которые используются для производственной партии.
	//_Объект.packingAmount    = 0;// Общее количество единиц упаковки для производственной партии.
	//_Объект.dateOfProduction = GoodsDate(ТекущаяДата());// Дата выработки продукции.
	//_Объект.expiryDate       = GoodsDate(ДобавитьМесяц(ТекущаяДата(), 12));// Дата окончания срока годности продукции.
	//_Объект.perishable       = false;// Описывает, является ли продукция скоропортящейся, true – скоропортящаяся, false – не скоропортящаяся.
	
	//_Объект.countryOfOrigin  = 1;// Страна происхождения продукции.
	//_Объект.producerList     = 1;// Список производителей продукции.
	//_Объект.productMarkingList = 1;// Список маркировки продукции, доступной для данного производителя.
	//_Объект.lowGradeCargo    = 1;// Является ли продукция некачественной.
	//_Объект.owner            = 1;// Собственник продукции.

	Возврат _Объект;
	
КонецФункции


#Область AnimalSpentPeriod
// Тип, описывающий cколько времени животные находились на территории ТС.

Функция AnimalSpentPeriod(period) Экспорт
	
	Если      period = 1 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH();
	ИначеЕсли period = 2 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS();
	ИначеЕсли period = 3 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS();
	ИначеЕсли period = 4 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_ZERO();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция AnimalSpentPeriodОписание(period) Экспорт
	
	Если      period = ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH()          ИЛИ period = 1 Тогда
		Возврат "Животные находились на территории ТС с рождения";
	ИначеЕсли period = ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS() ИЛИ period = 2 Тогда
		Возврат "Животные находились на территории ТС не менее 6 месяцев";
	ИначеЕсли period = ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS()           ИЛИ period = 3 Тогда
		Возврат "Животные находились на территории ТС указанное кол-во месяцев";
	ИначеЕсли period = ВетисКонстанты.AnimalSpentPeriod_ZERO()                ИЛИ period = 4 Тогда
		Возврат "Животные не находились на территории ТС";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция AnimalSpentPeriodСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 4 Цикл
		_Список.Добавить(AnimalSpentPeriod(_Индекс), AnimalSpentPeriodОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область DeliveryDecision
// Тип, описывающий контроль поставки (документарный, ветеринарный).

Функция DeliveryDecision(decision) Экспорт
	
	Если      decision = 1 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
	ИначеЕсли decision = 2 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
	ИначеЕсли decision = 3 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecisionОписание(decision) Экспорт
	
	Если      decision = ВетисКонстанты.DeliveryDecision_ACCEPT_ALL() ИЛИ decision = 1 Тогда
		Возврат "Принять всю поставку";
	ИначеЕсли decision = ВетисКонстанты.DeliveryDecision_PARTIALLY()  ИЛИ decision = 2 Тогда
		Возврат "Принять часть груза, на оставшуюся оформить возврат";
	ИначеЕсли decision = ВетисКонстанты.DeliveryDecision_RETURN_ALL() ИЛИ decision = 3 Тогда
		Возврат "Оформить возврат на всю поставку";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecisionСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 3 Цикл
		_Список.Добавить(DeliveryDecision(_Индекс), DeliveryDecisionОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область DeliveryInspectionResult
// Тип, описывающий результат контроля поставки.

Функция DeliveryInspectionResult(result) Экспорт
	
	Если      result = 1 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
	ИначеЕсли result = 2 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
	ИначеЕсли result = 3 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResultОписание(result) Экспорт
	
	Если      result = ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS()  ИЛИ result = 1 Тогда
		Возврат "Груз соответствует сведениям, заявленным в документах";
	ИначеЕсли result = ВетисКонстанты.DeliveryInspectionResult_MISMATCH()     ИЛИ result = 2 Тогда
		Возврат "Груз отличается от сведений, указанных в сопроводительных документах";
	ИначеЕсли result = ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED() ИЛИ result = 3 Тогда
		Возврат "Контроль не проводился";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResultСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(DeliveryInspectionResult(1), DeliveryInspectionResultОписание(1));
	_Список.Добавить(DeliveryInspectionResult(2), DeliveryInspectionResultОписание(2));
	_Список.Добавить(DeliveryInspectionResult(3), DeliveryInspectionResultОписание(3));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VetDocumentForm
// Тип, описывающий форму ветеринарно-сопроводительного докумнета (ВСД).

Функция VetDocumentForm(form) Экспорт
	
	Если      form = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
	ИначеЕсли form = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC1();
	ИначеЕсли form = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
	ИначеЕсли form = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC2();
	ИначеЕсли form = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
	ИначеЕсли form = 6 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC3();
	ИначеЕсли form = 7 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
	ИначеЕсли form = 8 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
	ИначеЕсли form = 9 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT61();
	ИначеЕсли form = 10 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT62();
	ИначеЕсли form = 11 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT63();
	ИначеЕсли form = 12 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentFormОписание(form) Экспорт
	
	Если      form = ВетисКонстанты.VetDocumentForm_CERTCU1()    ИЛИ form = 1 Тогда
		Возврат "Форма 1 ветеринарного сертификата ТС";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_LIC1()       ИЛИ form = 2 Тогда
		Возврат "Форма 1 ветеринарного свидетельства";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERTCU2()    ИЛИ form = 3 Тогда
		Возврат "Форма 2 ветеринарного сертификата ТС";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_LIC2()       ИЛИ form = 4 Тогда
		Возврат "Форма 2 ветеринарного свидетельства";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERTCU3()    ИЛИ form = 5 Тогда
		Возврат "Форма 3 ветеринарного сертификата ТС";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_LIC3()       ИЛИ form = 6 Тогда
		Возврат "Форма 3 ветеринарного свидетельства";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_NOTE4()      ИЛИ form = 7 Тогда
		Возврат "Форма 4 ветеринарной справки";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERT5I()     ИЛИ form = 8 Тогда
		Возврат "Форма 5i ветеринарного сертификата";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERT61()     ИЛИ form = 9 Тогда
		Возврат "Форма 6.1 ветеринарного сертификата";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERT62()     ИЛИ form = 10 Тогда
		Возврат "Форма 6.2 ветеринарного сертификата";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_CERT63()     ИЛИ form = 11 Тогда
		Возврат "Форма 6.3 ветеринарного сертификата";
	ИначеЕсли form = ВетисКонстанты.VetDocumentForm_PRODUCTIVE() ИЛИ form = 12 Тогда
		Возврат "Производственный сертификат";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentFormСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 12 Цикл
		_Список.Добавить(VetDocumentForm(_Индекс), VetDocumentFormОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти

#Область VetDocumentStatus
// Тип, описывающий статус ветеринарно-сопроводительного докумнета (ВСД).

Функция VetDocumentStatusОписание(status) Экспорт
	
	Если status = ВетисКонстанты.VetDocumentStatus_CONFIRMED() Тогда
		Возврат "Действующий сертификат, по которому разрешено совершать транзакцию с грузом";
	ИначеЕсли status = ВетисКонстанты.VetDocumentStatus_WITHDRAWN() Тогда
		Возврат "Не действующий более сертификат";
	ИначеЕсли status = ВетисКонстанты.VetDocumentStatus_UTILIZED() Тогда
		Возврат "Действующий сертификат, по которому транзакция уже была совершена";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область VetDocumentType
// Тип, описывающий тип ветеринарно-сопроводительного документа (ВСД).
// Типы сертификатов в документации перечислены как для запросов, так и для ответов сервиса.
// В запросе на список ветеринарных сертификатов можно указать только входящие или исходящие.
// В ответе сервиса придут транспортные и возвратные сертификаты.
// То есть в запросе можно указать направление отправки сертификата (от предприятия или на предприятие),
// а в ответе придет информация о том какие из них были транспортными, а какие были оформлены как возвратными.

Функция VetDocumentType(type) Экспорт
	
	Если      type = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentType_INCOMING();
	ИначеЕсли type = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
	ИначеЕсли type = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
	ИначеЕсли type = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
	ИначеЕсли type = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentTypeОписание(type) Экспорт
	
	Если      type = ВетисКонстанты.VetDocumentType_INCOMING()   ИЛИ type = 1 Тогда
		Возврат "Входящий";
	ИначеЕсли type = ВетисКонстанты.VetDocumentType_OUTGOING()   ИЛИ type = 2 Тогда
		Возврат "Исходящий";
	ИначеЕсли type = ВетисКонстанты.VetDocumentType_PRODUCTIVE() ИЛИ type = 3 Тогда
		Возврат "Производственный";
	ИначеЕсли type = ВетисКонстанты.VetDocumentType_RETURNABLE() ИЛИ type = 4 Тогда
		Возврат "Возвратный";
	ИначеЕсли type = ВетисКонстанты.VetDocumentType_TRANSPORT()  ИЛИ type = 5 Тогда
		Возврат "Транспортный";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(VetDocumentType(1), VetDocumentTypeОписание(1));
	_Список.Добавить(VetDocumentType(2), VetDocumentTypeОписание(2));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти


Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/vet-document";
	
КонецФункции

