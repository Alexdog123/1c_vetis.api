
// Тип, описывающий тип продукции.
Функция ProductTypeОписание(type) Экспорт
	
	Если type = 1 Тогда
		Возврат "Мясо и мясопродукты";
	ИначеЕсли type = 2 Тогда
		Возврат "Корма и кормовые добавки";
	ИначеЕсли type = 3 Тогда
		Возврат "Живые животные";
	ИначеЕсли type = 4 Тогда
		Возврат "Лекарственные средства";
	ИначеЕсли type = 5 Тогда
		Возврат "Пищевые продукты";
	ИначеЕсли type = 6 Тогда
		Возврат "Непищевые продукты и другое";
	ИначеЕсли type = 7 Тогда
		Возврат "Рыба и морепродукты";
	ИначеЕсли type = 8 Тогда
		Возврат "Продукция, не требующая разрешения";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Индекс = 1;
	
	Пока Истина Цикл
		
		_описание = ProductTypeОписание(_Индекс);
		
		Если _описание = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		_Список.Добавить(_Индекс, _описание);
		
		_Индекс = _Индекс + 1;
		
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции


// Тип, описывающий продукцию.
Функция Product(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Product"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция ProductListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "product");
	
КонецФункции

Функция ProductListТаблица() Экспорт
	
	_Таблица = Новый ТаблицаЗначений;
	_Таблица.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("ProductType", Новый ОписаниеТипов("Число"));
	
КонецФункции


// Тип, описывающий вид продукции.
Функция SubProduct(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "SubProduct"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция SubProductListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "subProduct");
	
КонецФункции

Функция SubProductListТаблица() Экспорт
	
	_Таблица = Новый ТаблицаЗначений;
	_Таблица.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("productGuid", Новый ОписаниеТипов("Строка"));
	
КонецФункции


// Тип, описывающий наименование продукции.
Функция ProductItem(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Product"));
	
	_Объект.guid = guid;
	//_Объект.name = name;// Название продукции.
	//_Объект.code = articul;// Артикул (код) продукции.
	//_Объект.productType = productType;
	//_Объект.product = "";
	//_Объект.subProduct = "";
	//_Объект.correspondToGost = Ложь;
	//_Объект.gost = "";
	
	Возврат _Объект;
	
КонецФункции

Функция ProductItemListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "productItem");
	
КонецФункции

Функция ProductItemListТаблица() Экспорт
	
	_Таблица = Новый ТаблицаЗначений;
	_Таблица.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	
	_Таблица.Колонки.Добавить("productType", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("product"    , Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("subProduct" , Новый ОписаниеТипов("Строка"));
	
	_Таблица.Колонки.Добавить("correspondToGost", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("gost"            , Новый ОписаниеТипов("Строка"));
	
КонецФункции


#Область Service

// Предназначена для получения записи продукции
Функция GetProductByGuid(guid) Экспорт
	
	Возврат Прокси().GetProductByGuid(guid);
	
КонецФункции

// Предназначена для получения записи о виде продукции
Функция GetSubProductByGuid(guid) Экспорт
	
	Возврат Прокси().GetSubProductByGuid(guid);
	
КонецФункции

// предназначена для получения записи о номенклатуре производителя
Функция GetProductItemByGuid(guid) Экспорт
	
	Возврат Прокси().GetProductItemByGuid(guid);
	
КонецФункции


// Предназначена для получения списка продукции по указанному типу.
Функция GetProductByTypeList(productType, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetProductByTypeList(ListOptions, productType);
	
КонецФункции

Функция GetProductByTypeListСледующий_(ListResponse, productType, ListOptions) Экспорт
	
	Если ListOptions.offset + ListOptions.count >= Число(ListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
		ListResponse = Прокси().GetProductByTypeList(ListOptions, productType);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Предназначена для Выборки продукции по указанному типу.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductByTypeListСледующий(productType, Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.product[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetProductByTypeList(пПараметры.ListOptions, productType);
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Item = пПараметры.ListResponse.product[пПараметры.Индекс];
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка видов продукции, отфильтрованного по указанному продукту.
Функция GetSubProductByProductList(productGuid, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetSubProductByProductList(ListOptions, productGuid);
	
КонецФункции

// Используется совместно с GetSubProductByProductList
Функция GetSubProductByProductListСледующий_(ListResponse, productGuid, ListOptions) Экспорт
	
	Если ListOptions.offset + ListOptions.count >= Число(ListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
		ListResponse = Прокси().GetSubProductByProductList(ListOptions, productGuid);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Предназначена для выборки видов продукции, отфильтрованного по указанному продукту.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productGuid - ссылка на продукт
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetSubProductByProductListСледующий(productGuid, Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetSubProductByProductList(пПараметры.ListOptions, productGuid);
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Item = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
Функция GetProductItemList(subProductGuid, enterpriseGuid, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetProductItemList(ListOptions, subProductGuid, enterpriseGuid);
	
КонецФункции

// Предназначена для выборки наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductItemListСледующий(productType, Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.productItem[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetProductItemList(пПараметры.ListOptions, productType);
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Item = пПараметры.ListResponse.productItem[пПараметры.Индекс];
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


Функция Прокси()
	
	_Прокси = WSСсылки.ProductServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/argus/production";
	
КонецФункции
