
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "СкладскойЖурналПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.АктНесоответствия.Очистить();
	
	_Строка = ТекущийОбъект.АктНесоответствия.Добавить();
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 17) = "АктНесоответствия" Тогда
			_Строка[Сред(_Реквизит.Имя, 18)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПолучательОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", Объект.Получатель, ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Получатель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Объект.Получатель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ОтправительОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", Объект.Отправитель, ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Отправитель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Объект.Отправитель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналВСДПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.СкладскойЖурнал.ТекущиеДанные;
	_всд = Элементы.СкладскойЖурнал.ТекущиеДанные.ВСД;
	_сж = _всд.СкладскойЖурнал[0];
	_ТекущиеДанные.НоменклатурнаяГруппа = _сж.НоменклатурнаяГруппа;
	_ТекущиеДанные.Количество = _сж.Количество;
	_ТекущиеДанные.КоличествоМест = _сж.КоличествоМест;
	//_ТекущиеДанные.СтатусВСД = _всд.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПередУдалением(Элемент, Отказ)
	
	Отказ = ЗначениеЗаполнено(Элемент.ТекущиеДанные.guid);
	
КонецПроцедуры



&НаКлиенте
Процедура СоставитьАктНесоответствияПриИзменении(Элемент)
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого _СтрокаСЖ Из Объект.СкладскойЖурнал Цикл
		
		Если ЗначениеЗаполнено(_СтрокаСЖ.guid) Тогда
			Продолжить;
		КонецЕсли;
		
		Если _СтрокаСЖ.Возврат Тогда
			ЗаполнитьЗначенияСвойств(_СтрокаСЖ, ОтправитьСервер(
				_СтрокаСЖ.ВСД,     _СтрокаСЖ.Количество,        _СтрокаСЖ.КоличествоМест,
				_СтрокаСЖ.Возврат, _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат));
		Иначе
			_СтрокаСЖ.guid = ОтправитьСервер(_СтрокаСЖ.ВСД, _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьСервер(пВСД, пКоличество, пКоличествоМест, пВозврат = Ложь, пКоличествоВозврат = Неопределено, пКоличествоМестВозврат = Неопределено)
	
	Перем _discrepancyReport, _returnedDelivery;
	
	Если НЕ пВСД.Проведен Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(пВСД.Статус) И НЕ пВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат "";
	КонецЕсли;
	
	_Отладка = кпс.РазрешенаОтладка();
	
	_всд = пВСД.ПолучитьОбъект();
	
	_delivery = ВетисMercuryVetdocument.Delivery(
		ВетисCerberusEnterprise.BusinessMember(
			ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Отправитель),
			ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ОтправительПредприятие)),
		ВетисCerberusEnterprise.BusinessMember(
			ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Получатель),
			ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ПолучательПредприятие)),
		ПолучитьBatch(_всд.СкладскойЖурнал[0], пКоличество, пКоличествоМест, ВетисMercuryVetdocument.Consignment()),
		ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
		
	_сж = пВСД.СкладскойЖурнал[0];
	
	_РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(пКоличество = _сж.Количество, "CORRESPONDS", "MISMATCH")];
	_РезультатВетКонтроля = _РезультатПриема;
	
	_РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(пКоличество = 0, "RETURN_ALL", ?(пКоличествоВозврат = 0, "ACCEPT_ALL", "PARTIALLY"))];
	
	_deliveryFacts = ВетисMercuryVetdocument.DeliveryFactList(
	  ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
	  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатВетКонтроля), ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача())),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_РешениеОПриеме));
	
	Если НЕ пКоличество = _сж.Количество Тогда
		_discrepancyReport = ВетисMercuryVetdocument.Создать("DiscrepancyReport");
		_discrepancyReport.issueDate = Объект.Дата;
		_discrepancyReport.reason = ВетисMercuryVetdocument.DiscrepancyReason("Количество продукции "+?(пКоличество>_сж.Количество, "больше", "меньше")+" указанного в ВСД на "+?(пКоличество > _сж.Количество, пКоличество-_сж.Количество, _сж.Количество-пКоличество)+" кг.");
		_discrepancyReport.description = "В ВСД заявлено "+_сж.Количество+" кг, прибыло "+пКоличество+".";
	КонецЕсли;
	
	Если пВозврат = Истина Тогда
		_returnedDelivery = ВетисMercuryVetdocument.Delivery(
			ВетисCerberusEnterprise.BusinessMember(
				ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Получатель),
				ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ПолучательПредприятие)),
			ВетисCerberusEnterprise.BusinessMember(
				ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Отправитель),
				ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ОтправительПредприятие)),
			ПолучитьBatch(_всд.СкладскойЖурнал[0], пКоличествоВозврат, пКоличествоМестВозврат, ВетисMercuryVetdocument.Consignment()),
			ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
	КонецЕсли;
	
	
	_Request = ВетисMercuryApplications.ProcessIncomingConsignmentRequest(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery);
	
	_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "processIncomingConsignmentRequest", Ложь, _Отладка);
	
	Если _Response = Ложь Тогда Возврат ""; КонецЕсли;
	
	Модифицированность = Истина;
	
	_vetDocument = ВетисОбщегоНазначения.ПолучитьЗначение(_Response.processIncomingConsignmentResponse, "vetDocument");
	
	Если ТипЗнч(_vetDocument) = Тип("ОбъектXDTO") Тогда
		
		_всд.Uuid = _vetDocument.uuid;
		_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
		_всд.ОбменДанными.Загрузка = Истина;
		Попытка
			_всд.Записать();
		Исключение
			ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
			ВызватьИсключение;
		КонецПопытки;
		
		Возврат ВетисОбщегоНазначения.ПолучитьЗначение(_Response.processIncomingConsignmentResponse, "stockEntry").guid;
		
	Иначе
		
		_всд.Uuid = _vetDocument[0].uuid;
		_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument[0].status);
		_всд.ОбменДанными.Загрузка = Истина;
		Попытка
			_всд.Записать();
		Исключение
			ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
			ВызватьИсключение;
		КонецПопытки;
		
		//возвратный
		_всд = _всд.Скопировать();
		_всд.Uuid = _vetDocument[1].uuid;
		_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument[1].status);
		_сж = _всд.СкладскойЖурнал[0];
		_сж.Количество = _vetDocument[1].batch.volume;
		_сж.КоличествоМест = _vetDocument[1].batch.packingAmount;
		_всд.ОбменДанными.Загрузка = Истина;
		Попытка
			_всд.Записать();
		Исключение
			ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
			ВызватьИсключение;
		КонецПопытки;
		
		Возврат Новый Структура("guid, ВозвратныйВСД", ВетисОбщегоНазначения.ПолучитьЗначение(_Response.processIncomingConsignmentResponse, "stockEntry").guid, _всд.Ссылка);
		
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьBatch(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пОбъект = Неопределено)
	
	Если пОбъект = Неопределено Тогда
		_batch = ВетисMercuryVetdocument.Batch();
	Иначе
		_batch = пОбъект;
	КонецЕсли;
	
	_subProduct = ВетисArgusProduction.GetSubProductByGuid(ВетисArgusProductionСлой1с.SubProduct(пСтрокаСЖ.НоменклатурнаяГруппа));
	_product    = ВетисArgusProduction.GetProductByGuid(_subProduct.productGuid);
	
	_unitGuid = ВетисArgusCommonСлой1с.Unit(пСтрокаСЖ.ЕдиницаИзмерения);
	_unit    = ВетисArgusCommon.Unit(_unitGuid);
	
	_unitws     = ВетисArgusCommon.GetUnitByGuid(_unitGuid);
	_unit.uuid = _unitws.uuid;
	
	_batch.subProduct       = ВетисArgusProduction.SubProduct(_subProduct.guid);
	_batch.product          = ВетисArgusProduction.Product(_subProduct.productGuid);
	_batch.productType      = _product.productType;
	_batch.productItem      = ВетисArgusProduction.ProductItem(_subProduct.name);
	_batch.volume           = ?(пКоличество = Неопределено, пСтрокаСЖ.Количество, пКоличество);
	_batch.unit             = _unit;
	_batch.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(пСтрокаСЖ.Упаковка));
	_batch.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
	_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(пСтрокаСЖ.ВыработкаНачало, пСтрокаСЖ.ВыработкаКонец);
	_batch.expiryDate       = ВетисMercuryVetdocument.GoodsDate(пСтрокаСЖ.СрокГодностиНачало, пСтрокаСЖ.СрокГодностиКонец);
	_batch.perishable       = пСтрокаСЖ.Скоропортящаяся;
	_batch.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(пСтрокаСЖ.СтранаПроисхождения));
	_batch.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(пСтрокаСЖ.ПроизводительПредприятие));
	//_batch.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(сжМаркировка);
	_batch.lowGradeCargo    = пСтрокаСЖ.НекачественныйГруз;
	
	Возврат _batch;
	
КонецФункции

Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь)
	
	_VetDocument = ВетисMercuryVetdocument.Создать("VetDocument");
	
	Если пВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		
		_VetDocument.uuid = пВСД.uuid;
		
	Иначе
		_СтрокаСЖ  = пВСД.СкладскойЖурнал[0];
		_СтрокаВСД = пВСД.ВСД[0];
		_СтрокаТТН = пВСД.ТТН[0];
		
		Если пВозврат = Ложь Тогда
			
			_consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Отправитель);
			_consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ОтправительПредприятие);
			
			_consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Получатель);
			_consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ПолучательПредприятие);
			
			_VetDocument.issueSeries        = _СтрокаВСД.Серия;
			_VetDocument.issueNumber        = пВСД.НомерВСД;
			_VetDocument.issueDate          = пВСД.ДатаВСД;
			_VetDocument.form               = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(пВСД.Форма);
			//_VetDocument.type               = ВетисКонстанты.VetDocumentType_INCOMING();
			_VetDocument.consignor          = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
			_VetDocument.consignee          = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
			_VetDocument.batch              = ПолучитьBatch(_СтрокаСЖ);
			_VetDocument.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
			_VetDocument.broker             = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_СтрокаТТН.Посредник));
			_VetDocument.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
			_VetDocument.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
			_VetDocument.confirmedBy        = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
			_VetDocument.confirmedDate      = _СтрокаВСД.Дата;
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.quarantinePlace    = _СтрокаВСД.КарантированиеМесто;
			_VetDocument.quarantineDays     = _СтрокаВСД.КарантированиеДней;
			_VetDocument.immunizationInfo   = _СтрокаВСД.Иммунизация;
			//_VetDocument.precedingVetDocuments = _СтрокаВСД.ПредыдущиеВСД;
			//_VetDocument.importPermit       = ВетисArgusCommon.Document(всдРазрешениеНаВвозНазвание, всдРазрешениеНаВвозСерия, всдРазрешениеНаВвозНомер, всдРазрешениеНаВвозДата);
			//_VetDocument.transferPermit     = ВетисArgusCommon.Document(всдРазрешениеНаВывозНазвание, всдРазрешениеНаВывозСерия, всдРазрешениеНаВывозНомер, всдРазрешениеНаВывозДата);
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		Иначе
			_VetDocument.issueDate          = Объект.Дата;
			_VetDocument.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(Справочники.ВетисPurpose.НайтиПоНаименованию("возврат груза")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
			_VetDocument.confirmedDate      = _СтрокаВСД.Дата;
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь)
	
	_СтрокаТТН = пВСД.ТТН[0];
	
	_waybill = ВетисArgusShipment.Создать("Waybill");
	_waybill.issueSeries   = _СтрокаТТН.Серия;
	_waybill.issueNumber   = _СтрокаТТН.Номер;
	_waybill.issueDate     = _СтрокаТТН.Дата;
	_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
	_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_СтрокаТТН.Посредник));
	_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	
	Если пВозврат = Истина Тогда
		_waybill.issueSeries   = "";
		_waybill.issueNumber   = "";
		_waybill.issueDate     = Объект.Дата;
	КонецЕсли;
	
	Возврат _waybill;
	
КонецФункции


&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(пЗначение, пПараметр) Экспорт
	
	Если НЕ пЗначение = Неопределено Тогда
		Модифицированность = Истина;
		Выполнить пПараметр + " = пЗначение;";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписок(ИмяВладельца)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец ССЫЛКА Справочник.Склады
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.СобственныеКонтрагенты
	|			ГДЕ
	|				РегистрСведений.СобственныеКонтрагенты.Контрагент = &Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", Вычислить(ИмяВладельца));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		_Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

&НаСервере
Функция Элемент_ПутьКДанным(пЭлементИмя)
	
	Возврат Элементы[пЭлементИмя].ПутьКДанным;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.ЭтоГруппа,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Таблица.ИНН,
	|	_Таблица.КПП,
	|	_Таблица.ОсновнойМенеджерПокупателя КАК Менеджер,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.Контрагенты КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Строка Из Объект.АктНесоответствия Цикл
		Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
			Если Лев(_Реквизит.Имя, 17) = "АктНесоответствия" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 18)];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


