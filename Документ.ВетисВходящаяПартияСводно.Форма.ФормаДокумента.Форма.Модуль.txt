
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры


&НаКлиенте
Процедура СкладскойЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СкладскойЖурналВозвратныйВСД" Тогда
		ОткрытьЗначение(Элементы.СкладскойЖурнал.ТекущиеДанные.ВозвратныйВСД);
	ИначеЕсли Поле.Имя = "СкладскойЖурналВСД" И ЗначениеЗаполнено(Элементы.СкладскойЖурнал.ТекущиеДанные.guid) Тогда
		ОткрытьЗначение(Элементы.СкладскойЖурнал.ТекущиеДанные.ВСД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПередУдалением(Элемент, Отказ)
	
	Отказ = ЗначениеЗаполнено(Элемент.ТекущиеДанные.guid);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПриАктивизацииСтроки(Элемент)
	
	Отправитель = Неопределено;
	Получатель = Неопределено;
	ОтправительПредприятие = Неопределено;
	ПолучательПредприятие = Неопределено;
	Количество = Неопределено;
	КоличествоМест = Неопределено;
	
	Если Элементы.СкладскойЖурнал.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.СкладскойЖурнал.ТекущиеДанные.ВСД) Тогда
		Возврат;
	КонецЕсли;
	
	_всд = Элементы.СкладскойЖурнал.ТекущиеДанные.ВСД;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, _всд, "Отправитель, ОтправительПредприятие, Получатель, ПолучательПредприятие");
	
	Количество = _всд.СкладскойЖурнал[0].Количество;
	
	КоличествоМест = _всд.СкладскойЖурнал[0].КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналВСДПриИзменении(Элемент = Неопределено)
	
	_СтрокаСЖ = Элементы.СкладскойЖурнал.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(_СтрокаСЖ.ВСД) Тогда
		Возврат;
	КонецЕсли;
	
	_всдСтрокаСЖ = _СтрокаСЖ.ВСД.СкладскойЖурнал[0];
	_СтрокаСЖ.НоменклатурнаяГруппа = _всдСтрокаСЖ.НоменклатурнаяГруппа;
	_СтрокаСЖ.Количество           = _всдСтрокаСЖ.Количество;
	_СтрокаСЖ.КоличествоМест       = _всдСтрокаСЖ.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналВСДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	_Статус = Новый СписокЗначений;
	_Статус.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка"));
	_Статус.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен"));
	
	_Тип = Новый СписокЗначений;
	_Тип.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.ПустаяСсылка"));
	_Тип.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий"));
	
	_Параметры = Новый Структура("Проведен, Статус, Тип", Истина, _Статус, _Тип);
	
	_оо = Новый ОписаниеОповещения("СкладскойЖурналВСДНачалоВыбораОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Документ.ВетисВетеринарноСопроводительныйДокумент.ФормаВыбора", _Параметры,,,,, _оо);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналВСДНачалоВыбораОбработкаОповещения(Результат, Параметр) Экспорт
	
	Элементы.СкладскойЖурнал.ТекущиеДанные.ВСД = Результат;
	
	СкладскойЖурналВСДПриИзменении();
	
КонецПроцедуры


&НаКлиенте
Процедура СоставитьАктНесоответствияПриИзменении(Элемент)
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого _СтрокаСЖ Из Объект.СкладскойЖурнал Цикл
		
		Если ЗначениеЗаполнено(_СтрокаСЖ.guid) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтправитьСервер(_СтрокаСЖ.НомерСтроки-1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСервер(пНомерСтроки)
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_СтрокаСЖ = Объект.СкладскойЖурнал.Получить(пНомерСтроки);
	
	Если НЕ _СтрокаСЖ.ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_СтрокаСЖ.ВСД.Статус) И НЕ _СтрокаСЖ.ВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = кпс.РазрешенаОтладка();
	
	_всд = _СтрокаСЖ.ВСД.ПолучитьОбъект();
	
	_delivery = ВетисMercuryVetdocument.Delivery(
		ВетисCerberusEnterprise.BusinessMember(
			ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_всд.Отправитель),
			ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_всд.ОтправительПредприятие)),
		ВетисCerberusEnterprise.BusinessMember(
			ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_всд.Получатель),
			ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_всд.ПолучательПредприятие)),
		ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест, ВетисMercuryVetdocument.Consignment()),
		ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
	
	_всдСтрокаСЖ = _СтрокаСЖ.ВСД.СкладскойЖурнал[0];
	
	_КоличествоФакт     = _СтрокаСЖ.Количество + _СтрокаСЖ.КоличествоВозврат;
	_КоличествоМестФакт = _СтрокаСЖ.КоличествоМест + _СтрокаСЖ.КоличествоМестВозврат;
	
	_СтрокаСЖ.РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_КоличествоФакт = _всдСтрокаСЖ.Количество, "CORRESPONDS", "MISMATCH")];
	_СтрокаСЖ.РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", ?(_СтрокаСЖ.КоличествоВозврат = 0, "ACCEPT_ALL", "PARTIALLY"))];
	_СтрокаСЖ.РезультатВетКонтроля = _СтрокаСЖ.РезультатПриема;
	
	_deliveryFacts = ВетисMercuryVetdocument.DeliveryFactList(
	  ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатПриема)),
	  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатВетКонтроля), ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача())),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_СтрокаСЖ.РешениеОПриеме));
	
	_reason = "";
	_description = "";
	
	//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
	Если Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество) > 5 Тогда
		_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
		_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
		_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
		_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
	КонецЕсли;
	
	//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
	Если НЕ _КоличествоМестФакт = _всдСтрокаСЖ.КоличествоМест Тогда
		_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖ.КоличествоМест, _всдСтрокаСЖ.КоличествоМест - _КоличествоМестФакт);
		_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖ.КоличествоМест, "больше", "меньше");
		_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
		_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖ.КоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_reason) Тогда
		_discrepancyReport = ВетисMercuryVetdocument.Создать("DiscrepancyReport");
		_discrepancyReport.issueDate = Объект.Дата;
		_discrepancyReport.reason = ВетисMercuryVetdocument.DiscrepancyReason("Количество " + _reason + ".");
		_discrepancyReport.description = "В ВСД заявлено " + _description + ".";
	КонецЕсли;
	
	_СтрокаСЖ.АктПричина = _reason;
	_СтрокаСЖ.АктОписание = _description;
	
	Если _СтрокаСЖ.Возврат = Истина Тогда
		_returnedDelivery = ВетисMercuryVetdocument.Delivery(
			ВетисCerberusEnterprise.BusinessMember(
				ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_всд.Получатель),
				ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_всд.ПолучательПредприятие)),
			ВетисCerberusEnterprise.BusinessMember(
				ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_всд.Отправитель),
				ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_всд.ОтправительПредприятие)),
			ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат, ВетисMercuryVetdocument.Consignment()),
			ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
	КонецЕсли;
	
	
	_Request = ВетисMercuryApplications.processIncomingConsignmentRequest(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery);
	
	_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "processIncomingConsignmentRequest", Ложь, _Отладка);
	
	Если _Response = Ложь Тогда Возврат; КонецЕсли;
	
	Модифицированность = Истина;
	
	_Response = ВетисMercuryApplications.processIncomingConsignmentResponse(_Response);
	
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		Если _vetDocument.type = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			
			_всд.Uuid   = _vetDocument.uuid;
			_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.type);
			_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
			
			_всд.ОбменДанными.Загрузка = Истина;
			
			Попытка
				_всд.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
				ВызватьИсключение;
			КонецПопытки;
			
		ИначеЕсли _vetDocument.type = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			
			Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
				_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
			Иначе
				_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				_возвратный.Дата = ТекущаяДата();
			КонецЕсли;
			
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
			
			_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
			
			Попытка
				_возвратный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
				ВызватьИсключение;
			КонецПопытки;
			
			_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _stockEntry Из _Response.stockEntry Цикл
		_СтрокаСЖ.guid = _stockEntry.guid;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьBatch(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пОбъект = Неопределено)
	
	Если пОбъект = Неопределено Тогда
		_batch = ВетисMercuryVetdocument.Batch();
	Иначе
		_batch = пОбъект;
	КонецЕсли;
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_batch, пСтрокаСЖ);
	
	_batch.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
	_batch.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
	
	Возврат _batch;
	
КонецФункции

Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь)
	
	_VetDocument = ВетисMercuryVetdocument.Создать("VetDocument");
	
	Если пВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		_VetDocument.uuid = пВСД.uuid;
	Иначе
		Если пВозврат = Ложь Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
		Иначе
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = Объект.Дата;
			_VetDocument.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(Справочники.ВетисPurpose.НайтиПоНаименованию("возврат груза")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
			_VetDocument.confirmedDate      = Объект.Дата;
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь)
	
	_СтрокаТТН = пВСД.ТТН[0];
	
	_waybill = ВетисArgusShipment.Создать("Waybill");
	_waybill.issueSeries   = _СтрокаТТН.Серия;
	_waybill.issueNumber   = _СтрокаТТН.Номер;
	_waybill.issueDate     = _СтрокаТТН.Дата;
	_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
	_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_СтрокаТТН.Посредник));
	_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	
	Если пВозврат = Истина Тогда
		_waybill.issueSeries   = "";
		_waybill.issueNumber   = "";
		_waybill.issueDate     = Объект.Дата;
	КонецЕсли;
	
	Возврат _waybill;
	
КонецФункции


&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(пЗначение, пПараметр) Экспорт
	
	Если НЕ пЗначение = Неопределено Тогда
		Модифицированность = Истина;
		Выполнить пПараметр + " = пЗначение;";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписок(ИмяВладельца)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец ССЫЛКА Справочник.Склады
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.СобственныеКонтрагенты
	|			ГДЕ
	|				РегистрСведений.СобственныеКонтрагенты.Контрагент = &Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", Вычислить(ИмяВладельца));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		_Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

&НаСервере
Функция Элемент_ПутьКДанным(пЭлементИмя)
	
	Возврат Элементы[пЭлементИмя].ПутьКДанным;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.ЭтоГруппа,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Таблица.ИНН,
	|	_Таблица.КПП,
	|	_Таблица.ОсновнойМенеджерПокупателя КАК Менеджер,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.Контрагенты КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа";
	
КонецФункции

Функция Процент(Знач1, Знач2)
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции


