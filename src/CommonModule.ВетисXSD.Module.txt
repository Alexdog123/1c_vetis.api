
Процедура Инициализировать() Экспорт
	
	//вызывать:
	// после изменения тестовый - рабочий
	// после изменения версии
	// после изменения сервиса
	
	_версия = Версия();
	
	_тестовый = Тестовый();
	
	Если _версия = Перечисления.ВетисВерсияAPI.v2_0 Тогда
		Если _тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0_pilot.wsdl";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0_production.wsdl";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		Если Сервис() = Перечисления.ВетисСервис.mercury_g2b_service Тогда
			WSDLДобавить(_таблица, "ams-mercury.service", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-g2b.service"+_суф);
		ИначеЕсли Сервис() = Перечисления.ВетисСервис.mercury_vu_service Тогда
			WSDLДобавить(_таблица, "ams-mercury.service", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-vu.service"+_суф);
		КонецЕсли;
		
		WSDLДобавить(_таблица, "ApplicationManagementService", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ApplicationManagementService_v1.1.wsdl");
		
		WSDLДобавить(_таблица, "DictionaryService", "http://api.vetrf.ru/schema/cdm/registry/dictionary/service/v2", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"DictionaryService"+_суф);
		WSDLДобавить(_таблица, "EnterpriseService", "http://api.vetrf.ru/schema/cdm/registry/enterprise/service/v2", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"EnterpriseService"+_суф);
		WSDLДобавить(_таблица, "IkarService",       "http://api.vetrf.ru/schema/cdm/registry/ikar/service/v2",       "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"IkarService"+_суф);
		WSDLДобавить(_таблица, "ProductService",    "http://api.vetrf.ru/schema/cdm/registry/product/service/v2",    "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"ProductService"+_суф);
		WSDLДобавить(_таблица, "RegionalizationService", "http://api.vetrf.ru/schema/cdm/registry/r13n/service/v2",  "RegionalizationServiceBindingQSService", "RegionalizationServicePortType", _Имя+"RegionalizationService"+_суф);
		
		ВетисПеременные.Установить("wsdl", _таблица);
		
		Если _тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0.xsd";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0.xsd";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		XSDДобавить(_таблица, _Имя+"application_v1.1.xsd",          ВетисApplication_2_0.URI());
		XSDДобавить(_таблица, _Имя+"base_v1.1.xsd",                 ВетисBase_2_0.URI());
		XSDДобавить(_таблица, _Имя+"dictionary"+_суф,               ВетисDictionary_2_0.URI());
		XSDДобавить(_таблица, _Имя+"document"+_суф,                 ВетисMercuryVetdocument_2_0.URI());
		
		Если Сервис() = Перечисления.ВетисСервис.mercury_g2b_service Тогда
			XSDДобавить(_таблица, _Имя+"mercury_g2b_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		ИначеЕсли Сервис() = Перечисления.ВетисСервис.mercury_vu_service Тогда
			XSDДобавить(_таблица, _Имя+"mercury_vu_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		КонецЕсли;
		
		XSDДобавить(_таблица, ВетисSoapEnvelope.xsd_url(), ВетисSoapEnvelope.URI());
		
		ВетисПеременные.Установить("xsd", _таблица);
		
	Иначе
		_имя = "http://api.vetrf.ru/schema/platform/";
		
		Если _тестовый Тогда
			_суф = "_v1.4_pilot.wsdl";
		Иначе
			_суф = "_v1.4_production.wsdl";
		КонецЕсли;
		
		_таблица = Неопределено;
		
		WSDLДобавить(_таблица, "ApplicationManagementService", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф);
		
		WSDLДобавить(_таблица, "DictionaryService", "http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"services/DictionaryService"+_суф);
		WSDLДобавить(_таблица, "EnterpriseService", "http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"cerberus/services/EnterpriseService"+_суф);
		WSDLДобавить(_таблица, "IkarService",       "http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"ikar/services/IkarService"+_суф);
		WSDLДобавить(_таблица, "ProductService",    "http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"services/ProductService"+_суф);
		
		ВетисПеременные.Установить("wsdl", _таблица);
		
		_имя = "http://api.vetrf.ru/schema/platform/mercury/g2b/";
		_суф = "_v1.4.xsd";
		
		_таблица = Неопределено;
		
		XSDДобавить(_таблица, _Имя+"application"+_суф,         ВетисApplication.URI());
		XSDДобавить(_таблица, _Имя+"argus_common"+_суф,        ВетисArgusCommon.URI());
		XSDДобавить(_таблица, _Имя+"production"+_суф,          ВетисArgusProduction.URI());
		XSDДобавить(_таблица, _Имя+"argus_shipment"+_суф,      ВетисArgusShipment.URI());
		XSDДобавить(_таблица, _Имя+"base"+_суф,                ВетисBase.URI());
		XSDДобавить(_таблица, _Имя+"enterprise"+_суф,          ВетисCerberusEnterprise.URI());
		XSDДобавить(_таблица, _Имя+"ikar"+_суф,                ВетисIkar.URI());
		XSDДобавить(_таблица, _Имя+"applications"+_суф,        ВетисMercuryApplications.URI());
		XSDДобавить(_таблица, _Имя+"veterinary_document"+_суф, ВетисMercuryVetdocument.URI());
		
		XSDДобавить(_таблица, ВетисSoapEnvelope.xsd_url(), ВетисSoapEnvelope.URI());
		
		ВетисПеременные.Установить("xsd", _таблица);
		
	КонецЕсли;
	
	СброситьКеш();
	
	ФабрикаОбщая();
	
КонецПроцедуры

Процедура СброситьКеш()
	
	ВетисПеременные.Установить("КешФабрики", Новый Соответствие);
	ВетисПеременные.Установить("КешОпределения", Новый Соответствие);
	
КонецПроцедуры


Функция Тестовый() Экспорт
	
	_Значение = ВетисПеременные.Получить("ВетисТестовый", Неопределено);
	
	Если _Значение = Неопределено Тогда
		
		_Значение = Константы.ВетисТестовый.Получить();
		
		ВетисПеременные.Установить("ВетисТестовый", _Значение);
		
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Функция ТестовыйУстановить(пЗначение) Экспорт
	
	Константы.ВетисТестовый.Установить(пЗначение);
	
	ВетисПеременные.Установить("ВетисТестовый", пЗначение);
	
КонецФункции


Функция Сервис() Экспорт
	
	_Значение = ВетисПеременные.Получить("ВетисСервис", Неопределено);
	
	Если _Значение = Неопределено Тогда
		
		_Значение = Константы.ВетисСервис.Получить();
		
		ВетисПеременные.Установить("ВетисСервис", ?(ЗначениеЗаполнено(_Значение), _Значение, Перечисления.ВетисСервис.mercury_g2b_service));
		
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Функция СервисУстановить(пЗначение) Экспорт
	
	Константы.ВетисСервис.Установить(пЗначение);
	
	ВетисПеременные.Установить("ВетисСервис", пЗначение);
	
КонецФункции


Функция Версия() Экспорт
	
	_Версия = ВетисПеременные.Получить("ВетисВерсия", Неопределено);
	
	Если _Версия = Неопределено Тогда
		
		_Версия = Константы.ВетисВерсия.Получить();
		
		Если Не ЗначениеЗаполнено(_Версия) Тогда
			_Версия = Перечисления.ВетисВерсияAPI.v1_4;
		КонецЕсли;
		
		ВетисПеременные.Установить("ВетисВерсия", _Версия);
		
	КонецЕсли;
	
	Возврат _Версия;
	
КонецФункции

Функция ВерсияПредставление(пПрефикс = Неопределено, пСуффикс = Неопределено) Экспорт
	
	_версия = Версия();
	
	_версия = ?(_версия = Перечисления.ВетисВерсияAPI.v1_4, "", ?(пПрефикс = Неопределено, "", пПрефикс) + _версия + ?(пСуффикс = Неопределено, "", пСуффикс));
	
	Возврат _версия;
	
КонецФункции

Функция ВерсияРавно(пЗначение) Экспорт
	
	_версия = Версия();
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		Возврат Строка(_версия) = пЗначение;
	Иначе
		Возврат _версия = пЗначение;
	КонецЕсли;
	
КонецФункции

Функция Версия_2_0() Экспорт
	
	Возврат Версия() = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v2_0");
	
КонецФункции

Функция ВерсияУстановить(пВерсия) Экспорт
	
	Если ЗначениеЗаполнено(пВерсия) Тогда
		_Версия = пВерсия;
	Иначе
		_Версия = Перечисления.ВетисВерсияAPI.v1_4;
	КонецЕсли;
	
	Константы.ВетисВерсия.Установить(_Версия);
	
	ВетисПеременные.Установить("ВетисВерсия", _Версия);
	
КонецФункции


Функция ФабрикаОбщая() Экспорт
	
	_Кеш = ВетисПеременные.Получить("КешФабрики", Новый Соответствие);
	
	_фабрика = _Кеш.Получить("Общая");
	
	Если НЕ _фабрика = Неопределено Тогда
		Возврат _фабрика;
	КонецЕсли;
	
	_url = XSDПолучитьURL();
	
	Если _url.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_фабрика = СоздатьФабрикуXDTO(_url);
	
	_Кеш.Вставить("Общая", _фабрика);
	
	ВетисПеременные.Установить("КешФабрики", _Кеш);
	
	Возврат _фабрика;
	
КонецФункции

Функция Прокси(пИмяСервиса) Экспорт
	
	_ТаймАутПрокси = 600;
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		_wsdl = WSDLПолучить(пИмяСервиса);
		
		_Определения = ОпределенияПоURL(_wsdl.URL);
		
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси);
		Иначе
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
		
		_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
		_Прокси.Пароль = ВетисПараметрыСоединения.Пароль();
		
		Возврат _Прокси;
		
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция Определения(пИмяСервиса, пЗащищенноеСоедиенение = Неопределено) Экспорт
	
	Возврат ОпределенияПоURL(WSDLПолучить(пИмяСервиса).URL, пЗащищенноеСоедиенение);
	
КонецФункции

Функция ОпределенияПоURL(пURL, пЗащищенноеСоедиенение = Неопределено)
	
	_Кеш = ВетисПеременные.Получить("КешОпределения", Новый Соответствие);
	
	_Определения = _Кеш.Получить(пURL);
	
	Если НЕ _Определения = Неопределено Тогда
		Возврат _Определения;
	КонецЕсли;
	
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	_ТаймАутПрокси = 60;
	
	Попытка
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси);
		Иначе
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	_Кеш.Вставить(пURL, _Определения);
	
	ВетисПеременные.Установить("КешОпределения", _Кеш);
	
	Возврат _Определения;
	
КонецФункции


Процедура WSDLДобавить(пТаблица, пИмя, пURI, пСервис, пПорт, пURL)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("Имя");
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("Сервис");
		пТаблица.Колонки.Добавить("Порт");
		пТаблица.Колонки.Добавить("URL");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.Имя    = пИмя;
	_строка.URI    = пURI;
	_строка.Сервис = пСервис;
	_строка.Порт   = пПорт;
	_строка.URL    = пURL;
	
КонецПроцедуры

Функция WSDLПолучить(пИмяСервиса)
	
	_таблица = ВетисПеременные.Получить("wsdl");
	
	Возврат _таблица.Найти(пИмяСервиса, "Имя");
	
КонецФункции

Функция WSDLПолучитьURL() Экспорт
	
	_таблица = ВетисПеременные.Получить("wsdl");
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции

Функция WSDLМестоположение(пИмяСервиса) Экспорт
	
	_wsdl = WSDLПолучить(пИмяСервиса);
	
	_определения = Определения(пИмяСервиса);
	
	_сервис = ПолучитьЭлементКоллекции(_Определения.Сервисы, _wsdl.Сервис);
	
	_точка = ПолучитьЭлементКоллекции(_сервис.ТочкиПодключения, _wsdl.Порт);
	
	Возврат _точка.Местоположение;
	
КонецФункции


Процедура XSDДобавить(пТаблица, пURL, пURI)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("URL");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.URI    = пURI;
	_строка.URL    = пURL;
	
КонецПроцедуры

Функция XSDПолучить()
	
	_таблица = ВетисПеременные.Получить("xsd");
	
	Возврат _таблица;
	
КонецФункции

Функция XSDПолучитьURL() Экспорт
	
	_таблица = ВетисПеременные.Получить("xsd");
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции


Функция ВыполнитьЗапрос(пИмяСервиса, пИмяФункции, пФабрика, пRequest, issuerId = Неопределено, ПоУмолчанию = Неопределено, пОтладка = Неопределено, пОжидание = 5) Экспорт
	
	Если пОтладка = Неопределено Тогда
		_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	Иначе
		_Отладка = пОтладка;
	КонецЕсли;
	
	_адрес = WSDLМестоположение(пИмяСервиса);
	
	_составные = РазложитьАдрес(_адрес);
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, , , _составные.ЗащищенноеСоединение);
	
	ВетисПараметрыСоединения.ИнициализироватьНастройкиХС(issuerId);
	
	_Фабрика = пФабрика;
	
	//запрос на создание заявки
	
	_Application = ВетисApplication.Application(пRequest, пИмяФункции);
	
		_SubmitRequest = ВетисApplication.submitApplicationRequest(_Application);
		
			_Envelope = ВетисSoapEnvelope.Envelope(_SubmitRequest, "submitApplicationRequest");
			
				_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
				
				Если _Отладка = Истина Тогда
					ВетисЖурнал.Добавить(_ТекстЗапроса);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
				
				_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					Если НЕ _Отладка = Истина Тогда
						ВетисЖурнал.Добавить(_ТекстЗапроса);
					КонецЕсли;
					ВетисЖурнал.Добавить("Ошибка при отправке запроса");
					ВетисЖурнал.Добавить(_Ответ.ПолучитьТелоКакСтроку("UTF-8"));
					Возврат ПоУмолчанию;
				КонецЕсли;
				
			_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
		
		_SubmitResponse = ВетисSoapEnvelope.Извлечь(_Envelope).submitApplicationResponse;
	
	Если НЕ (_SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда
		ВетисЖурнал.Добавить("Запрос вернулся со статусом " + _SubmitResponse.Application.status);
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(_SubmitResponse.Application.applicationId);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Фабрика, _Envelope);
	
	Если _Отладка = Истина Тогда
		ВетисЖурнал.Добавить(_ТекстЗапроса);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	Пока Истина Цикл
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			Если НЕ _Отладка = Истина Тогда
				ВетисЖурнал.Добавить(_ТекстЗапроса);
			КонецЕсли;
			ВетисЖурнал.Добавить("Ошибка при отправке запроса");
			ВетисЖурнал.Добавить(_Ответ.ПолучитьТелоКакСтроку("UTF-8"));
			Возврат ПоУмолчанию;
		КонецЕсли;
		
		_Envelope = ВетисОбщегоНазначения.Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип());
		
		_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
		
		Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			//ВетисЖурнал.Добавить("Ждем ответа");
		Иначе
			Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				ВетисЖурнал.Добавить(ВетисОбщегоНазначения.Сериализовать(_Фабрика, _receiveResponse.Application.errors));
				Возврат ПоУмолчанию;
			Иначе
				Если _Отладка = Истина Тогда
					ВетисЖурнал.Добавить(ВетисОбщегоНазначения.Сериализовать(_Фабрика, _receiveResponse.Application));
				КонецЕсли;
				
				Возврат ВетисApplication.ApplicationResult(_receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСоединение(пСервер, пПорт = Неопределено, пЛогин = Неопределено, пПароль = Неопределено, пЗащищенноеСоединение = Неопределено, пПрокси = Неопределено)
	
	Если пЛогин = Неопределено Тогда
		_Логин = ВетисПараметрыСоединения.Логин();
	Иначе
		_Логин = пЛогин;
	КонецЕсли;
	
	Если пПароль = Неопределено Тогда
		_Пароль = ВетисПараметрыСоединения.Пароль();
	Иначе
		_Пароль = пПароль;
	КонецЕсли;
	
	_ТаймАут = 60;
	
	Если пЗащищенноеСоединение = Неопределено Тогда
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Истина);
	Иначе
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , _ТаймАут, пЗащищенноеСоединение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапрос(пАдресРесурса, пТекстЗапроса)
	
	_Запрос = Новый HTTPЗапрос(пАдресРесурса);
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

//http://vetrf.ru/vetrf-forum/posts/list/870/6633.page#43821
//С одной стороны, есть ограничение сверху: 5 запросов в секунду от одного клиента (логина).
//Причем, это ограничение общее для всех запросов к шлюзу, не только receiveApplicationResultRequest.
//С другой стороны, нет смысла 5 раз в секунду опрашивать сервер в надежде получить результат операции,
//которая выполняется 2 минуты, к примеру. 
//Поэтому рекомендации здесь такие:
// для каждого типа заявки (операции) определить время ожидания перед первым receiveApplicationResultRequest
// равное минимальному времени обработки заявки. И далее повторять опрос с интервалом 2 секунды.

//сделать: фиксировать время выполнения заявок

Функция ПолучитьЭлементКоллекции(пКоллекция, пИмя)
	
	Для каждого _Элемент Из пКоллекция Цикл
		Если _Элемент.Имя = пИмя Тогда
			Возврат _Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция РазложитьАдрес(пСтрока)
	
	_результат = Новый Структура;
	
	_строка = пСтрока;
	
	_позиция = Найти(_строка, "://");
	
	_результат.Вставить("ЗащищенноеСоединение", ?(ВРег(Лев(_строка, _позиция - 1)) = "HTTPS", Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	
	_строка = Сред(_строка, _позиция + 3);
	
	_позиция = Найти(_строка, "/");
	
	_результат.Вставить("Ресурс", Сред(_строка, _позиция + 1));
	
	_строка = Лев(_строка, _позиция - 1);
	
	_позиция = Найти(_строка, ":");
	
	Если _позиция = 0 Тогда
		_результат.Вставить("Сервер", _строка);
		_результат.Вставить("Порт", Неопределено);
	Иначе
		_результат.Вставить("Сервер", Лев(_строка, _позиция - 1));
		_результат.Вставить("Порт", Число(Сред(_строка, _позиция + 1)));
	КонецЕсли;
	
	Возврат _результат;
	
КонецФункции
