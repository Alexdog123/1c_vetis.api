
Процедура Инициализировать() Экспорт
	
	_таблица = Неопределено;
	
	_имя = "http://api.vetrf.ru/schema/platform/";
	_суф = "_v1.4_pilot.wsdl";
	
	WSDLДобавить(_таблица, "ApplicationManagementService", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф, Истина);
	
	WSDLДобавить(_таблица, "DictionaryService", "http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"services/DictionaryService"+_суф, Истина);
	WSDLДобавить(_таблица, "EnterpriseService", "http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"cerberus/services/EnterpriseService"+_суф, Истина);
	WSDLДобавить(_таблица, "IkarService",       "http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"ikar/services/IkarService"+_суф, Истина);
	WSDLДобавить(_таблица, "ProductService",    "http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"services/ProductService"+_суф, Истина);
	
	_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
	_суф = "_v2.0_pilot.wsdl";
	_версия = Перечисления.ВетисВерсияAPI.v2_0;
	
	WSDLДобавить(_таблица, "ApplicationManagementService", "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ApplicationManagementService_v1.1.wsdl", Истина, _версия);
	
	WSDLДобавить(_таблица, "DictionaryService", "http://api.vetrf.ru/schema/cdm/registry/dictionary/service/v2", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"DictionaryService"+_суф, Истина, _версия);
	WSDLДобавить(_таблица, "EnterpriseService", "http://api.vetrf.ru/schema/cdm/registry/enterprise/service/v2", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"EnterpriseService"+_суф, Истина, _версия);
	WSDLДобавить(_таблица, "IkarService",       "http://api.vetrf.ru/schema/cdm/registry/ikar/service/v2",       "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"IkarService"+_суф, Истина, _версия);
	WSDLДобавить(_таблица, "ProductService",    "http://api.vetrf.ru/schema/cdm/registry/product/service/v2",    "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"ProductService"+_суф, Истина, _версия);
	
	ВетисПеременные.Установить("wsdl", _таблица);
	
	_таблица = Неопределено;
	
	_имя = "http://api.vetrf.ru/schema/platform/mercury/g2b/";
	_суф = "_v1.4.xsd";
	
	XSDДобавить(_таблица, _Имя+"application"+_суф,         "http://api.vetrf.ru/schema/cdm/application");
	XSDДобавить(_таблица, _Имя+"argus_common"+_суф,        "http://api.vetrf.ru/schema/cdm/argus/common");
	XSDДобавить(_таблица, _Имя+"production"+_суф,          "http://api.vetrf.ru/schema/cdm/argus/production");
	XSDДобавить(_таблица, _Имя+"argus_shipment"+_суф,      "http://api.vetrf.ru/schema/cdm/argus/shipment");
	XSDДобавить(_таблица, _Имя+"base"+_суф,                "http://api.vetrf.ru/schema/cdm/base");
	XSDДобавить(_таблица, _Имя+"enterprise"+_суф,          "http://api.vetrf.ru/schema/cdm/cerberus/enterprise");
	XSDДобавить(_таблица, _Имя+"ikar"+_суф,                "http://api.vetrf.ru/schema/cdm/ikar");
	XSDДобавить(_таблица, _Имя+"applications"+_суф,        "http://api.vetrf.ru/schema/cdm/mercury/applications");
	XSDДобавить(_таблица, _Имя+"veterinary_document"+_суф, "http://api.vetrf.ru/schema/cdm/mercury/vet-document");
	
	ВетисПеременные.Установить("xsd", _таблица);
	
КонецПроцедуры

Процедура СброситьКеш() Экспорт
	
	ВетисПеременные.Установить("КешФабрики", Новый Соответствие);
	ВетисПеременные.Установить("КешОпределения", Новый Соответствие);
	
КонецПроцедуры


Функция ФабрикаОбщая(пВерсия = Неопределено) Экспорт
	
	_Кеш = ВетисПеременные.Получить("КешФабрики", Новый Соответствие);
	
	Если НЕ _Кеш.Получить("Общая") = Неопределено Тогда
		Возврат _Кеш.Получить("Общая");
	КонецЕсли;
	
	_url = XSDПолучитьURL(пВерсия);
	
	Если _url.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_фабрика = СоздатьФабрикуXDTO(_url);
	
	_Кеш.Вставить("Общая", _фабрика);
	
	Возврат _фабрика;
	
КонецФункции

Функция Прокси(пИмя, пВерсия = Неопределено) Экспорт
	
	_ТаймАутПрокси = 600;
	_ЗащищенноеСоедиенение = Неопределено;
	
	Попытка
		
		_wsdl = WSDLПолучить(пИмя, пВерсия);
		
		_Определение = ОпределенияПоURL(_wsdl.URL);
		
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Прокси = Новый WSПрокси(_Определение, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси);
		Иначе
			_Прокси = Новый WSПрокси(_Определение, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
		
		_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
		_Прокси.Пароль = ВетисПараметрыСоединения.Пароль();
		
		Возврат _Прокси;
		
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция Определения(пИмя, пВерсия = Неопределено, пЗащищенноеСоедиенение = Неопределено) Экспорт
	
	Возврат ОпределенияПоURL(WSDLПолучить(пИмя, пВерсия).URL, пЗащищенноеСоедиенение);
	
КонецФункции

Функция ОпределенияПоURL(пURL, пЗащищенноеСоедиенение = Неопределено)
	
	_Кеш = ВетисПеременные.Получить("КешОпределения", Новый Соответствие);
	
	Если НЕ _Кеш.Получить(пURL) = Неопределено Тогда
		Возврат _Кеш[пURL];
	КонецЕсли;
	
	_ТаймАутПрокси = 60;
	
	Попытка
		Если пЗащищенноеСоедиенение = Неопределено Тогда
			_Определения = Новый WSОпределения(пURL, ВетисПараметрыСоединения.Логин(), ВетисПараметрыСоединения.Пароль(), , _ТаймАутПрокси);
		Иначе
			_Определения = Новый WSОпределения(пURL, ВетисПараметрыСоединения.Логин(), ВетисПараметрыСоединения.Пароль(), , _ТаймАутПрокси, пЗащищенноеСоедиенение);
		КонецЕсли;
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	_Кеш.Вставить(пURL, _Определения);
	
	ВетисПеременные.Установить("КешОпределения", _Кеш);
	
	Возврат _Определения;
	
КонецФункции


Процедура WSDLДобавить(пТаблица, пИмя, пURI, пСервис, пПорт, пURL, пТестовый = Ложь, пВерсия = Неопределено)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("Имя");
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("Сервис");
		пТаблица.Колонки.Добавить("Порт");
		пТаблица.Колонки.Добавить("URL");
		пТаблица.Колонки.Добавить("Версия");
		пТаблица.Колонки.Добавить("Тестовый");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.Имя    = пИмя;
	_строка.URI    = пURI;
	_строка.Сервис = пСервис;
	_строка.Порт   = пПорт;
	_строка.URL    = пURL;
	_строка.Версия = ?(пВерсия = Неопределено, Перечисления.ВетисВерсияAPI.v1_4, пВерсия);
	_строка.Тестовый = пТестовый;
	
КонецПроцедуры

Функция WSDLПолучить(пИмя, пВерсия = Неопределено)
	
	_Версия = ?(пВерсия = Неопределено, Перечисления.ВетисВерсияAPI.v1_4, пВерсия);
	
	_таблица = ВетисПеременные.Получить("wsdl");
	
	_строки = _таблица.НайтиСтроки(Новый Структура("Имя,Версия,Тестовый", пИмя, _Версия, ВетисПараметрыСоединения.Тестовый()));
	
	Если _строки.Количество() = 1 Тогда
		Возврат _строки[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Процедура XSDДобавить(пТаблица, пURL, пURI, пВерсия = Неопределено)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("URL");
		пТаблица.Колонки.Добавить("Версия");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.URI    = пURI;
	_строка.URL    = пURL;
	_строка.Версия = ?(пВерсия = Неопределено, Перечисления.ВетисВерсияAPI.v1_4, пВерсия);
	
КонецПроцедуры

Функция XSDПолучить(пВерсия = Неопределено)
	
	_Версия = ?(пВерсия = Неопределено, Перечисления.ВетисВерсияAPI.v1_4, пВерсия);
	
	_таблица = ВетисПеременные.Получить("xsd");
	
	_строки = _таблица.НайтиСтроки(Новый Структура("Версия", _Версия));
	
	Возврат _строки;
	
КонецФункции

Функция XSDПолучитьURL(пВерсия = Неопределено)
	
	_Версия = ?(пВерсия = Неопределено, Перечисления.ВетисВерсияAPI.v1_4, пВерсия);
	
	_таблица = ВетисПеременные.Получить("xsd");
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		Если _строка.Версия = _Версия Тогда
			_список.Добавить(_строка.url);
		КонецЕсли;
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции
