
#Область ArgusCommon

Функция Unit(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.Unit("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.Unit("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.Unit("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция Purpose(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.Purpose("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.Purpose("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.Purpose("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция DocumentNature(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDocumentNature") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDocumentNature.ELECTRONIC") Тогда
			Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentNature.PAPER") Тогда
			Возврат ВетисКонстанты.DocumentNature_PAPER();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DocumentNature_ELECTRONIC() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentNature.ELECTRONIC");
		ИначеЕсли value = ВетисКонстанты.DocumentNature_PAPER() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentNature.PAPER");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область CerberusEnterprise

Функция BusinessEntity(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.BusinessEntity("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.BusinessEntity("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.BusinessEntity("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция Enterprise(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.Enterprise("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция Producer(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.Enterprise("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Если НЕ пСсылка.Свойства().Получить("guid") = Неопределено Тогда
			Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
		ИначеЕсли НЕ пСсылка.Свойства().Получить("enterprise") = Неопределено Тогда
			Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.enterprise.guid, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
		ИначеЕсли НЕ пСсылка.Свойства().Получить("producer") = Неопределено И ТипЗнч(пСсылка.producer) = Тип("СписокXDTO") И пСсылка.producer.Количество() > 0 Тогда
			Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.producer[0].enterprise.guid, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
		КонецЕсли;
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.Enterprise("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция BusinessEntityType(value, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисBusinessEntityType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ЮрЛицо") Тогда
			Возврат ВетисКонстанты.BusinessEntityType_JURIDICAL();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ФизЛицо") Тогда
			Возврат ВетисКонстанты.BusinessEntityType_PHYSICAL();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ИП") Тогда
			Возврат ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED();
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.BusinessEntityType_JURIDICAL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ЮрЛицо");
		ИначеЕсли value = ВетисКонстанты.BusinessEntityType_PHYSICAL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ФизЛицо");
		ИначеЕсли value = ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисBusinessEntityType.ИП");
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ArgusProduction

Функция ProductType(value, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип(ВетисИмяСправочника.ProductItem("СправочникСсылка")) Тогда
		Возврат ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисProductService_2_0, ВетисProductService).GetProductItemByGuid(value.guid).productType;
		
	ИначеЕсли ТипЗнч(value) = Тип(ВетисИмяСправочника.ProductType("ПеречислениеСсылка")) Тогда
		Если      value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","МясоИМясопродукты")) Тогда
			Возврат ВетисКонстанты.ProductType_МясоИМясопродукты();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","КормаИКормовыеДобавки")) Тогда
			Возврат ВетисКонстанты.ProductType_КормаИКормовыеДобавки();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ЖивыеЖивотные")) Тогда
			Возврат ВетисКонстанты.ProductType_ЖивыеЖивотные();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ЛекарственныеСредства")) Тогда
			Возврат ВетисКонстанты.ProductType_ЛекарственныеСредства();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ПищевыеПродукты")) Тогда
			Возврат ВетисКонстанты.ProductType_ПищевыеПродукты();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","НепищевыеПродуктыИДругое")) Тогда
			Возврат ВетисКонстанты.ProductType_НепищевыеПродуктыИДругое();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","РыбаИМорепродукты")) Тогда
			Возврат ВетисКонстанты.ProductType_РыбаИМорепродукты();
		ИначеЕсли value = ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ПродукцияНеТребующаяРазрешения")) Тогда
			Возврат ВетисКонстанты.ProductType_НепищевыеПродуктыИДругое();
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.ProductType_МясоИМясопродукты() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","МясоИМясопродукты"));
		ИначеЕсли value = ВетисКонстанты.ProductType_КормаИКормовыеДобавки() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","КормаИКормовыеДобавки"));
		ИначеЕсли value = ВетисКонстанты.ProductType_ЖивыеЖивотные() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ЖивыеЖивотные"));
		ИначеЕсли value = ВетисКонстанты.ProductType_ЛекарственныеСредства() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ЛекарственныеСредства"));
		ИначеЕсли value = ВетисКонстанты.ProductType_ПищевыеПродукты() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ПищевыеПродукты"));
		ИначеЕсли value = ВетисКонстанты.ProductType_НепищевыеПродуктыИДругое() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","НепищевыеПродуктыИДругое"));
		ИначеЕсли value = ВетисКонстанты.ProductType_РыбаИМорепродукты() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","РыбаИМорепродукты"));
		ИначеЕсли value = ВетисКонстанты.ProductType_ПродукцияНеТребующаяРазрешения() Тогда
			Возврат ПредопределенноеЗначение(ВетисИмяСправочника.ProductType("Перечисление","ПродукцияНеТребующаяРазрешения"));
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Product(value, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип(ВетисИмяСправочника.Product("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(value, ПоУмолчанию);
	ИначеЕсли ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(value.guid, ВетисИмяСправочника.SubProduct("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(value, ВетисИмяСправочника.SubProduct("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция SubProduct(value, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип(ВетисИмяСправочника.SubProduct("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(value, ПоУмолчанию);
	ИначеЕсли ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(value.guid, ВетисИмяСправочника.SubProduct("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(value, ВетисИмяСправочника.SubProduct("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция ProductItem(value, ХозяйствующийСубъект, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		Если ЗначениеЗаполнено(value.guid) Тогда
			Возврат ВетисСоответствие.ПолучитьProductItem(value.guid, ХозяйствующийСубъект, ПоУмолчанию);
		Иначе
			Возврат ВетисСоответствие.ПолучитьProductItem(value.name, ХозяйствующийСубъект, ПоУмолчанию);
		КонецЕсли;
	Иначе
		Возврат ВетисСоответствие.ПолучитьProductItem(value, ХозяйствующийСубъект, ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ArgusShipment

Функция TransportType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисTransportType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисTransportType.Автомобильный") Тогда
			Возврат ВетисКонстанты.TransportType_Автомобильный();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportType.Железнодорожный") Тогда
			Возврат ВетисКонстанты.TransportType_Железнодорожный();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportType.Авиатранспорт") Тогда
			Возврат ВетисКонстанты.TransportType_Авиатранспортный();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportType.МорскойКонтейнер") Тогда
			Возврат ВетисКонстанты.TransportType_МорскойКонтейнер();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportType.МорскойТрюм") Тогда
			Возврат ВетисКонстанты.TransportType_МорскойТрюм();
		Иначе
			Возврат ВетисКонстанты.TransportType_Автомобильный();
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.TransportType_Автомобильный() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.Автомобильный");
		ИначеЕсли value = ВетисКонстанты.TransportType_Железнодорожный() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.Железнодорожный");
		ИначеЕсли value = ВетисКонстанты.TransportType_Авиатранспортный() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.Авиатранспорт");
		ИначеЕсли value = ВетисКонстанты.TransportType_МорскойКонтейнер() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.МорскойКонтейнер");
		ИначеЕсли value = ВетисКонстанты.TransportType_МорскойТрюм() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.МорскойТрюм");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportType.Автомобильный");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция TransportationStorageType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисTransportStorageType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные") Тогда
			Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Охлажденные") Тогда
			Возврат ВетисКонстанты.TransportationStorageType_CHILLED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Охлаждаемые") Тогда
			Возврат ВетисКонстанты.TransportationStorageType_COOLED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Вентилируемые") Тогда
			Возврат ВетисКонстанты.TransportationStorageType_VENTILATED();
		Иначе
			Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.TransportationStorageType_FROZEN() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные");
		ИначеЕсли value = ВетисКонстанты.TransportationStorageType_CHILLED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Охлажденные");
		ИначеЕсли value = ВетисКонстанты.TransportationStorageType_COOLED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Охлаждаемые");
		ИначеЕсли value = ВетисКонстанты.TransportationStorageType_VENTILATED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Вентилируемые");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция DocumentType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDocumentType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная") Тогда
			Возврат ВетисКонстанты.DocumentType_ТоварноТранспортнаяНакладная();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.Коносамент") Тогда
			Возврат ВетисКонстанты.DocumentType_Коносамент();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.CMR") Тогда
			Возврат ВетисКонстанты.DocumentType_CMR();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.Авианакладная") Тогда
			Возврат ВетисКонстанты.DocumentType_Авианакладная();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТранспортнаяНакладная") Тогда
			Возврат ВетисКонстанты.DocumentType_ТранспортнаяНакладная();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТОРГ12") Тогда
			Возврат ВетисКонстанты.DocumentType_ТОРГ12();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС") Тогда
			Возврат ВетисКонстанты.DocumentType_ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции") Тогда
			Возврат ВетисКонстанты.DocumentType_РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDocumentType.АктОтбораПробыНаИсследование") Тогда
			Возврат ВетисКонстанты.DocumentType_АктОтбораПробыНаИсследование();
		Иначе
			Возврат ВетисКонстанты.DocumentType_ТоварноТранспортнаяНакладная();
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DocumentType_ТоварноТранспортнаяНакладная() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная");
		ИначеЕсли value = ВетисКонстанты.DocumentType_Коносамент() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.Коносамент");
		ИначеЕсли value = ВетисКонстанты.DocumentType_CMR() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.CMR");
		ИначеЕсли value = ВетисКонстанты.DocumentType_Авианакладная() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.Авианакладная");
		ИначеЕсли value = ВетисКонстанты.DocumentType_ТранспортнаяНакладная() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТранспортнаяНакладная");
		ИначеЕсли value = ВетисКонстанты.DocumentType_ТОРГ12() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТОРГ12");
		ИначеЕсли value = ВетисКонстанты.DocumentType_ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС");
		ИначеЕсли value = ВетисКонстанты.DocumentType_РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции");
		ИначеЕсли value = ВетисКонстанты.DocumentType_АктОтбораПробыНаИсследование() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.АктОтбораПробыНаИсследование");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ResearchResult(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисResearchResult") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN") Тогда
			Возврат ВетисКонстанты.ResearchResult_UNKNOWN();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.POSITIVE") Тогда
			Возврат ВетисКонстанты.ResearchResult_POSITIVE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.NEGATIVE") Тогда
			Возврат ВетисКонстанты.ResearchResult_NEGATIVE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNFULFILLED") Тогда
			Возврат ВетисКонстанты.ResearchResult_UNFULFILLED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.VSERAW") Тогда
			Возврат ВетисКонстанты.ResearchResult_VSERAW();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисResearchResult.VSEFULL") Тогда
			Возврат ВетисКонстанты.ResearchResult_VSEFULL();
		Иначе
			Возврат ВетисКонстанты.ResearchResult_UNKNOWN();
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.ResearchResult_UNKNOWN() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN");
		ИначеЕсли value = ВетисКонстанты.ResearchResult_POSITIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.POSITIVE");
		ИначеЕсли value = ВетисКонстанты.ResearchResult_NEGATIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.NEGATIVE");
		ИначеЕсли value = ВетисКонстанты.ResearchResult_UNFULFILLED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNFULFILLED");
		ИначеЕсли value = ВетисКонстанты.ResearchResult_VSERAW() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.VSERAW");
		ИначеЕсли value = ВетисКонстанты.ResearchResult_VSEFULL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.VSEFULL");
		Иначе
			Возврат ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Country(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.Country("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка.guid, ВетисИмяСправочника.Country("Справочник"), ПоУмолчанию);
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.Country("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции

Функция PackageList(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пСсылка) = Тип(ВетисИмяСправочника.PackingForm("СправочникСсылка")) Тогда
		Возврат ВетисСоответствие.ПолучитьGuid(пСсылка, ПоУмолчанию);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("СписокXDTO") Тогда
		Для каждого _package Из пСсылка Цикл
			Возврат PackageList(_package, ПоУмолчанию);
		КонецЦикла;
	ИначеЕсли ТипЗнч(пСсылка) = Тип("ОбъектXDTO") Тогда
		Если НЕ пСсылка.Свойства().Получить("guid") = Неопределено Тогда
			Возврат PackageList(пСсылка.guid, ПоУмолчанию);
		ИначеЕсли НЕ пСсылка.Свойства().Получить("packagingType") = Неопределено Тогда
			Возврат PackageList(пСсылка.packagingType, ПоУмолчанию);
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	Иначе
		Возврат ВетисСоответствие.ПолучитьСсылку(пСсылка, ВетисИмяСправочника.PackingForm("Справочник"), ПоУмолчанию);
	КонецЕсли;
	
КонецФункции
