
// тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntity");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityList(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntityList");
	
	Если НЕ guid = Неопределено Тогда
		BusinessEntityListДобавить(_Объект, guid);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.businessEntity.Добавить(BusinessEntity(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.businessEntity.Добавить(BusinessEntity(guid));
	КонецЕсли;
	
КонецФункции

//Операция изменения связи между хозяйствующим субъектом и предприятиями. 
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
// businessEntity - ent:BusinessEntityList
// enterprise - ent:Enterprise
Функция BusinessEntityActivityLocationsModificationOperation(type, businessEntity, enterprise) Экспорт
	
	_Объект = Создать("BEActivityLocationsModificationOperation");
	
	_Объект.type = type;
	
	_Объект.businessEntity = businessEntity;
	
	Если ТипЗнч(enterprise) = Тип("Массив") Тогда
		Для каждого _enterprise Из enterprise Цикл
			_Объект.enterprise.Добавить(_enterprise);
		КонецЦикла;
	Иначе
		_Объект.enterprise.Добавить(enterprise);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:BusinessEntityList - Входящий список ХС
//  resultingList - ent:BusinessEntityList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция BusinessEntityModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("BEModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid) Экспорт
	
	_Объект = Создать("BusinessMember");
	
	_Объект.businessEntity = BusinessEntity(businessEntityGuid);
	_Объект.enterprise     = Enterprise(enterpriseGuid);
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	_Объект = Создать("Enterprise");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:EnterpriseList - Входящий список площадок
//  resultingList - ent:EnterpriseList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("ENTModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


Функция IncorporationForm(shortName = "", name = "", code = "") Экспорт
	
	_Объект = Создать("IncorporationForm");
	
	_Объект.name = name;
	_Объект.code = code;
	_Объект.shortName = shortName;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий производителя продукции
Функция Producer(guid) Экспорт
	
	_Объект = Создать("Producer");
	
	_Объект.enterprise = Enterprise(guid);
	
	_Объект.role = ВетисКонстанты.EnterpriseRole_PRODUCER();
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	_Объект = Создать("ProducerList");
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			_Объект.producer.Добавить(Producer(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		_Объект.producer.Добавить(Producer(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/cerberus/enterprise";
	
КонецФункции
