
#Область ArgusCommon

// Тип, описывающий пользователя.
Функция User(login = Неопределено) Экспорт
	
	_Объект = Создать("User");
	
	_Объект.login = login;
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий единицу измерения.
Функция Unit(guid = Неопределено) Экспорт
	
	_Объект = Создать("Unit");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий назначение груза.
Функция Purpose(guid = Неопределено) Экспорт
	
	_Объект = Создать("Purpose");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Document(name = "", issueSeries = "", issueNumber = "", issueDate = "") Экспорт
	
	_Объект = Создать("Document");
	
	_Объект.name        = name;
	_Объект.issueSeries = issueSeries;
	_Объект.issueNumber = issueNumber;
	_Объект.issueDate   = issueDate;
	
	Возврат _Объект;
	
КонецФункции

// Природа ВСД (электронный или бумажный).
Функция DocumentNature(nature) Экспорт
	
	Если      nature = 1 Тогда
		Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
	ИначеЕсли nature = 2 Тогда
		Возврат ВетисКонстанты.DocumentNature_PAPER();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область CerberusEnterprise

// тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid, globalID = Неопределено) Экспорт
	
	_Объект = Создать("BusinessMember");
	
	_Объект.businessEntity = BusinessEntity(businessEntityGuid);
	_Объект.enterprise     = Enterprise(enterpriseGuid);
	
	_Объект.globalID = globalID;
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntity");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	_Объект = Создать("Enterprise");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий производителя продукции
Функция Producer(guid) Экспорт
	
	_Объект = Создать("Producer");
	
	_Объект.enterprise = Enterprise(guid);
	
	_Объект.role = ВетисКонстанты.EnterpriseRole_PRODUCER();
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	_Объект = Создать("ProducerList");
	
	ProducerListДобавить(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция ProducerListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.producer.Добавить(Producer(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.producer.Добавить(Producer(guid));
	КонецЕсли;
	
КонецФункции

//Тип, описывающий организацию, в т.ч. учреждения структуры Россельхознадзора, ветеринарных управлений субъектов РФ и т.д.
Функция Organization() Экспорт
	
	_Объект = Создать("Organization");
	
	Возврат _Объект;
	
КонецФункции

#КонецОбласти

#Область ArgusProduction

//Тип, описывающий вид упаковки.
Функция PackingType() Экспорт
	
	_Объект = Создать("PackingType");
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий продукцию.
Функция Product(guid = Неопределено) Экспорт
	
	_Объект = Создать("Product");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий вид продукции.
Функция SubProduct(guid = Неопределено) Экспорт
	
	_Объект = Создать("SubProduct");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о наименовании продукции в соответствии с номенклатурой производителя.
Функция ProductItem(guid = Неопределено) Экспорт
	
	_Объект = Создать("ProductItem");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

#КонецОбласти

#Область MercuryVetdocument

//Тип, описывающий список маркировок продукции.
//Под маркировкой понимается всё, что может быть физически нанесено на упаковку или непосредственно на продукцию.
//Для каждой маркировки может быть указан её тип (см. атрибут class), который также может определять формат маркировки.
Функция ProductMarks(value = Неопределено) Экспорт
	
	_Объект = Создать("ProductMarks");
	
	Если НЕ value = Неопределено Тогда
		_Объект.class.Добавить(value);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReport(issueSeries = "", issueNumber = "", issueDate, reason, description) Экспорт
	
	_Объект = Создать("DiscrepancyReport");
	
	_Объект.issueSeries = issueSeries;
	_Объект.issueNumber = issueNumber;
	_Объект.issueDate   = ВетисОбщегоНазначения.ВремяВетис(issueDate);
	_Объект.reason      = DiscrepancyReason(reason);
	_Объект.description = description;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReason(name) Экспорт
	
	_Объект = Создать("DiscrepancyReason");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции

#КонецОбласти

#Область Ikar

Функция Country(guid = Неопределено) Экспорт
	
	_Объект = Создать("Country");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция District(guid = Неопределено) Экспорт
	
	_Объект = Создать("District");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Locality(guid = Неопределено) Экспорт
	
	_Объект = Создать("Locality");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Region(guid = Неопределено) Экспорт
	
	_Объект = Создать("Region");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Street(guid = Неопределено) Экспорт
	
	_Объект = Создать("Street");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция FederalDistrict(guid = Неопределено) Экспорт
	
	_Объект = Создать("FederalDistrict");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Address(countryGuid, regionGuid, districtGuid, localityGuid, streetGuid, house, building) Экспорт
	
	_Объект = Создать("Address");
	
	_Объект.country      = Country(countryGuid);
	_Объект.region       = District(regionGuid);
	_Объект.localityGuid = Locality(localityGuid);
	_Объект.streetGuid   = Street(streetGuid);
	_Объект.house        = house;
	_Объект.building     = building;
	
	Возврат _Объект;
	
КонецФункции

Функция AddressView(addressView, пПараметры = Неопределено) Экспорт
	
	_Объект = Создать("Address");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, addressView, "addressView");
	
	Возврат _Объект;
	
КонецФункции

Функция CountryList(guid = Неопределено) Экспорт
	
	_Объект = Создать("CountryList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.country.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция DistrictList(guid = Неопределено) Экспорт
	
	_Объект = Создать("DistrictList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.district.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция LocalityList(guid = Неопределено) Экспорт
	
	_Объект = Создать("LocalityList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.locality.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция RegionList(guid = Неопределено) Экспорт
	
	_Объект = Создать("RegionList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.region.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция StreetList(guid = Неопределено) Экспорт
	
	_Объект = Создать("StreetList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.street.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

#КонецОбласти

#Область ArgusShipment

// Тип, описывающий товарно-транспортную накладную.
Функция Waybill() Экспорт
	
	_Объект = Создать("Waybill");
	
	Возврат _Объект;
	
КонецФункции

Функция TransportInfo(transportType, transportNumber) Экспорт
	
	_Объект = Создать("TransportInfo");
	
	_Объект.transportType   = transportType;  //Тип транспортного средства.
	_Объект.transportNumber = transportNumber;//Номера транспортного средства.
	
	Возврат _Объект;
	
КонецФункции

Функция TransportNumber() Экспорт
	
	_Объект = Создать("TransportNumber");
	
	Возврат _Объект;
	
КонецФункции

Функция TransportTypeОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.TransportType_Автомобильный() Тогда
		Возврат "Автомобильный";
	ИначеЕсли value = ВетисКонстанты.TransportType_Железнодорожный() Тогда
		Возврат "Железнодорожный";
	ИначеЕсли value = ВетисКонстанты.TransportType_Авиатранспортный() Тогда
		Возврат "Авиатранспортный";
	ИначеЕсли value = ВетисКонстанты.TransportType_МорскойКонтейнер() Тогда
		Возврат "Морской (контейнер)";
	ИначеЕсли value = ВетисКонстанты.TransportType_МорскойТрюм() Тогда
		Возврат "Морской (трюм)";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий cпособ хранения при перевозке.
Функция TransportationStorageType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_CHILLED();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_COOLED();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_VENTILATED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция TransportationStorageTypeОписание(value) Экспорт
	
	Если      value = ВетисКонстанты.TransportationStorageType_FROZEN()  ИЛИ value = 1 Тогда
		Возврат "Замороженные";
	ИначеЕсли value = ВетисКонстанты.TransportationStorageType_CHILLED() ИЛИ value = 2 Тогда
		Возврат "Охлажденные";
	ИначеЕсли value = ВетисКонстанты.TransportationStorageType_COOLED()  ИЛИ value = 3 Тогда
		Возврат "Охлаждаемые";
	ИначеЕсли value = ВетисКонстанты.TransportationStorageType_VENTILATED() ИЛИ value = 4 Тогда
		Возврат "Вентилируемые";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий тип товарно-транспортной накладной.
Функция DocumentTypeОписание(value, ПоУмолчанию = Неопределено) Экспорт
	
	Если      value = ВетисКонстанты.DocumentType_ТоварноТранспортнаяНакладная() Тогда
		Возврат "Товарно-транспортная накладная";
	ИначеЕсли value = ВетисКонстанты.DocumentType_Коносамент() Тогда
		Возврат "Коносамент";
	ИначеЕсли value = ВетисКонстанты.DocumentType_CMR() Тогда
		Возврат "CMR";
	ИначеЕсли value = ВетисКонстанты.DocumentType_Авианакладная() Тогда
		Возврат "Авианакладная";
	ИначеЕсли value = ВетисКонстанты.DocumentType_ТранспортнаяНакладная Тогда
		Возврат "Транспортная накладная";
	ИначеЕсли value = ВетисКонстанты.DocumentType_ТОРГ12 Тогда
		Возврат "ТОРГ-12";
	ИначеЕсли value = ВетисКонстанты.DocumentType_ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС Тогда
		Возврат "Ветеринарное разрешение на импорт продукции на территорию ТС";
	ИначеЕсли value = ВетисКонстанты.DocumentType_РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции Тогда
		Возврат "Разрешение ветеринарного управления субъекта страны ТС на ввоз продукции";
	ИначеЕсли value = ВетисКонстанты.DocumentType_АктОтбораПробыНаИсследование Тогда
		Возврат "Акт отбора пробы на исследование";
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/dictionary";
	
КонецФункции
