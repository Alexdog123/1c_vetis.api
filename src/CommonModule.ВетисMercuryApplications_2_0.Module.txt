
#Область StockEntry

// Получение записи складского журнала по идентификатору.
Функция GetStockEntryByGuidRequest(guid, enterpriseGuid) Экспорт
	
	_Объект = Создать("GetStockEntryByGuidRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.GUID               = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция GetStockEntryByGuidResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.GetStockEntryByGuidResponse, "GetStockEntryByGuidResponse", URI()).stockEntry;
	
КонецФункции

Функция GetStockEntryByGuid(guid, enterpriseGuid, issuerId = Неопределено, Отказ = Ложь) Экспорт
	
	_Request = GetStockEntryByGuidRequest(guid, enterpriseGuid);
	
	_Response = Прокси("getStockEntryByGuidRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда Отказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат GetStockEntryByGuidResponse(_Response);
	
КонецФункции


// Получение актуального списка записей складского журнала.
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  count - Максимальное запрашиваемое количество объектов в списке
Функция GetStockEntryListRequest(enterpriseGuid) Экспорт
	
	_Объект = Создать("GetStockEntryListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.listOptions        = ВетисBase.ListOptions();
	
	Возврат _Объект;
	
КонецФункции

Функция GetStockEntryListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.GetStockEntryListResponse, "GetStockEntryListResponse", URI()).stockEntryList;
	
КонецФункции

// Предназначена для получения списка записей складского журнала
// Используется самостоятельно в цикле Пока.
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  issuerId       - Идентификатор ХС
//  пItem          - элемент списка, возвращаемый параметр
//  пПараметры     - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево         - Ложь значит список пройден весь
Функция GetStockEntryListСледующий(enterpriseGuid, issuerId = Неопределено, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("Индекс", 0);
		пПараметры.Вставить("ListRequest", GetStockEntryListRequest(enterpriseGuid));
		пПараметры.Вставить("Отладка", Ветис.РазрешенаОтладка());
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.stockEntry[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Response = Прокси("getStockEntryListRequest", пПараметры.ListRequest, issuerId, Ложь, пПараметры.Отладка);
	
	Если _Response = Ложь Тогда Возврат Ложь;	КонецЕсли;
	
	_ListResponse = GetStockEntryListResponse(_Response);
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.stockEntry[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция GetStockEntryChangesListRequest(enterpriseGuid, beginDate, endDate = Неопределено) Экспорт
	
	_Объект = Создать("GetStockEntryChangesListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.updateDateInterval = ВетисBase_2_0.DateInterval(beginDate, endDate);
	_Объект.listOptions        = ВетисBase_2_0.ListOptions();
	
	Возврат _Объект;
	
КонецФункции

Функция GetStockEntryChangesListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getStockEntryChangesListResponse, "GetStockEntryChangesListResponse", URI()).stockEntryList;
	
КонецФункции

Функция GetStockEntryChangesListСледующий(enterpriseGuid, issuerId = Неопределено, beginDate, endDate = Неопределено, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("Индекс", 0);
		пПараметры.Вставить("ListRequest", GetStockEntryChangesListRequest(enterpriseGuid, beginDate, endDate));
		пПараметры.Вставить("Отладка", Ветис.РазрешенаОтладка());
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.stockEntry[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Response = Прокси("getStockEntryChangesListRequest", пПараметры.ListRequest, issuerId, Ложь, пПараметры.Отладка);
	
	Если _Response = Ложь Тогда Возврат Ложь;	КонецЕсли;
	
	_ListResponse = GetStockEntryChangesListResponse(_Response);
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.stockEntry[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область VetDocument

// Получение ВСД
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  vetDocumentUuid - Идентификатор ВСД
Функция GetVetDocumentByUuidRequest(vetDocumentUuid, enterpriseGuid) Экспорт
	
	_Объект = Создать("GetVetDocumentByUuidRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.uuid               = vetDocumentUuid;
	
	Возврат _Объект;
	
КонецФункции

Функция GetVetDocumentByUuidResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.GetVetDocumentByUuidResponse, "GetVetDocumentByUuidResponse", URI()).vetDocument;
	
КонецФункции

Функция GetVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId = Неопределено, Отказ = Ложь) Экспорт
	
	_Request = GetVetDocumentByUuidRequest(vetDocumentUuid, enterpriseGuid);
	
	_Response = Прокси("getVetDocumentByUuidRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда Отказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат GetVetDocumentByUuidResponse(_Response);
	
КонецФункции


// Получение всех ВСД предприятия
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  vetDocumentType - vetd:VetDocumentType - Тип ВСД
//  vetDocumentStatus - vetd:VetDocumentStatus - Статус ВСД
Функция GetVetDocumentListRequest(enterpriseGuid, vetDocumentType = Неопределено, vetDocumentStatus = Неопределено) Экспорт
	
	_Объект = Создать("GetVetDocumentListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.listOptions        = ВетисBase_2_0.ListOptions();
	
	Если НЕ vetDocumentType = Неопределено Тогда
		_Объект.vetDocumentType = vetDocumentType;
	КонецЕсли;
	
	Если НЕ vetDocumentStatus = Неопределено Тогда
		_Объект.vetDocumentStatus = vetDocumentStatus;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция GetVetDocumentListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.GetVetDocumentListResponse, "GetVetDocumentListResponse", URI()).vetDocumentList;
	
КонецФункции

// Предназначена для получения всех ВСД предприятия
// Используется самостоятельно в цикле Пока.
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  issuerId       - Идентификатор ХС
//  пItem          - элемент списка, возвращаемый параметр
//  пПараметры     - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево         - Ложь значит список пройден весь
Функция GetVetDocumentListСледующий(enterpriseGuid, issuerId = Неопределено, vetDocumentType = Неопределено, vetDocumentStatus = Неопределено, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("Индекс", 0);
		пПараметры.Вставить("ListRequest", getVetDocumentListRequest(enterpriseGuid, vetDocumentType, vetDocumentStatus));
		пПараметры.Вставить("Отладка", Ветис.РазрешенаОтладка());
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.vetDocument[пПараметры.Индекс];
			//по отбору приходят ВСД с другим типом, пока ставлю ограничение здесь
			Если НЕ vetDocumentType = Неопределено И НЕ пItem.vetDType = vetDocumentType
				ИЛИ НЕ vetDocumentStatus = Неопределено И НЕ пItem.vetDStatus = vetDocumentStatus Тогда
				Возврат GetVetDocumentListСледующий(enterpriseGuid, issuerId, vetDocumentType, vetDocumentStatus, пItem, пПараметры);
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Response = Прокси("getVetDocumentListRequest", пПараметры.ListRequest, issuerId, Ложь, пПараметры.Отладка);
	
	Если _Response = Ложь Тогда Возврат Ложь;	КонецЕсли;
	
	_ListResponse = GetVetDocumentListResponse(_Response);
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.vetDocument[пПараметры.Индекс];
		//по отбору приходят ВСД с другим типом, пока ставлю ограничение здесь
		Если НЕ vetDocumentType = Неопределено И НЕ пItem.vetDType = vetDocumentType
			ИЛИ НЕ vetDocumentStatus = Неопределено И НЕ пItem.vetDStatus = vetDocumentStatus Тогда
			Возврат GetVetDocumentListСледующий(enterpriseGuid, issuerId, vetDocumentType, vetDocumentStatus, пItem, пПараметры);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция GetVetDocumentChangesListRequest(enterpriseGuid, beginDate, endDate = Неопределено) Экспорт
	
	_Объект = Создать("GetVetDocumentChangesListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.updateDateInterval = ВетисBase_2_0.DateInterval(beginDate, endDate);
	_Объект.listOptions        = ВетисBase_2_0.ListOptions();
	
	Возврат _Объект;
	
КонецФункции

Функция GetVetDocumentChangesListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getVetDocumentChangesListResponse, "GetVetDocumentChangesListResponse", URI()).vetDocumentList;
	
КонецФункции

Функция GetVetDocumentChangesListСледующий(enterpriseGuid, issuerId = Неопределено, beginDate, endDate = Неопределено, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("Индекс", 0);
		пПараметры.Вставить("ListRequest", getVetDocumentChangesListRequest(enterpriseGuid, beginDate, endDate));
		пПараметры.Вставить("Отладка", Ветис.РазрешенаОтладка());
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.vetDocument[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Response = Прокси("getVetDocumentChangesListRequest", пПараметры.ListRequest, issuerId, Ложь, пПараметры.Отладка);
	
	Если _Response = Ложь Тогда Возврат Ложь;	КонецЕсли;
	
	_ListResponse = getVetDocumentChangesListResponse(_Response);
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.vetDocument[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область MergeOperation

Функция MergeStockEntriesRequest(enterprise, mergeOperation) Экспорт
	
	_Объект = Создать("MergeStockEntriesRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterprise         = enterprise;
	_Объект.mergeOperation     = mergeOperation;
	
	Возврат _Объект;
	
КонецФункции

Функция MergeStockEntriesResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.mergeStockEntriesResponse, "MergeStockEntriesResponse", URI());
	
КонецФункции

#КонецОбласти

#Область ProcessIncomingConsignment

// Операция предназначена для оформления входящей партии.
// Параметры:
//  delivery - vetd:Delivery - Фактические сведения о принимаемой партии продукции и сопровождающих ее документах
//  deliveryFacts - vetd:DeliveryFactList - Обобщенный результат приема партии продукции
//  discrepancyReport - vetd:DiscrepancyReport - Акт несоответствия
//  returnedDelivery - vetd:Delivery - Сведения о возвращаемой партии
Функция ProcessIncomingConsignmentRequest(delivery, deliveryFacts, discrepancyReport = Неопределено, returnedDelivery = Неопределено) Экспорт
	
	_Объект = Создать("ProcessIncomingConsignmentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.delivery           = delivery;
	_Объект.deliveryFacts      = deliveryFacts;
	
	Если НЕ discrepancyReport = Неопределено Тогда
		Если ТипЗнч(discrepancyReport) = Тип("Массив") Тогда
			Для каждого _discrepancyReport Из discrepancyReport Цикл
				_Объект.discrepancyReport.Добавить(_discrepancyReport);
			КонецЦикла;
		Иначе
			_Объект.discrepancyReport.Добавить(discrepancyReport);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ returnedDelivery = Неопределено Тогда
		_Объект.returnedDelivery = returnedDelivery;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о записях в складском журнале продукции системы Меркурий.
Функция ProcessIncomingConsignmentResponse(пResponse) Экспорт
	
// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39749
// В ответе ProcessIncomingResponse будут отдельные ВСД.
// В случае полного или частичного гашения будут возвращены данные погашенного ВСД
// и в случае частичного гашения также будут возвращены данные возвратного ВСД.
// В случае полного возврата партии возвращаются только данные возвратного сертификата.	
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ProcessIncomingConsignmentResponse, "ProcessIncomingConsignmentResponse", URI());
	
КонецФункции

Функция ProcessIncomingConsignment(delivery, deliveryFacts, discrepancyReport = Неопределено, returnedDelivery = Неопределено, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = ProcessIncomingConsignmentRequest(delivery, deliveryFacts, discrepancyReport, returnedDelivery);
	
	_Response = Прокси("processIncomingConsignmentRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат ProcessIncomingConsignmentResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область PrepareOutgoingConsignmentOperation

// Операция предназначена для оформления транспортной партии.
// Параметры:
//  delivery - vetd:Delivery - Сведения для оформления транспортного ВСД
Функция PrepareOutgoingConsignmentRequest(delivery) Экспорт
	
	_Объект = Создать("PrepareOutgoingConsignmentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.delivery           = delivery;
	
	Возврат _Объект;
	
КонецФункции

Функция PrepareOutgoingConsignmentResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.PrepareOutgoingConsignmentResponse, "PrepareOutgoingConsignmentResponse", URI());
	
КонецФункции

Функция PrepareOutgoingConsignment(delivery, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = PrepareOutgoingConsignmentRequest(delivery);
	
	_Response = Прокси("prepareOutgoingConsignmentRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат PrepareOutgoingConsignmentResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область ResolveDiscrepancyOperation

// Операция предназначена для устранения возможных несоответствий сведений об объёмах в складском журнале продукции системы Меркурий
// и фактических объёмов продукции на складе предприятия, выявленных по результатам проведенной инвентаризации.
// Параметры:
//  enterprise - dt:Enterprise - Площадка на которой осуществляется инвентаризация
//  inventoryDate - xs:dateTime - Дата проведения инвентаризации
//  responsible - dt:User - Ответственный за инвентаризацию
//  stockDiscrepancy - vetd:StockDiscrepancy - Сведения о результате инвентаризации (по одному факту расхождения)
//  discrepancyReport - vetd:DiscrepancyReport - Сведения об акте несоответствия
Функция ResolveDiscrepancyRequest(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport) Экспорт
	
	_Объект = Создать("ResolveDiscrepancyRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.enterprise         = enterprise;
	_Объект.inventoryDate      = Ветис.ВремяВетис(inventoryDate);
	_Объект.responsible        = responsible;
	_Объект.stockDiscrepancy   = stockDiscrepancy;
	_Объект.discrepancyReport  = discrepancyReport;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о результатах обработки заявки на регистрацию несоответствий
// в записях складского журнала, выявленных в результате инвентаризации.
Функция ResolveDiscrepancyResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ResolveDiscrepancyResponse, "ResolveDiscrepancyResponse", URI()).stockEntryList;
	
КонецФункции

Функция ResolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = ResolveDiscrepancyRequest(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport);
	
	_Response = Прокси("resolveDiscrepancyRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат ResolveDiscrepancyResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область WithdrawVetDocumentOperation
// Если ВСД содержит ошибки, либо фактические сведения отличаются от того, что указано в ВСД,
// то такой документ может быть аннулирован, то есть такой документ становится недействительным.
// 
// Операция аннулирования через шлюз Ветис.API доступна ТОЛЬКО для транспортных сертификатов.
// Производственные сертификаты нужно аннулировать через веб-интерфейс через запись журнала или транзакцию.
// 
// После того как ВСД был аннулирован, объем продукции, на которую был выдан данный ВСД, возвращается в журнал предприятия-отправителя
// и взамен аннулированного врач может выдать новый ВСД на эту партию продукции, содержащий верные сведения.
// 
// Аннулировать ВСД может тот, кто его выписал, либо другой ветеринарный врач обслуживающий то предприятие, с которого данный ВСД был выписан.
// Если ВСД был погашен, то его аннулировать уже нельзя, то есть для аннулирования ВСД должен быть в статусе "Оформлен".

// Операция предназначена для аннулирования ВСД.
// Параметры:
//  vetDocumentId	- bs:UUID - Идентификатор ВСД, который аннулируется
//  withdrawReason - vetd:WithdrawReason - Причина аннулирования ВСД
//  withdrawDate - xs:dateTime - Дата аннулирования ВСД
//  vetDoctor - argc:User - Ветеринарный врач, ответственный за аннулирование ВСД
Функция WithdrawVetDocumentRequest(vetDocumentId, withdrawReason, withdrawDate, specifiedPerson) Экспорт
	
	_Объект = Создать("WithdrawVetDocumentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.vetDocumentId      = vetDocumentId;
	_Объект.withdrawReason     = withdrawReason;
	_Объект.withdrawDate       = Ветис.ВремяВетис(withdrawDate);
	_Объект.specifiedPerson    = specifiedPerson;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения об аннулированном ВСД.
Функция WithdrawVetDocumentResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.WithdrawVetDocumentResponse, "WithdrawVetDocumentResponse", URI()).vetDocument;
	
КонецФункции

Функция WithdrawVetDocument(vetDocumentId, withdrawReason, withdrawDate, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = WithdrawVetDocumentRequest(vetDocumentId, withdrawReason, withdrawDate, Ветис.Врач());
	
	_Response = Прокси("withdrawVetDocumentRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат WithdrawVetDocumentResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область ModifyBusinessEntityOperation

// Операция предназначена для регистрации новых ХС в реестре,
// а также для изменения информации об уже зарегистрированных.
// Параметры:
//  modificationOperation - vd:BEModificationOperation - Описание операции добавления/изменения информации о ХС.
Функция ModifyBusinessEntityRequest(modificationOperation) Экспорт
	
	_Объект = Создать("ModifyBusinessEntityRequest");
	
	_Объект.localTransactionId    = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator             = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.modificationOperation = modificationOperation;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о ХС, который был изменен или добавлен.
Функция ModifyBusinessEntityResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ModifyBusinessEntityResponse, "ModifyBusinessEntityResponse", URI()).businessEntity;
	
КонецФункции

Функция ModifyBusinessEntity(modificationOperation, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = ModifyBusinessEntityRequest(modificationOperation);
	
	_Response = Прокси("modifyBusinessEntityRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат ModifyBusinessEntityResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область ModifyEnterpriseOperation

// Операция предназначена для регистрации новых площадок (поднадзорных объектов) в реестре,
// а также для изменения информации об уже зарегистрированных.
// Параметры:
//  modificationOperation - vd:ENTModificationOperation - Описание операции добавления/изменения информации о поднадзорном объекте.
Функция ModifyEnterpriseRequest(modificationOperation) Экспорт
	
	_Объект = Создать("ModifyEnterpriseRequest");
	
	_Объект.localTransactionId    = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator             = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.modificationOperation = modificationOperation;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о поднадзорном объекте, который был изменен или добавлен.
Функция ModifyEnterpriseResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ModifyEnterpriseResponse, "ModifyEnterpriseResponse", URI()).enterprise;
	
КонецФункции

Функция ModifyEnterprise(modificationOperation, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = ModifyEnterpriseRequest(modificationOperation);
	
	_Response = Прокси("modifyEnterpriseRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат ModifyEnterpriseResponse(_Response);
	
КонецФункции

#КонецОбласти

#Область ModifyActivityLocationsOperation

//Операция предназначена для создание связи между ХС и площадкой или удаление этой связи.
// Параметры:
//  modificationOperation - vd:BEActivityLocationsModificationOperation
Функция ModifyActivityLocationsRequest(modificationOperation) Экспорт
	
	_Объект = Создать("ModifyActivityLocationsRequest");
	
	_Объект.localTransactionId    = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator             = ВетисMercuryVetdocument_2_0.User(Ветис.ЛогинХС());
	_Объект.modificationOperation = modificationOperation;
	
	Возврат _Объект;
	
КонецФункции

//Объект содержит сведения о поднадзорном объекте, который был изменен или добавлен.
Функция ModifyActivityLocationsResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ModifyActivityLocationsResponse, "ModifyActivityLocationsResponse", URI()).businessEntity;
	
КонецФункции

Функция ModifyActivityLocations(modificationOperation, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	
	_Request = ModifyActivityLocationsRequest(modificationOperation);
	
	_Response = Прокси("modifyActivityLocationsRequest", _Request, issuerId, Ложь);
	
	Если _Response = Ложь Тогда пОтказ = Истина; Возврат Неопределено;	КонецЕсли;
	
	Возврат ModifyActivityLocationsResponse(_Response);
	
КонецФункции

#КонецОбласти


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI() Экспорт
	
	Если Ветис.Сервис() = Перечисления.ВетисСервис.mercury_g2b_service Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2";
	ИначеЕсли Ветис.Сервис() = Перечисления.ВетисСервис.mercury_vu_service Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/mercury/vu/applications/v2";
	КонецЕсли;
	
КонецФункции


Функция ФабрикаWS()
	
	_Кеш = Ветис.Переменные_Получить("КешФабрики", Новый Соответствие);
	
	_фабрика = _Кеш.Получить("ApplicationManagementService");
	
	Если НЕ _фабрика = Неопределено Тогда
		Возврат _фабрика;
	КонецЕсли;
	
	_ФабрикаXDTO = Ветис.ФабрикаОбщая();
	
	_Определения = Ветис.Определения("ApplicationManagementService");
	
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный
	_URI = Новый Массив;  
	_URI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	_URI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	_ФабрикаWS = Новый ФабрикаXDTO(_Определения.ФабрикаXDTO.ЭкспортМоделиXDTO(_URI), _ФабрикаXDTO.Пакеты);  
	
	_Пакеты = Новый Массив;  
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(URI()));
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(ВетисSoapEnvelope.URI()));
	
	Для Каждого _Пакет Из _ФабрикаWS.Пакеты Цикл  
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;  
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	_Кеш = Ветис.Переменные_Получить("КешФабрики", Новый Соответствие);
	
	_Кеш.Вставить("ApplicationManagementService", _фабрика);
	
	Ветис.Переменные_Установить("КешФабрики", _Кеш);
	
	Возврат _фабрика;
	
КонецФункции

Функция Прокси(пИмяФункции, пRequest, issuerId = Неопределено, ПоУмолчанию = Неопределено, пОтладка = Неопределено, пОжидание = 5)
	
	Возврат Ветис.ВыполнитьЗапрос("ams-mercury.service", пИмяФункции, ФабрикаWS(), пRequest, issuerId, ПоУмолчанию, пОтладка, пОжидание);
	
КонецФункции
