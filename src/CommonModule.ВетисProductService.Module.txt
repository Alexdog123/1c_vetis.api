
// Предназначена для получения записи продукции
Функция GetProductByGuid(guid) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Возврат ВетисХозяйственныеОперации.GetProductByGuid(guid);
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для получения записи о виде продукции
Функция GetSubProductByGuid(guid) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Возврат ВетисХозяйственныеОперации.GetSubProductByGuid(guid);
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetSubProductByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetSubProductByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

//Предназначена для получения записи о номенклатуре производителя по её глобальному идентификатору.
//Глобальный идентификатор присваивается номенклатуре при занесении её в список с помощью метода ModifyProducerStockListOperation.
Функция GetProductItemByGuid(guid) Экспорт
	
	Попытка
		Возврат Прокси().GetProductItemByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductItemByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции


// Предназначена для получения списка продукции по указанному типу.
Функция GetProductByTypeList(productType, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductByTypeList(пListOptions, productType)
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductByTypeList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для Выборки продукции по указанному типу.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductByTypeListСледующий(productType, пItem, пПараметры) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			_Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ _Таблица.Product КАК guid, _Таблица.ProductName КАК name ИЗ РегистрСведений.ВетисСправочникПродукции КАК _Таблица ГДЕ _Таблица.ProductType = &productType");
			_Запрос.УстановитьПараметр("productType", productType);
			_Результат = _Запрос.Выполнить();
			пПараметры.Вставить("ListResponse", _Результат.Выбрать());
		КонецЕсли;
		_Результат = пПараметры.ListResponse.Следующий();
		пItem = пПараметры.ListResponse;
		Возврат _Результат;
	Иначе
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
			пПараметры.Вставить("Индекс", 0);
		Иначе
			пПараметры.Индекс = пПараметры.Индекс + 1;
			Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
				Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
					Возврат Ложь;
				Иначе
					пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
					пПараметры.Индекс = 0;
				КонецЕсли;
			Иначе
				пItem = пПараметры.ListResponse.product[пПараметры.Индекс];
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			_ListResponse = Прокси().GetProductByTypeList(пПараметры.ListOptions, productType);
		Исключение
			Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductByTypeListСледующий");
			ВызватьИсключение;
		КонецПопытки;
		
		пПараметры.Вставить("ListResponse", _ListResponse);
		
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Возврат Ложь;
		Иначе
			пItem = пПараметры.ListResponse.product[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка видов продукции, отфильтрованного по указанному продукту.
Функция GetSubProductByProductList(productGuid, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetSubProductByProductList(пListOptions, productGuid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetSubProductByProductList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки видов продукции, отфильтрованного по указанному продукту.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productGuid - ссылка на продукт
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetSubProductByProductListСледующий(productGuid, пItem, пПараметры) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			_Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ _Таблица.SubProduct КАК guid, _Таблица.SubProductName КАК name, _Таблица.Product КАК productGuid, _Таблица.ProductType КАК ProductType ИЗ РегистрСведений.ВетисСправочникПродукции КАК _Таблица ГДЕ _Таблица.Product = &productGuid");
			_Запрос.УстановитьПараметр("productGuid", productGuid);
			_Результат = _Запрос.Выполнить();
			пПараметры.Вставить("ListResponse", _Результат.Выбрать());
		КонецЕсли;
		_Результат = пПараметры.ListResponse.Следующий();
		пItem = пПараметры.ListResponse;
		Возврат _Результат;
	Иначе
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
			пПараметры.Вставить("Индекс", 0);
		Иначе
			пПараметры.Индекс = пПараметры.Индекс + 1;
			Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
				Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
					Возврат Ложь;
				Иначе
					пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
					пПараметры.Индекс = 0;
				КонецЕсли;
			Иначе
				пItem = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			_ListResponse = Прокси().GetSubProductByProductList(пПараметры.ListOptions, productGuid);
		Исключение
			Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetSubProductByProductListСледующий");
			ВызватьИсключение;
		КонецПопытки;
		
		пПараметры.Вставить("ListResponse", _ListResponse);
		
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Возврат Ложь;
		Иначе
			пItem = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
Функция GetProductItemList(subProductGuid, enterpriseGuid, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductItemList(ListOptions, subProductGuid, enterpriseGuid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductItemList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  subProductGuid - глобальный идентификатор вида продукции, для которого нужно получить номенклатуру
//  enterpriseGuid - глобальный идентификатор предприятия, на котором производится или хранится продукция
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductItemListСледующий(subProductGuid, enterpriseGuid, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.productItem[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Прокси().GetProductItemList(пПараметры.ListOptions, subProductGuid, enterpriseGuid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductItemListСледующий");
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.productItem[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Функция Прокси()
	
	_Прокси = Ветис.Прокси("ProductService");
	
	Возврат _Прокси;
	
КонецФункции
