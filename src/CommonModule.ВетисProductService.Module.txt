
// Предназначена для получения записи продукции
Функция GetProductByGuid(guid) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Возврат ВетисХозяйственныеОперации.GetProductByGuid(guid);
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для получения записи о виде продукции
Функция GetSubProductByGuid(guid) Экспорт
	
	Если Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Возврат ВетисХозяйственныеОперации.GetSubProductByGuid(guid);
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetSubProductByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetSubProductByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

//Предназначена для получения записи о номенклатуре производителя по её глобальному идентификатору.
//Глобальный идентификатор присваивается номенклатуре при занесении её в список с помощью метода ModifyProducerStockListOperation.
Функция GetProductItemByGuid(guid) Экспорт
	
	Попытка
		Возврат Прокси().GetProductItemByGuid(guid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductItemByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции


// Предназначена для получения списка продукции по указанному типу.
Функция GetProductByTypeList(productType, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductByTypeList(пListOptions, productType)
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductByTypeList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для Выборки продукции по указанному типу.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  product - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductByTypeListСледующий(productType, product, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если (пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("ИзСервиса")) И Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			_Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ _Таблица.Product КАК guid, _Таблица.ProductName КАК name ИЗ РегистрСведений.ВетисСправочникПродукции КАК _Таблица ГДЕ _Таблица.ProductType = &productType");
			_Запрос.УстановитьПараметр("productType", productType);
			_Результат = _Запрос.Выполнить();
			пПараметры.Вставить("ListResponse", _Результат.Выбрать());
		КонецЕсли;
		_Результат = пПараметры.ListResponse.Следующий();
		product = пПараметры.ListResponse;
		Возврат _Результат;
	Иначе
		Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
			пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
			пПараметры.Вставить("productType", productType);
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.productType");
			GetListСледующийИнициализация("GetProductByTypeList", "product", "", пПараметры);
		КонецЕсли;
		
		Возврат GetListСледующий(product, пПараметры, пОтказ, пОшибка);
	КонецЕсли;
	
КонецФункции


// Предназначена для получения списка видов продукции, отфильтрованного по указанному продукту.
Функция GetSubProductByProductList(productGuid, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetSubProductByProductList(пListOptions, productGuid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetSubProductByProductList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки видов продукции, отфильтрованного по указанному продукту.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productGuid - ссылка на продукт
//  product - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetSubProductByProductListСледующий(productGuid, subProduct, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если (пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("ИзСервиса")) И Ветис.Настройки_СправочникПродукцииЛокально() Тогда
		Если пПараметры = Неопределено Тогда
			пПараметры = Новый Структура;
			_Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ _Таблица.SubProduct КАК guid, _Таблица.SubProductName КАК name, _Таблица.Product КАК productGuid, _Таблица.ProductType КАК ProductType ИЗ РегистрСведений.ВетисСправочникПродукции КАК _Таблица ГДЕ _Таблица.Product = &productGuid");
			_Запрос.УстановитьПараметр("productGuid", productGuid);
			_Результат = _Запрос.Выполнить();
			пПараметры.Вставить("ListResponse", _Результат.Выбрать());
		КонецЕсли;
		_Результат = пПараметры.ListResponse.Следующий();
		subProduct = пПараметры.ListResponse;
		Возврат _Результат;
	Иначе
		Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
			пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
			пПараметры.Вставить("productGuid", productGuid);
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.productGuid");
			GetListСледующийИнициализация("GetSubProductByProductList", "subProduct", "", пПараметры);
		КонецЕсли;
		
		Возврат GetListСледующий(subProduct, пПараметры, пОтказ, пОшибка);
	КонецЕсли;
	
КонецФункции


// Предназначена для получения списка наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
Функция GetProductItemList(subProductGuid, enterpriseGuid, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductItemList(ListOptions, subProductGuid, enterpriseGuid);
	Исключение
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetProductItemList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  subProductGuid - глобальный идентификатор вида продукции, для которого нужно получить номенклатуру
//  enterpriseGuid - глобальный идентификатор предприятия, на котором производится или хранится продукция
//  productItem - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductItemListСледующий(subProductGuid, enterpriseGuid, productItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		пПараметры.Вставить("subProductGuid", subProductGuid);
		пПараметры.Вставить("enterpriseGuid", enterpriseGuid);
		пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.subProductGuid, пПараметры.enterpriseGuid");
		GetListСледующийИнициализация("GetProductItemList", "productItem", "", пПараметры);
	КонецЕсли;
	
	Возврат GetListСледующий(productItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции


Функция GetListСледующий(Item, пПараметры, пОтказ = Ложь, пОшибка = "")
	
	Перем ListResponse;
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Вычислить(пПараметры.СтрокаВызова);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), пПараметры.ИмяОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция GetListСледующийИнициализация(пИмяОперации, пИмяКоллекции, пИмяСвойства = "", пПараметры)
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	пПараметры.Вставить("ListOptions", ВетисBase_2_0.ListOptions(?(пПараметры.Свойство("count"), пПараметры.count, Неопределено)));
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ИмяОперации", пИмяОперации);
	пПараметры.Вставить("СтрокаПолученияЭлементаКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства));
	пПараметры.Вставить("СтрокаВызова", "Прокси()."+пИмяОперации+"("+?(пПараметры.Свойство("СтрокаПараметров"), пПараметры.СтрокаПараметров, "пПараметры.ListOptions")+")");
		
КонецФункции

Функция Прокси()
	
	_Прокси = Ветис.Прокси("ProductService");
	
	Возврат _Прокси;
	
КонецФункции
