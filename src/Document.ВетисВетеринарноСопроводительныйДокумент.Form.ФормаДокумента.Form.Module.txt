
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "осм" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "РезультатыОсмотраПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		УстановитьВидимость();
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		УстановитьВидимость();
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьИзСервиса(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаЗаполнитьИзСервисаСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогасить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат;
	КонецЕсли;
	
	КомандаПогаситьСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТоварыПриИзмененииНаСервере(Элемент.Имя);
	
	////MERC13283 - При указании упаковки необходимо указать хотя бы одно из следующих полей - UUID/GUID/код.
	//Элементы.сжУпаковка.АвтоОтметкаНезаполненного = сжКоличествоМест > 0;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере(ЭлементИмя)
	
	Если Элементы[ЭлементИмя].ПутьКДанным = "сжНоменклатура" Тогда
		сжЕдиницаИзмерения = сжНоменклатура.БазоваяЕдиницаИзмерения;
		сжСтранаПроисхождения = сжНоменклатура.СтранаПроисхождения;
		сжНоменклатурнаяГруппа = сжНоменклатура.НоменклатурнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура сжНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.ProductItemФормаВыбора(ЭтаФорма, "сжНоменклатураОбработкаОповещения", СтандартнаяОбработка, сжНоменклатура, сжПроизводительПредприятие);
	
КонецПроцедуры

&НаКлиенте
Процедура сжНоменклатураОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжНоменклатура = Результат;
		сжProductItemName = "";
		сжProductItemGuid = "";
		сжSubProductName = "";
		сжSubProductGuid = "";
		ТоварыПриИзмененииНаСервере("сжНоменклатура");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сжProductItemNameОчистка(Элемент, СтандартнаяОбработка)
	сжProductItemGuid = "";
КонецПроцедуры

&НаКлиенте
Процедура сжSubProductNameОчистка(Элемент, СтандартнаяОбработка)
	сжSubProductGuid = "";
КонецПроцедуры


&НаКлиенте
Процедура сжПроизводительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "сжПроизводительПредприятиеОбработкаОповещения", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура сжПроизводительПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжПроизводительПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура сжСтранаПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.CountryФормаВыбора(ЭтаФорма, "сжСтранаПроисхожденияОбработкаОповещения", СтандартнаяОбработка, сжСтранаПроисхождения);
	
КонецПроцедуры

&НаКлиенте
Процедура сжСтранаПроисхожденияОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжСтранаПроисхождения = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ПолучательОбработкаОповещения", СтандартнаяОбработка, Объект.Получатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Получатель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ПолучательПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.Получатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ПолучательПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ОтправительОбработкаОповещения", СтандартнаяОбработка, Объект.Отправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Отправитель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ОтправительПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.Отправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ОтправительПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ттнПосредникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ттнПосредникОбработкаОповещения", СтандартнаяОбработка, ттнПосредник);
	
КонецПроцедуры

&НаКлиенте
Процедура ттнПосредникОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		ттнПосредник = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Для каждого _Строка Из Объект.Товары Цикл
			Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ВСД Цикл
			Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.РезультатыОсмотра Цикл
			Если Лев(_Реквизит.Имя, 3) = "осм" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ТТН Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыФормы()
	
	Объект.Товары.Очистить();
	Объект.ВСД.Очистить();
	Объект.ТТН.Очистить();
	Объект.РезультатыОсмотра.Очистить();
	
	_СтрокаСЖ = Объект.Товары.Добавить();
	_СтрокаВСД = Объект.ВСД.Добавить();
	_СтрокаТТН = Объект.ТТН.Добавить();
	_СтрокаОСМ = Объект.РезультатыОсмотра.Добавить();
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
			_СтрокаСЖ[Сред(_Реквизит.Имя, 3)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "всд" Тогда
			_СтрокаВСД[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "осм" Тогда
			_СтрокаОСМ[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "ттн" Тогда
			_СтрокаТТН[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура КомандаЗаполнитьИзСервисаСервер(пОтказ = Ложь, пОшибка = "")
	
	_vetDocument = ВетисMercuryApplicationsСлой1с.getVetDocumentByUuid(Объект, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Если Ветис.Версия_2_0() Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(Объект, _vetDocument);
		Иначе
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(Объект, _vetDocument);
		КонецЕсли;
		ЗаполнитьРеквизитыФормы();
		Если Ветис.РазрешенаОтладка() Тогда
			Модифицированность = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.uuid) Тогда
			Записать();
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаПогаситьСервер(пОтказ = Ложь, пОшибка = "")
	
	ЗаписатьРеквизитыФормы();
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(Объект.Товары.Получить(0), Объект, Объект.Дата, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Записать();
		УстановитьВидимость();
	КонецЕсли;;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	_Версия20 = ?(ЗначениеЗаполнено(Объект.Версия), Объект.Версия, Ветис.Версия_2_0());
	_Отладка = Ветис.РазрешенаОтладка();
	
	Элементы.ГруппаУпаковка.Видимость = _Версия20;
	Элементы.ГруппаМаршрутСледования.Видимость = _Версия20;
	Элементы.ГруппаРезультатыОсмотра.Видимость = _Версия20;
	Элементы.ГруппаЛабораторныеИсследования.Видимость = _Версия20;
	Элементы.ГруппаМероприятия.Видимость = _Версия20;
	Элементы.ГруппаУсловияПеремещения.Видимость = _Версия20;
	Элементы.ГруппаСвязанныеДокументы.Видимость = _Версия20;
	Элементы.ГруппаВСД.Видимость = НЕ _Версия20;
	Элементы.сжИДПартии.Видимость = _Версия20;
	Элементы.сжКоличествоМест.Видимость = НЕ _Версия20;
	Элементы.сжУпаковка.Видимость = НЕ _Версия20;
	Элементы.ГруппаДополнительно.Видимость = _Отладка;
	Элементы.uuid.Видимость = _Отладка;
	//Элементы.сжУпаковка.АвтоОтметкаНезаполненного = сжКоличествоМест > 0;
	
	Элементы.ФормаЗаполнитьИзСервиса.Видимость = ЗначениеЗаполнено(Объект.uuid);
	
	Элементы.ФормаКомандаПогасить.Видимость = (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен"));
	
КонецПроцедуры
