
Функция ActivityLocationList(BusinessMember) Экспорт
	
	_Объект = Создать("ActivityLocationList");
	
	Если ТипЗнч(BusinessMember) = Тип("Массив") Тогда
		Для каждого _BusinessMember Из BusinessMember Цикл
			_Объект.BusinessMember.Добавить(_BusinessMember);
		КонецЦикла;
	Иначе
		_Объект.BusinessMember.Добавить(BusinessMember);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция Address(countryGuid, regionGuid, districtGuid, localityGuid, streetGuid, house, building) Экспорт
	
	_Объект = Создать("Address");
	
	_Объект.country      = Country(countryGuid);
	_Объект.region       = District(regionGuid);
	_Объект.localityGuid = Locality(localityGuid);
	_Объект.streetGuid   = Street(streetGuid);
	_Объект.house        = house;
	_Объект.building     = building;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий заболевание.
//Параметры:
// name - Наименование заболевания
Функция AnimalDisease(name = "") Экспорт
	
	_Объект = Создать("AnimalDisease");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntity");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid, globalID = Неопределено) Экспорт
	
	_Объект = Создать("BusinessMember");
	
	_Объект.businessEntity = BusinessEntity(businessEntityGuid);
	_Объект.enterprise     = Enterprise(enterpriseGuid);
	
	Если НЕ globalID = Неопределено Тогда
		_Объект.globalID = globalID;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ComplexDate(пОбъект) Экспорт
	
	Перем _Объект;
	
	Если ТипЗнч(пОбъект) = Тип("Дата") Тогда
		
		_Дата = ВетисОбщегоНазначения.ВремяВетис(пОбъект);
		
		_Объект = Создать("ComplexDate");
		
		_Объект.year  = Год(_Дата);
		_Объект.month = Месяц(_Дата);
		_Объект.day   = День(_Дата);
		_Объект.hour  = Час(_Дата);
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектXDTO") Тогда
		
		_свойства = пОбъект.Свойства();
		
		_гггг = ?(_свойства.Получить("year") = Неопределено ИЛИ пОбъект.year = Неопределено, 1, Число(пОбъект.year));
		_мм = ?(_свойства.Получить("month") = Неопределено ИЛИ пОбъект.month = Неопределено, 1, Число(пОбъект.month));
		_дд = ?(_свойства.Получить("day") = Неопределено ИЛИ пОбъект.day = Неопределено, 1, Число(пОбъект.day));
		_чч = ?(_свойства.Получить("hour") = Неопределено ИЛИ пОбъект.hour = Неопределено, 1, Число(пОбъект.hour));
		
		_Объект = Дата(_гггг, _мм, _дд, _чч, 1, 1);
		
		_Объект = ВетисОбщегоНазначения.ВремяБД(_Объект);
		
	КонецЕсли;
	
	Возврат _Объект;
		
КонецФункции

Функция Country(guid = Неопределено) Экспорт
	
	_Объект = Создать("Country");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция CountryList(guid = Неопределено) Экспорт
	
	_Объект = Создать("CountryList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.country.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция District(guid = Неопределено) Экспорт
	
	_Объект = Создать("District");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция DistrictList(guid = Неопределено) Экспорт
	
	_Объект = Создать("DistrictList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.district.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	_Объект = Создать("Enterprise");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция FederalDistrict(guid = Неопределено) Экспорт
	
	_Объект = Создать("FederalDistrict");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция IncorporationForm(shortName = "", name = "", code = "") Экспорт
	
	_Объект = Создать("IncorporationForm");
	
	_Объект.name = name;
	_Объект.code = code;
	_Объект.shortName = shortName;
	
	Возврат _Объект;
	
КонецФункции

Функция Locality(guid = Неопределено) Экспорт
	
	_Объект = Создать("Locality");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция LocalityList(guid = Неопределено) Экспорт
	
	_Объект = Создать("LocalityList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.locality.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Название пункта перегрузки
// address - Адрес пункта перегрузки
Функция Location(name = "", address = Неопределено) Экспорт
	
	_Объект = Создать("Location");
	
	_Объект.name = name;
	
	Если address = Неопределено Тогда
		//
	Иначе
		_Объект.address = address;
	КонецЕсли;
	
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий препарат/вакцину, которыми обрабатывались животные.
//Параметры:
// ID - Идентификационный (уникальный) номер препарата
// name - Наименование вакцины/препарата
// series - Номер серии препарата/вакцины
// producer - dt:BusinessMember - Производитель препарата/вакцины
Функция MedicinalDrug(ID = "", name = "", series = "", producer = Неопределено) Экспорт
	
	_Объект = Создать("MedicinalDrug");
	
	_Объект.ID     = ID;
	_Объект.name   = name;
	_Объект.series = series;
	
	Если НЕ producer = Неопределено Тогда
		_Объект.producer = producer;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий организацию, в т.ч. учреждения структуры Россельхознадзора, ветеринарных управлений субъектов РФ и т.д.
Функция Organization() Экспорт
	
	_Объект = Создать("Organization");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий упаковку партии продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// level        - dt:PackageLevelType - Уровень упаковки
// packingType  - dt:PackingType - Тип упаковки
// quantity     - xs:integer - Количество единиц упаковки
// productMarks - dt:ProductMarks - Маркировка партии продукции
Функция Package(level, packingType, quantity = Неопределено, productMarks = Неопределено) Экспорт
	
	_Объект = Создать("Package");
	
	_Объект.level = level;
	
	_Объект.packingType = packingType;
	
	Если НЕ quantity = Неопределено Тогда
		_Объект.quantity = quantity;
	КонецЕсли;
	
	Если НЕ productMarks = Неопределено Тогда
		_Объект.productMarks = productMarks;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список физической упаковки.
Функция PackageList(level, packingType, quantity = Неопределено, productMarks = Неопределено) Экспорт
	
	_Объект = Создать("PackageList");
	
	PackageListДобавить(_Объект, level, packingType, quantity, productMarks);
	
	Возврат _Объект;
	
КонецФункции

Функция PackageListДобавить(List, level, packingType, quantity = Неопределено, productMarks = Неопределено) Экспорт
	
	List.package.Добавить(Package(level, packingType, quantity, productMarks));
	
КонецФункции

//Тип, описывающий вариант фасовки продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// packingType - dt:PackingType - Тип упаковки
// quantity    - xs:integer - Количество единиц упаковки
// volume      - bs:Decimal - Объём единицы упаковки товара
// unit        - dt:Unit - Единица измерения объёма единицы упаковки товара
Функция Packaging(packingType, quantity = Неопределено, volume = Неопределено, unit = Неопределено) Экспорт
	
	_Объект = Создать("Packaging");
	
	_Объект.packingType = packingType;
	
	Если НЕ quantity = Неопределено Тогда
		_Объект.quantity = quantity;
	КонецЕсли;
	
	Если НЕ volume = Неопределено Тогда
		_Объект.volume = volume;
	КонецЕсли;
	
	Если НЕ unit = Неопределено Тогда
		_Объект.unit = unit;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид упаковки.
//Парметры:
// globalID - dt:PackingCodeType - Уникальный идентификатор упаковки
// name - Наименование упаковки
Функция PackingType(globalID = Неопределено, name = "") Экспорт
	
	_Объект = Создать("PackingType");
	
	_Объект.name = name;
	
	Если НЕ globalID = Неопределено Тогда
		_Объект.globalID = globalID;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий производителя продукции
Функция Producer(guid) Экспорт
	
	_Объект = Создать("Producer");
	
	_Объект.enterprise = Enterprise(guid);
	
	_Объект.role = ВетисКонстанты.EnterpriseRole_PRODUCER();
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	_Объект = Создать("ProducerList");
	
	ProducerListДобавить(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция ProducerListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.producer.Добавить(Producer(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.producer.Добавить(Producer(guid));
	КонецЕсли;
	
КонецФункции

//Тип, описывающий продукцию.
Функция Product(guid = Неопределено) Экспорт
	
	_Объект = Создать("Product");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о наименовании продукции в соответствии с номенклатурой производителя.
Функция ProductItem(guid = Неопределено) Экспорт
	
	_Объект = Создать("ProductItem");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список маркировок продукции.
//Под маркировкой понимается всё, что может быть физически нанесено на упаковку или непосредственно на продукцию.
//Для каждой маркировки может быть указан её тип (см. атрибут class), который также может определять формат маркировки.
Функция ProductMarks(value = Неопределено) Экспорт
	
	_Объект = Создать("ProductMarks");
	
	Если НЕ value = Неопределено Тогда
		_Объект.class.Добавить(value);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий назначение груза.
Функция Purpose(guid = Неопределено) Экспорт
	
	_Объект = Создать("Purpose");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Region(guid = Неопределено) Экспорт
	
	_Объект = Создать("Region");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция RegionList(guid = Неопределено) Экспорт
	
	_Объект = Создать("RegionList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.region.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий условие регионализации, соблюдаемое при перевозке груза.
//Параметры:
// referenceNumber - Номер условия
// text - xs:Text - Формулировка условия
// strict - xs:boolean - Обязательность соблюдения условия
// relatedDisease - dt:AnimalDisease - Заболевание, к которому относится данное условие
Функция RegionalizationCondition(referenceNumber, text, strict, relatedDisease) Экспорт
	
	_Объект = Создать("RegionalizationCondition");
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Наименование метода исследования
Функция ResearchMethod(name = "") Экспорт
	
	_Объект = Создать("ResearchMethod");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции

Функция Street(guid = Неопределено) Экспорт
	
	_Объект = Создать("Street");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция StreetList(guid = Неопределено) Экспорт
	
	_Объект = Создать("StreetList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.street.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид продукции.
Функция SubProduct(guid = Неопределено) Экспорт
	
	_Объект = Создать("SubProduct");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий единицу измерения.
Функция Unit(guid = Неопределено) Экспорт
	
	_Объект = Создать("Unit");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции



//Природа ВСД (электронный или бумажный).
Функция DocumentNature(nature) Экспорт
	
	Если      nature = 1 Тогда
		Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
	ИначеЕсли nature = 2 Тогда
		Возврат ВетисКонстанты.DocumentNature_PAPER();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductMarkingClass(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_UNDEFINED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_BN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_SSCC();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cпособ хранения при перевозке.
Функция TransportationStorageType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_CHILLED();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_COOLED();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_VENTILATED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции



Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/dictionary/v2";
	
КонецФункции
