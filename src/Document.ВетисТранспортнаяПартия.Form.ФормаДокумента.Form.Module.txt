
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		УстановитьВидимость();
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьТовары(Команда)
	КомандаЗаполнитьТоварыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	КомандаОтправитьНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьПартии(Команда)
	
	ОбновитьПартииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьПартии(Количеств)
	
	РаспределитьПартии();
	
	ОбновитьПартииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВниз(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_строка = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0];
		Если Объект.Партии.Индекс(_строка) < Объект.Партии.Количество() - 1 Тогда
			Объект.Партии.Сдвинуть(Объект.Партии.Индекс(_строка), 1);
			ОбновитьПартииНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПартииПереместитьВверх(Команда)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_строка = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0];
		Если Объект.Партии.Индекс(_строка) > 0 Тогда
			Объект.Партии.Сдвинуть(Объект.Партии.Индекс(_строка), -1);
			ОбновитьПартииНаСервере();
			Элементы.ПартииСписок.ТекущаяСтрока = ПартииСписок.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоДокументу(Команда)
	
	//заполнить по реализации
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОбновитьПартииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		Объект.Партии.Удалить(_ПартииСтрока);
	КонецЦикла;
	
	ПартииСписок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ПартииИспользоватьПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		_ПартииСтрока = Объект.Партии.Добавить();
		ЗаполнитьЗначенияСвойств(_ПартииСтрока, _ТекущиеДанные);
	Иначе
		Объект.Партии.Удалить(Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid))[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.ПартииСписок.ТекущиеДанные;
	
	Если _ТекущиеДанные.Использовать Тогда
		
		_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("guid", _ТекущиеДанные.guid));
		
		Если _ПартииСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(_ПартииСтроки[0], _ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииСписокКоличествоМестПриИзменении(Элемент)
	
	ПартииСписокКоличествоПриИзменении(Элемент);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНаСервере()
	
	_Объект = РеквизитФормыВЗначение("Объект");
	
	_Объект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(_Объект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтправитьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	ЗаписатьРеквизитыФормы();
	
	Для каждого _СтрокаПартии Из Объект.Партии Цикл
		ВетисMercuryApplicationsСлой1с.TransportOperation(Объект, _СтрокаПартии, Объект.ВСД[0], Объект.ТТН[0], пОтказ, пОшибка);
		Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПартииНаСервере()
	
	//Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПартииСписок.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.guid КАК Строка(50)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.НомерСтроки КАК Число) НомерСтроки,
	|	ВЫРАЗИТЬ(_Таблица.Количество КАК Число) Количество,
	|	ВЫРАЗИТЬ(_Таблица.КоличествоМест КАК Число) КоличествоМест
	|ПОМЕСТИТЬ ВПартииДок
	|ИЗ
	|	&ПартииДок КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Партии.ХозяйствующийСубъект,
	|	_Партии.Предприятие,
	|	_Партии.guid,
	|	_Партии.volume КАК Количество,
	|	_Партии.packingAmount КАК КоличествоМест,
	|	_SubProduct.Ссылка КАК НоменклатурнаяГруппа,
	|	_SubProduct.guid КАК SubProductGuid,
	|	_ProductItem.Ссылка КАК Номенклатура,
	|	_Unit.Ссылка КАК ЕдиницаИзмерения,
	|	_PackingForm.Ссылка КАК Упаковка
	|ПОМЕСТИТЬ ВПартии
	|ИЗ
	|	РегистрСведений.ВетисСкладскойЖурналРС КАК _Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _SubProduct
	|		ПО _Партии.SubProduct = _SubProduct.guid
	|			И _SubProduct.Ссылка Ссылка Справочник.НоменклатурныеГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _ProductItem
	|		ПО _Партии.ProductItem = _ProductItem.guid
	|			И _Партии.Предприятие = _ProductItem.Предприятие
	|			И _ProductItem.Ссылка Ссылка Справочник.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Unit
	|		ПО _Партии.Unit = _Unit.guid
	|			И _Unit.Ссылка Ссылка Справочник.КлассификаторЕдиницИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _PackingForm
	|		ПО _Партии.PackingForm = _PackingForm.guid
	|			И _PackingForm.Ссылка Ссылка Справочник.ВетисPackingForm
	|ГДЕ
	|	ИСТИНА
	|	И _Партии.last
	|	И НЕ _Партии.status В(201,400,410,420,430)
//http://help.vetrf.ru/wiki/TransportOperation
//Указанная версия записи (uuid) складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//201	WITHDRAWN - Запись журнала аннулирована.
//400	DELETED - Запись была удалена.
//410	DELETED_WHEN_MERGE - Запись была удалена в результате объединения.
//420	DELETED_WHEN_SPLIT - Запись была удалена в результате разделения.
//430	DELETED_WHEN_ATTACH - Запись была удалена в результате присоединения.
	|	И _Партии.volume > 0
	|//о1	И _ProductItem.Ссылка = &Номенклатура
	|//о2	И _SubProduct.Ссылка = &НоменклатурнаяГруппа
	|	И _Партии.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И _Партии.Предприятие = &Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА _ПартииДок.guid ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	ЕСТЬNULL(_ПартииДок.НомерСтроки, 999999) КАК НомерСтроки,
	|	&КлючСвязи КАК КлючСвязи,
	|	_Партии.ХозяйствующийСубъект,
	|	_Партии.Предприятие,
	| _Партии.guid КАК guid,
	| _Партии.SubProductGuid,
	|	_Партии.НоменклатурнаяГруппа,
	|	_Партии.Номенклатура,
	|	_Партии.ЕдиницаИзмерения,
	|	_Партии.Упаковка,
	|	Выбор Когда _ПартииДок.Количество есть null Тогда 0 Иначе _ПартииДок.Количество Конец КАК Количество,
	|	Выбор Когда _ПартииДок.КоличествоМест есть null Тогда 0 Иначе _ПартииДок.КоличествоМест Конец КАК КоличествоМест,
	|	_Партии.Количество КАК КоличествоПартии,
	|	_Партии.КоличествоМест КАК КоличествоМестПартии
	|ИЗ
	|	ВПартии КАК _Партии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВПартииДок КАК _ПартииДок
	|		ПО _Партии.guid = _ПартииДок.guid
	|ГДЕ
	|	ИСТИНА
	|	И ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	_Партии.Количество";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Отправитель);
	Запрос.УстановитьПараметр("Предприятие", Объект.ОтправительПредприятие);
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", -1)));
		Запрос.УстановитьПараметр("КлючСвязи", -1);
	Иначе
		_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		
		Запрос.УстановитьПараметр("Номенклатура", _ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("НоменклатурнаяГруппа", _ТекущиеДанные.НоменклатурнаяГруппа);
		Запрос.УстановитьПараметр("КлючСвязи", _ТекущиеДанные.КлючСтроки);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
		
		Запрос.УстановитьПараметр("ПартииДок", Объект.Партии.Выгрузить(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки)));
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(_ТекущиеДанные.Номенклатура) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	//ИначеЕсли ЗначениеЗаполнено(_ТекущиеДанные.НоменклатурнаяГруппа) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	_Результат = Запрос.Выполнить();
	_Выборка = _Результат.Выбрать();
	
	КоличествоИтог = 0;
	КоличествоМестИтог = 0;
	
	Пока _Выборка.Следующий() Цикл
		
		Если _Выборка.guid = NULL Тогда
			Объект.Партии.Удалить(_Выборка.НомерСтроки-1);
			Продолжить;
		КонецЕсли;
		
		_строка = ПартииСписок.Добавить();
		
		ЗаполнитьЗначенияСвойств(_строка, _Выборка);
		
		КоличествоИтог = КоличествоИтог + _Выборка.Количество;
		
		КоличествоМестИтог = КоличествоМестИтог + _Выборка.КоличествоМест;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПартии()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	_ПартииСтроки = Объект.Партии.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	
	_Количество = _ТекущиеДанные.Количество;
	
	_Структура = Новый Структура("guid");
	
	Для каждого _ПартииСтрока Из _ПартииСтроки Цикл
		
		_Структура.guid = _ПартииСтрока.guid;
		
		_ПартииСписокСтроки = ПартииСписок.НайтиСтроки(_Структура);
		
		Если _ПартииСписокСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		_ПартииСписокСтрока = _ПартииСписокСтроки[0];
		
		Если _Количество <= 0 Тогда
			_ПартииСтрока.Количество = 0;
		ИначеЕсли _ПартииСписокСтрока.КоличествоПартии >= _Количество Тогда
			_ПартииСтрока.Количество = _Количество;
			_Количество = 0;
		Иначе
			_ПартииСтрока.Количество = _ПартииСписокСтрока.КоличествоПартии;
			_Количество = _Количество - _ПартииСписокСтрока.КоличествоПартии;
		КонецЕсли;
		
		_ПартииСтрока.КоличествоМест = _ПартииСтрока.Количество * ?(_ПартииСписокСтрока.КоличествоПартии = 0, 0, _ПартииСписокСтрока.КоличествоМестПартии / _ПартииСписокСтрока.КоличествоПартии);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючСтроки()
	
	_список = Объект.Товары.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере()
	
	_ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	_ТекущиеДанные.НоменклатурнаяГруппа = _ТекущиеДанные.Номенклатура.НоменклатурнаяГруппа;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		//Для каждого _Строка Из Объект.Товары Цикл
		//	Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
		//		ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
		//	КонецЕсли;
		//КонецЦикла;
		
		Для каждого _Строка Из Объект.ВСД Цикл
			Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ТТН Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыФормы()
	
	Объект.ВСД.Очистить();
	Объект.ТТН.Очистить();
	
	_СтрокаВСД = Объект.ВСД.Добавить();
	_СтрокаТТН = Объект.ТТН.Добавить();
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
			_СтрокаВСД[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "ттн" Тогда
			_СтрокаТТН[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьТоварыНаСервере()
	
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	_Версия20 = Ветис.Версия_2_0();
	
	Элементы.всдВетсанэкспертиза.Видимость = НЕ _Версия20;
	Элементы.всдВетсанэкспертиза20.Видимость = _Версия20;
	
КонецПроцедуры
