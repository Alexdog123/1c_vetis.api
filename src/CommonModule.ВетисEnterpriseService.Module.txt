
// предназначена для получения последней в истории записи хозяйствующего субъекта
Функция GetBusinessEntityByGuid(guid, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//Если Ветис.Настройки_ОберткаHttp() Тогда
	//	Возврат ВетисRegistry.getBusinessEntityByGuid(guid, пОтказ, пОшибка);
	//КонецЕсли;
	
	Попытка
		Возврат Прокси().GetBusinessEntityByGuid(guid);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetBusinessEntityByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// предназначена для получения последней в истории записи предприятия
Функция GetEnterpriseByGuid(guid, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//Если Ветис.Настройки_ОберткаHttp() Тогда
	//	Возврат ВетисRegistry.GetEnterpriseByGuid(guid, пОтказ, пОшибка);
	//КонецЕсли;
	
	Попытка
		Возврат Прокси().GetEnterpriseByGuid(guid);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetEnterpriseByGuid");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции


// предназначена для получения списка хозяйствующих субъектов из реестра Россельхознадзора.
//  пfiltr - Структура - отбор
//  пListOptions - возвращаемый
Функция GetBusinessEntityList(пfiltr = Неопределено, пListOptions = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Если пfiltr = Неопределено Тогда
			Возврат Прокси().GetBusinessEntityList(пListOptions);
		Иначе
			Возврат Прокси().GetBusinessEntityList(пListOptions, ВетисCerberusEnterprise.BusinessEntity(пfiltr));
		КонецЕсли;
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetBusinessEntityList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки хозяйствующих субъектов из реестра Россельхознадзора.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  filtr - Структура - отбор
//  пItem - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetBusinessEntityListСледующий(пfiltr = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		Если пfiltr = Неопределено Тогда
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions");
		Иначе
			пПараметры.Вставить("BusinessEntity", ВетисCerberusEnterprise.BusinessEntity(пfiltr));
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.BusinessEntity");
		КонецЕсли;
		GetListСледующийИнициализация("GetBusinessEntityList", "businessEntity", "", пПараметры);
	КонецЕсли;
	
	Возврат GetListСледующий(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции


// предназначена для получения списка предприятий, зарегистрированных на территории Российской Федерации.
// Параметры:
//  пfiltr - Структура - отбор
//   UUID - Уникальный идентификатор версии записи предприятия в реестре Россельхознадзора. bs:UUID
//   GUID - Уникальный глобальный идентификатор в реестре Россельхознадзора. bs:UUID
//   name - Название предприятия. bs:String255
//   address - Адрес предприятия. ikar:Address
//    region - Регион Российской Федерации. ikar:Region	0..1
//    district - Район региона Российской Федерации. При поиске по району указывать регион не обязательно. ikar:District
//    locality - Населённый пункт регионального подчинения. По населённым пунктам районного подчинения поиск не осуществляется; При поиске обязательно также указывать регион. ikar:Locality
//  пListOptions - возвращаемый
Функция GetRussianEnterpriseList(пfiltr = Неопределено, пListOptions = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Если пfiltr = Неопределено Тогда
			Возврат Прокси().GetRussianEnterpriseList(пListOptions);
		Иначе
			Возврат Прокси().GetRussianEnterpriseList(пListOptions, ВетисCerberusEnterprise.Enterprise(пfiltr));
		КонецЕсли;
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "GetRussianEnterpriseList");
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки предприятий, зарегистрированных на территории Российской Федерации.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  пfiltr - Структура - отбор
//   UUID - Уникальный идентификатор версии записи предприятия в реестре Россельхознадзора. bs:UUID
//   GUID - Уникальный глобальный идентификатор в реестре Россельхознадзора. bs:UUID
//   name - Название предприятия. bs:String255
//   address - Адрес предприятия. ikar:Address
//    region - Регион Российской Федерации. ikar:Region	0..1
//    district - Район региона Российской Федерации. При поиске по району указывать регион не обязательно. ikar:District
//    locality - Населённый пункт регионального подчинения. По населённым пунктам районного подчинения поиск не осуществляется; При поиске обязательно также указывать регион. ikar:Locality
//  пItem - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//  Булево - Ложь значит список пройден весь
Функция GetRussianEnterpriseListСледующий(пfiltr = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//Если Ветис.Настройки_ОберткаHttp() Тогда
	//	Возврат ВетисRegistry.GetRussianEnterpriseListСледующий(пfiltr, пItem, пПараметры, пОтказ, пОшибка);
	//КонецЕсли;
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		Если пfiltr = Неопределено Тогда
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions");
		Иначе
			пПараметры.Вставить("Enterprise", ВетисCerberusEnterprise.Enterprise(пfiltr));
			пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.Enterprise");
		КонецЕсли;
		GetListСледующийИнициализация("GetRussianEnterpriseList", "enterprise", "", пПараметры);
	КонецЕсли;
	
	Возврат GetListСледующий(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции

// Предназначена для получения изменений в списке российских предприятий за указанный период времени
// Используется самостоятельно в цикле Пока.
// Параметры:
//  beginDate - Начальная дата интервала xs:dateTime
//  endDate - Конечная дата интервала xs:dateTime
//  пItem - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetRussianEnterpriseChangesListСледующий(beginDate, endDate = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//Если Ветис.Настройки_ОберткаHttp() Тогда
	//	Возврат ВетисRegistry.getRussianEnterpriseChangesListСледующий(beginDate, endDate, пItem, пПараметры, пОтказ, пОшибка);
	//КонецЕсли;
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		пПараметры.Вставить("DateInterval", ВетисBase.DateInterval(beginDate, endDate));
		пПараметры.Вставить("СтрокаПараметров", "пПараметры.ListOptions, пПараметры.DateInterval");
		GetListСледующийИнициализация("GetRussianEnterpriseChangesList", "enterprise", "", пПараметры);
	КонецЕсли;
	
	Возврат GetListСледующий(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции


// Предназначена для выборки предприятий, подчиненных ХС.
// Этой функции нет в сервисе, название выдуманное
// Используется самостоятельно в цикле Пока.
// Параметры:
//  businessEntityGuid - guid ХС
//  пItem - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetActivityLocationListСледующий(businessEntityGuid, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		пПараметры.Вставить("List", Новый Массив);
		пПараметры.Вставить("Индекс", 0);
		_Entity = GetBusinessEntityByGuid(businessEntityGuid, пОтказ, пОшибка);
		Если пОтказ = Истина Тогда Возврат Ложь; КонецЕсли;
		Для Каждого _Location из _Entity.activityLocation Цикл
			_Enterprise = GetEnterpriseByGuid(_Location.enterprise.guid, пОтказ, пОшибка);
			Если пОтказ = Истина Тогда Возврат Ложь; КонецЕсли;
			пПараметры.List.Добавить(_Enterprise);
		КонецЦикла;
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
	КонецЕсли;
	
	Если пПараметры.Индекс >= пПараметры.List.Количество() Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.List[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


Функция GetListСледующий(Item, пПараметры, пОтказ = Ложь, пОшибка = "")
	
	Перем ListResponse;
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Вычислить(пПараметры.СтрокаВызова);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ветис.Журнал_ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), пПараметры.ИмяОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция GetListСледующийИнициализация(пИмяОперации, пИмяКоллекции, пИмяСвойства = "", пПараметры)
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	пПараметры.Вставить("ListOptions", ВетисBase.ListOptions(?(пПараметры.Свойство("count"), пПараметры.count, Неопределено)));
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ИмяОперации", пИмяОперации);
	пПараметры.Вставить("СтрокаПолученияЭлементаКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства));
	пПараметры.Вставить("СтрокаВызова", "Прокси()."+пИмяОперации+"("+?(пПараметры.Свойство("СтрокаПараметров"), пПараметры.СтрокаПараметров, "пПараметры.ListOptions")+")");
	
КонецФункции

Функция Прокси()
	
	_Прокси = Ветис.Прокси("EnterpriseService");
	
	Возврат _Прокси;
	
КонецФункции
