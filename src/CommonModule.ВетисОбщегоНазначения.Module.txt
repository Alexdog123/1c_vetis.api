
Функция Десериализовать(пФабрика, пТекст, пТип) Экспорт
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Возврат пФабрика.ПрочитатьXML(_Чтение, пТип);
	
КонецФункции

Функция Сериализовать(пФабрика, пОбъект, пЛокальноеИмя = Неопределено, пURI = Неопределено) Экспорт
	
	_ЗаписьXML = Новый ЗаписьXML;  
	_ЗаписьXML.УстановитьСтроку("UTF-8");  
	
	Если пЛокальноеИмя = Неопределено Тогда
		пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);  
	Иначе
		пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект, пЛокальноеИмя, пURI);  
	КонецЕсли;
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПривестиКТипу(пОбъект, пИмя, пURI, пФабрика = Неопределено, пВерсия = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисXSD.ФабрикаОбщая(пВерсия);
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	_Строка = Сериализовать(_Фабрика, пОбъект, пИмя, пURI);
	
	Возврат Десериализовать(_Фабрика, _Строка, _Фабрика.Тип(пURI, пИмя));
	
КонецФункции


Процедура УстановитьЗначение(пОбъект, пИмяСвойства, пЗначение, пТекстОшибки = Неопределено) Экспорт
	
	Если НЕ пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено И НЕ пЗначение = Неопределено Тогда
		пОбъект[пИмяСвойства] = пЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначение(пОбъект, пИмяСвойства, ПоУмолчанию = Неопределено) Экспорт
	
	Возврат ?(пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, пОбъект[пИмяСвойства]);
	
КонецФункции


Функция ВывестиСообщение(пТекст, пКонтекст = "") Экспорт
	
	ВетисЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + пТекст);
	
КонецФункции

Функция ВывестиСообщениеОбОшибке(пИнформацияОбОшибке, пКонтекст = "", пКратко = Ложь) Экспорт
	
	Если пКратко Тогда
		_Текст = КраткоеПредставлениеОшибки(пИнформацияОбОшибке);
	Иначе
		_Текст = ПодробноеПредставлениеОшибки(пИнформацияОбОшибке);
	КонецЕсли;
	
	ВетисЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + _Текст);
	
КонецФункции

Функция ПолучитьНакопленныеСообщения(пУдалять = Истина) Экспорт
	
	ТекстОшибки = "";
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(пУдалять);
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстОшибки = ТекстОшибки + Сообщение.Текст + Символы.ПС;
	КонецЦикла;

	Возврат ТекстОшибки;
	
КонецФункции


Функция ВремяВетис(пДата = Неопределено) Экспорт
	
	Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата), "GMT+3");
	
КонецФункции

Функция ВремяБД(пДата = Неопределено) Экспорт
	
	Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата), "GMT+5");
	
КонецФункции

Функция ПолучитьИтератор(List, пИмя) Экспорт
	
	Если ТипЗнч(List) = Тип("ОбъектXDTO") Тогда
		Если List.Свойства().Получить(пИмя) = Неопределено Тогда
			Возврат Новый Массив;
		Иначе
			Если ТипЗнч(List[пИмя]) = Тип("СписокXDTO") Тогда
				Возврат List[пИмя];
			Иначе
				_Список = Новый Массив;
				_Список.Добавить(List[пИмя]);
				Возврат _Список;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ListRequestСледующий(ListRequest, ListResponse) Экспорт
	
	Если ListRequest.listOptions.offset + ListRequest.ListOptions.count >= Число(ListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		ListRequest.listOptions.offset = ListRequest.listOptions.offset + ListRequest.ListOptions.count;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция Создать(пИмя, пURI, пФабрика = Неопределено, пВерсия = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисXSD.ФабрикаОбщая(пВерсия);
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	Возврат _Фабрика.Создать(_Фабрика.Тип(пURI, пИмя));
	
КонецФункции

Процедура ЗаполнитьОбъект(пОбъект, value, СвойствоПоУмолчанию = "guid") Экспорт

	Если ТипЗнч(value) = Тип("Структура") Тогда
		Для каждого _value Из value Цикл
			Если НЕ _value.Значение = Неопределено Тогда
				пОбъект[_value.Ключ] = _value.Значение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		пОбъект[СвойствоПоУмолчанию] = value[СвойствоПоУмолчанию];
	ИначеЕсли НЕ value = Неопределено Тогда
		пОбъект[СвойствоПоУмолчанию] = value;
	КонецЕсли;

КонецПроцедуры

Функция СтруктураИзОбъекта(пОбъект) Экспорт
	
	Результат = Новый Структура;
	
	Для каждого _Свойство Из пОбъект.Свойства() Цикл
		
		Если ТипЗнч(пОбъект[_Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			Результат.Вставить(_Свойство.Имя, СтруктураИзОбъекта(пОбъект[_Свойство.Имя]));
		Иначе
			Результат.Вставить(_Свойство.Имя, пОбъект[_Свойство.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазрешенаОтладка(пУстановить = Неопределено) Экспорт
	
	Если пУстановить = Неопределено Тогда
		Возврат ВетисПеременные.Получить("ВетисОтладка", Ложь);
	Иначе
		ВетисПеременные.Установить("ВетисОтладка", Истина);
	КонецЕсли;
	
КонецФункции

Функция ИмяПоТипу(пТип) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(пТип).Имя;
	
КонецФункции

Функция Версия() Экспорт
	
	Возврат ВетисПеременные.Получить("ВетисВерсия", Перечисления.ВетисВерсияAPI.v1_4);
	
КонецФункции

Функция ВерсияПредставление(пПрефикс = Неопределено, пСуффикс = Неопределено) Экспорт
	
	_версия = Версия();
	
	_версия = ?(НЕ _версия = Перечисления.ВетисВерсияAPI.v1_4, ?(пПрефикс = Неопределено, "", пПрефикс) + _версия + ?(пСуффикс = Неопределено, "", пСуффикс), "");
	
	Возврат _версия;
	
КонецФункции

Функция ВерсияРавно(пЗначение) Экспорт
	
	_версия = Версия();
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		Возврат Строка(_версия) = пЗначение;
	Иначе
		Возврат _версия = пЗначение;
	КонецЕсли;
	
КонецФункции

Функция ВерсияУстановить(пЗначение) Экспорт
	
	Если ЗначениеЗаполнено(пЗначение) Тогда
		ВетисПеременные.Установить("ВетисВерсия", пЗначение);
	Иначе
		ВетисПеременные.Установить("ВетисВерсия", Перечисления.ВетисВерсияAPI.v1_4);
	КонецЕсли;
	
КонецФункции
