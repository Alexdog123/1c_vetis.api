
Функция Десериализовать(пФабрика, пТекст, пТип) Экспорт
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Возврат пФабрика.ПрочитатьXML(_Чтение, пТип);
	
КонецФункции

Функция Сериализовать(пФабрика, пОбъект, пЛокальноеИмя = Неопределено, пURI = Неопределено) Экспорт
	
	_ЗаписьXML = Новый ЗаписьXML;  
	_ЗаписьXML.УстановитьСтроку("UTF-8");  
	
	Если пЛокальноеИмя = Неопределено Тогда
		пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);  
	Иначе
		пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект, пЛокальноеИмя, пURI);  
	КонецЕсли;
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПривестиКТипу(пОбъект, пИмя, пURI, пФабрика = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисXSD.ФабрикаОбщая();
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	_Строка = Сериализовать(_Фабрика, пОбъект, пИмя, пURI);
	
	Возврат Десериализовать(_Фабрика, _Строка, _Фабрика.Тип(пURI, пИмя));
	
КонецФункции


Функция ВывестиСообщение(пТекст, пКонтекст = "") Экспорт
	
	ВетисЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + пТекст);
	
КонецФункции

Функция ВывестиСообщениеОбОшибке(пИнформацияОбОшибке, пКонтекст = "", пКратко = Ложь) Экспорт
	
	Если пКратко Тогда
		_Текст = КраткоеПредставлениеОшибки(пИнформацияОбОшибке);
	Иначе
		_Текст = ПодробноеПредставлениеОшибки(пИнформацияОбОшибке);
	КонецЕсли;
	
	ВетисЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + _Текст);
	
КонецФункции

Функция ПолучитьНакопленныеСообщения(пУдалять = Истина) Экспорт
	
	ТекстОшибки = "";
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(пУдалять);
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстОшибки = ТекстОшибки + Сообщение.Текст + Символы.ПС;
	КонецЦикла;

	Возврат ТекстОшибки;
	
КонецФункции


Функция ПолучитьИтератор(List, пИмя) Экспорт
	
	Если ТипЗнч(List) = Тип("ОбъектXDTO") Тогда
		Если List.Свойства().Получить(пИмя) = Неопределено Тогда
			Возврат Новый Массив;
		Иначе
			Если ТипЗнч(List[пИмя]) = Тип("СписокXDTO") Тогда
				Возврат List[пИмя];
			Иначе
				_Список = Новый Массив;
				_Список.Добавить(List[пИмя]);
				Возврат _Список;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Создать(пИмя, пURI = Неопределено, пФабрика = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисXSD.ФабрикаОбщая();
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	Если ТипЗнч(пИмя) = Тип("Строка") Тогда
		Возврат _Фабрика.Создать(_Фабрика.Тип(пURI, пИмя));
	Иначе
		Возврат _Фабрика.Создать(пИмя);
	КонецЕсли;
	
КонецФункции


Процедура УстановитьЗначение(пОбъект, пЗначение, пИмяСвойства = "guid", пФункцияЗначения = Неопределено) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Структура") Тогда
		
		Для каждого _Элемент Из пЗначение Цикл
			_ИмяСвойства = _Элемент.Ключ;
			_Значение = _Элемент.Значение;
			Если НЕ _Значение = Неопределено Тогда
				Если пОбъект[_ИмяСвойства] = Неопределено Тогда
					_ЗначениеХ = Создать(пОбъект.Свойства().Получить(_ИмяСвойства).Тип);
					Если ТипЗнч(_ЗначениеХ) = Тип("ОбъектXDTO") Тогда
						пОбъект[_ИмяСвойства] = _ЗначениеХ;
					КонецЕсли;
				КонецЕсли;
				Если ТипЗнч(пОбъект[_ИмяСвойства]) = Тип("ОбъектXDTO") Тогда
					УстановитьЗначение(пОбъект[_ИмяСвойства], _Значение, _ИмяСвойства, пФункцияЗначения);
				Иначе
					УстановитьЗначение(пОбъект, _Значение, _ИмяСвойства, пФункцияЗначения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Если пФункцияЗначения = Неопределено Тогда
				пОбъект[пИмяСвойства] = пЗначение;
			Иначе
				пОбъект[пИмяСвойства] = Вычислить(пФункцияЗначения+"(пЗначение)");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено Тогда
		//выходим
		//дальше имя свойства обязательно
	ИначеЕсли ТипЗнч(пОбъект[пИмяСвойства]) = Тип("СписокXDTO") Тогда
		Если ТипЗнч(пЗначение) = Тип("Массив") Тогда
			Для каждого _Значение Из пЗначение Цикл
				Если пФункцияЗначения = Неопределено Тогда
					пОбъект[пИмяСвойства].Добавить(_Значение);
				Иначе
					пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(_Значение)"));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ пЗначение = Неопределено Тогда
			Если пФункцияЗначения = Неопределено Тогда
				пОбъект[пИмяСвойства].Добавить(пЗначение);
			Иначе
				пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(пЗначение)"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ пЗначение = Неопределено Тогда
		Если пФункцияЗначения = Неопределено Тогда
			пОбъект[пИмяСвойства] = пЗначение;
		Иначе
			пОбъект[пИмяСвойства] = Вычислить(пФункцияЗначения+"(пЗначение)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначение(пОбъект, пИмяСвойства, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Структура") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Возврат пОбъект[пИмяСвойства];
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Возврат пОбъект[пИмяСвойства];
		КонецЕсли;
		
	ИначеЕсли пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено Тогда
		//выходим
		//дальше имя свойства обязательно
	ИначеЕсли ТипЗнч(пОбъект[пИмяСвойства]) = Тип("СписокXDTO") Тогда
		_Таблица = Новый ТаблицаЗначений;
		Для каждого _Свойство Из пОбъект.Свойства() Цикл
			_Таблица.Колонки.Добавить(_Свойство.Имя);
		КонецЦикла;
		Для каждого _ОбъектСтрока Из пОбъект[пИмяСвойства] Цикл
			_ТаблицаСтрока = _Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(_ТаблицаСтрока, _ОбъектСтрока);
			//Для каждого _Свойство Из пОбъект.Свойства() Цикл
			//	_ТаблицаСтрока[_Свойство.Имя] = _ОбъектСтрока[_Свойство.Имя];
			//КонецЦикла;
		КонецЦикла;
	Иначе
		Возврат пОбъект[пИмяСвойства];
	КонецЕсли;
	
	Возврат ПоУмолчанию;
	
КонецФункции

Функция ЕстьСвойство(пОбъект, пИмяСвойства) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Структура") Тогда
		Возврат пОбъект.Свойство(пИмяСвойства);
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат пОбъект.Свойство(пИмяСвойства);
		
	Иначе
		Возврат НЕ пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено;
		
	КонецЕсли;
	
КонецФункции


//Отладка работает только в текущем сеансе
Функция РазрешенаОтладка(пУстановить = Неопределено) Экспорт
	
	Если пУстановить = Неопределено Тогда
		Возврат ВетисПеременные.Получить("ВетисОтладка", Ложь);
	Иначе
		ВетисПеременные.Установить("ВетисОтладка", пУстановить);
	КонецЕсли;
	
КонецФункции


Функция ВремяВетис(пДата = Неопределено) Экспорт
	
	#Если МобильноеПриложениеСервер Тогда
		Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата));
	#Иначе
		Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата), "GMT+2");
	#КонецЕсли
	
КонецФункции

Функция ВремяБД(пДата = Неопределено) Экспорт
	//похоже время в шлюзе конвертируется
	
	//Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата), "GMT-2");
	Возврат ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
КонецФункции


Процедура УдалитьПомеченныеОбъекты(пИмяТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	"+пИмяТаблицы+" КАК _Таблица
	|ГДЕ
	|	Истина
	|	И ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			УдалитьПоСсылке(Выборка.Ссылка);
		Исключение
			ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПоСсылке(пСсылка, пРодитель = Неопределено) Экспорт
	
	_Ссылки = Новый Массив;
	_Ссылки.Добавить(пСсылка);
	
	_ТабСсылок = НайтиПоСсылкам(_Ссылки);
	
	_МассивНайденных = _ТабСсылок.НайтиСтроки(Новый Структура("Ссылка", пСсылка));
	Если _МассивНайденных.Количество() = 0 Тогда
		_Объект = пСсылка.ПолучитьОбъект();
		УдалитьДанные(_Объект);
	Иначе
		_МожноУдалять = Истина;
		Для каждого _Найденная Из _МассивНайденных Цикл
			Если _Найденная.Данные = пРодитель Тогда
				Продолжить;
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Найденная.Метаданные) Тогда
				_мз = РегистрыСведений[_Найденная.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(_мз, _Найденная.Данные);
				Попытка
					_мз.Удалить();
				Исключение
					ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "УдалитьПоСсылке:"+_Найденная.Метаданные.Имя);
					_МожноУдалять = Ложь;
					Прервать;
				КонецПопытки;
				
			Иначе
				Попытка
					_ОбъектСсылка = _Найденная.Данные;
				Исключение
					ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), "УдалитьПоСсылке:"+_Найденная.Данные);
					_ОбъектСсылка = Неопределено;
					_МожноУдалять = Ложь;
					Прервать;
				КонецПопытки;
				
				Если НЕ _ОбъектСсылка = Неопределено Тогда
					УдалитьПоСсылке(_ОбъектСсылка, пСсылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если _МожноУдалять Тогда
			_Объект = пСсылка.ПолучитьОбъект();
			УдалитьДанные(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанные(Данные, пЗагрузка = Истина) Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные.ОбменДанными.Загрузка = пЗагрузка = Истина;
	
	Попытка
		Данные.Удалить();
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке(), Данные.Ссылка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры
