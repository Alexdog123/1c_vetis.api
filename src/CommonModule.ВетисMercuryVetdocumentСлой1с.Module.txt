
Функция VetDocumentForm(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentForm") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT61();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT62();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT63();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentForm_CERTCU1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_NOTE4() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT5I() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT61() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT62() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT63() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentStatus(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentStatus") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentStatus_CONFIRMED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_WITHDRAWN() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_UTILIZED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_INCOMING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentType_INCOMING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_OUTGOING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResult(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryInspectionResult") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_MISMATCH() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecision(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryDecision") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryDecision_ACCEPT_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_PARTIALLY() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_RETURN_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//начиная с v2.0
Функция TransportInfo(value) Экспорт
	
	Если ТипЗнч(value) = Тип(ВетисИмяСправочника.Transport("СправочникСсылка")) Тогда
		
		_transportType = ВетисDictionaryСлой1с.TransportType(value.ТипТранспорта);
		
		_transportNumber = ВетисMercuryVetdocument_2_0.TransportNumber();
		
		Если _transportType = ВетисКонстанты.TransportType_Автомобильный() Тогда
			_transportNumber.vehicleNumber = value.ГосударственныйНомер;
			_transportNumber.trailerNumber = value.ГосударственныйНомерПрицепа;
		Иначе
			_transportNumber.vehicleNumber = value.ГосударственныйНомер;
		КонецЕсли;
		
		_Объект = ВетисMercuryVetdocument_2_0.TransportInfo(_transportType, _transportNumber);
		
	Иначе
		
		_ТипТранспорта = ВетисDictionaryСлой1с.TransportType(value.transportType);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	_Таблица.Ссылка
		|ИЗ
		|	Справочник."+ВетисИмяСправочника.Transport()+" КАК _Таблица
		|ГДЕ
		|	НЕ _Таблица.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА _Таблица.ТипТранспорта = ЗНАЧЕНИЕ(Перечисление.ВетисTransportType.ПустаяСсылка)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВетисTransportType.Автомобильный) = &ТипТранспорта
		|			ИНАЧЕ _Таблица.ТипТранспорта = &ТипТранспорта
		|		КОНЕЦ
		|	И _Таблица.ГосударственныйНомер = &Номер
		//|//онп	И _Таблица.ГосударственныйНомерПрицепа = &НомерПрицепа
		|	И ИСТИНА";
		
		Запрос.УстановитьПараметр("Номер", value.transportNumber.vehicleNumber);
		Запрос.УстановитьПараметр("НомерПрицепа", value.transportNumber.trailerNumber);
		Запрос.УстановитьПараметр("ТипТранспорта", _ТипТранспорта);
		
		//Если ЗначениеЗаполнено(value.transportNumber.trailerNumber) Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//онп", "");
		//КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			_Объект = Выборка.Ссылка;
		Иначе
			_Объект = ПредопределенноеЗначение(ВетисИмяСправочника.Transport("Справочник","ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция VetDocument(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент") Тогда
		Возврат value.uuid;
	ИначеЕсли ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		Возврат Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту(value.uuid);
	Иначе
		Возврат Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту(value);
	КонецЕсли;
	
КонецФункции

Функция VetDocumentКонвертировать(value1, value2) Экспорт
	
	Если ВетисXSD.Версия_2_0() Тогда
		VetDocumentКонвертировать_20(value1, value2);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(value1) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value1) = Тип("ДанныеФормыСтруктура") Тогда
		
		_док = value1;
		_всд = value2;
		
		_док.uuid     = _всд.uuid;
		
		_док.СерияВСД = _всд.issueSeries;
		_док.НомерВСД = _всд.issueNumber;
		_док.ДатаВСД  = ВетисОбщегоНазначения.ВремяБД(_всд.issueDate);
		_док.Тип      = VetDocumentType(_всд.type);
		_док.Статус   = VetDocumentStatus(_всд.status);
		_док.Форма    = VetDocumentForm(_всд.form);
		
		_док.Отправитель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignor.businessEntity);
		_док.Получатель  = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignee.businessEntity);
		
		_док.ОтправительПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignor.enterprise);
		_док.ПолучательПредприятие  = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignee.enterprise);
		
		_строкаВСД = ?(_док.ВСД.Количество() = 0, _док.ВСД.Добавить(), _док.ВСД[0]);
		
		//_строкаВСД.Серия    = _всд.issueSeries;
		//_строкаВСД.Номер    = _всд.issueNumber;
		//_строкаВСД.Дата     = _всд.issueDate;
		//_строкаВСД.Тип      = VetDocumentType(_всд.type);
		//_строкаВСД.Статус   = VetDocumentStatus(_всд.status);
		//_строкаВСД.Форма    = VetDocumentForm(_всд.form);
		_строкаВСД.БлагополучиеМестности  = _всд.locationProsperity;
		_строкаВСД.Ветсанэкспертиза       = _всд.cargoExpertized;
		//_строкаВСД.ГосударственныйВетврач = _всд.confirmedBy.fio;
		_строкаВСД.ГосударственныйВетврачДата = ?(_всд.confirmedDate = Неопределено, _строкаВСД.ГосударственныйВетврачДата, ВетисОбщегоНазначения.ВремяБД(_всд.confirmedDate));
		//_строкаВСД.ДатаОбновления         = ?(_всд.lastUpdateDate = Неопределено, _строкаВСД.ДатаОбновления, ВетисОбщегоНазначения.ВремяБД(_всд.lastUpdateDate));
		_строкаВСД.Иммунизация            = ?(_всд.immunizationInfo = Неопределено, _строкаВСД.Иммунизация, _всд.immunizationInfo);
		_строкаВСД.КарантированиеДней     = ?(_всд.quarantineDays = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantineDays);
		_строкаВСД.КарантированиеМесто    = ?(_всд.quarantinePlace = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantinePlace);
		_строкаВСД.КонтрольГосВетврачем   = ?(_всд.cargoInspected = Неопределено, _строкаВСД.КонтрольГосВетврачем, _всд.cargoInspected);
		_строкаВСД.ЛабораторныеИсследования = _всд.expertiseInfo;
		_строкаВСД.НазначениеГруза        = ВетисArgusCommonСлой1с.Purpose(_всд.purpose);
		_строкаВСД.ОсобыеОтметки          = _всд.specialMarks;
		_строкаВСД.ПредыдущиеВСД          = ?(_всд.precedingVetDocuments = Неопределено, _строкаВСД.ПредыдущиеВСД, _всд.precedingVetDocuments);
		
		_строкаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
		
		_строкаТТН.Серия          = _всд.waybillSeries;
		_строкаТТН.Номер          = _всд.waybillNumber;
		_строкаТТН.Дата           = ВетисОбщегоНазначения.ВремяБД(_всд.waybillDate);
		_строкаТТН.Тип            = ВетисArgusShipmentСлой1с.WaybillType(_всд.waybillType);
		_строкаТТН.Посредник      = ?(_всд.broker = Неопределено, _строкаТТН.Посредник, ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.broker));
		_строкаТТН.СпособХранения = ВетисArgusShipmentСлой1с.TransportationStorageType(_всд.transportStorageType);
		_строкаТТН.Транспорт      = ВетисArgusShipmentСлой1с.TransportInfo(_всд.transportInfo);
		
		_строкаСЖ = ?(_док.Товары.Количество() = 0, _док.Товары.Добавить(), _док.Товары[0]);
		
		BatchКонвертировать(_строкаСЖ, _всд.batch);
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
		
		_всд = value1;
		_док = value2;
		
		_СтрокаВСД = _док.ВСД[0];
		_СтрокаСЖ  = _док.Товары[0];
		_СтрокаТТН = _док.ТТН[0];
		
		_consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Отправитель);
		_consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ОтправительПредприятие);
		
		_consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Получатель);
		_consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ПолучательПредприятие);
		
		_всд.issueSeries        = _док.СерияВСД;
		_всд.issueNumber        = _док.НомерВСД;
		_всд.issueDate          = ВетисОбщегоНазначения.ВремяВетис(_док.ДатаВСД);
		
		_всд.form               = VetDocumentForm(_док.Форма);
		//_всд.type               = VetDocumentType(_док.Тип);
		_всд.consignor          = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
		_всд.consignee          = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
		_всд.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
		_всд.broker             = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_всд.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_всд.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		_всд.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
		_всд.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
		_всд.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
		_всд.confirmedBy        = ВетисПараметрыСоединения.Врач();
		_всд.confirmedDate      = ВетисОбщегоНазначения.ВремяВетис(_док.ДатаВСД);
		_всд.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		_всд.quarantinePlace    = _СтрокаВСД.КарантированиеМесто;
		_всд.quarantineDays     = _СтрокаВСД.КарантированиеДней;
		_всд.immunizationInfo   = _СтрокаВСД.Иммунизация;
		//_всд.precedingVetDocuments = _СтрокаВСД.ПредыдущиеВСД;
		//_всд.importPermit       = _ВетисArgusCommon.Document(всдРазрешениеНаВвозНазвание, всдРазрешениеНаВвозСерия, всдРазрешениеНаВвозНомер, всдРазрешениеНаВвозДата);
		//_всд.transferPermit     = _ВетисArgusCommon.Document(всдРазрешениеНаВывозНазвание, всдРазрешениеНаВывозСерия, всдРазрешениеНаВывозНомер, всдРазрешениеНаВывозДата);
		_всд.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		
		_всд.batch = ВетисMercuryVetdocument.Batch();
		
		BatchКонвертировать(_всд.batch, _СтрокаСЖ);
		
	КонецЕсли;
	
КонецФункции

Функция VetDocumentКонвертировать_20(value1, value2) Экспорт
	
	Если ТипЗнч(value1) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value1) = Тип("ДанныеФормыСтруктура") Тогда
		//сделать: привести в порядок обратную конверсию VetDocument
		_док = value1;
		_всд = value2;
		
		_док.uuid     = _всд.uuid;
		
		_док.СерияВСД = _всд.issueSeries;
		_док.НомерВСД = _всд.issueNumber;
		_док.ДатаВСД  = ВетисОбщегоНазначения.ВремяБД(_всд.issueDate);
		_док.Тип      = VetDocumentType(_всд.vetDType);
		_док.Статус   = VetDocumentStatus(_всд.vetDStatus);
		_док.Форма    = VetDocumentForm(_всд.vetDForm);
		
		_док.Отправитель = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.consignor.businessEntity);
		_док.Получатель  = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.consignee.businessEntity);
		
		_док.ОтправительПредприятие = ВетисDictionaryСлой1с.Enterprise(_всд.certifiedConsignment.consignor.enterprise);
		_док.ПолучательПредприятие  = ВетисDictionaryСлой1с.Enterprise(_всд.certifiedConsignment.consignee.enterprise);
		
		_СтрокаВСД = ?(_док.РезультатыОсмотра.Количество() = 0, _док.РезультатыОсмотра.Добавить(), _док.РезультатыОсмотра[0]);
		_СтрокаВСД.НазначениеГруза        = ВетисDictionaryСлой1с.Purpose(_всд.authentication.purpose);
		_СтрокаВСД.КонтрольГосВетврачем   = _всд.authentication.cargoInspected;
		_СтрокаВСД.Ветсанэкспертиза       = ВетисDictionaryСлой1с.ResearchResult(_всд.authentication.cargoExpertized);
		_СтрокаВСД.БлагополучиеМестности  = _всд.authentication.locationProsperity;
		_СтрокаВСД.ОсобыеОтметки          = _всд.authentication.specialMarks;
		
		_док.Иммунизация.Очистить();
		Для каждого _immunization Из _всд.authentication.immunization Цикл
			_Строка = _док.Иммунизация.Добавить();
			_Строка.Заболевание  = _immunization.disease.name;
			_Строка.Вакцина      = ?(ЗначениеЗаполнено(_immunization.medicinalDrug.ID), _immunization.medicinalDrug.ID, _immunization.medicinalDrug.name);
			_Строка.СрокДействия = _immunization.effectiveBeforeDate;
		КонецЦикла;
		
		_док.ЛабораторныеИсследования.Очистить();
		Для каждого _laboratoryResearch Из _всд.authentication.laboratoryResearch Цикл
			_Строка = _док.ЛабораторныеИсследования.Добавить();
			_Строка.ИДПартии               = _laboratoryResearch.batchID;
			_Строка.НомерЭкспертизы        = _laboratoryResearch.expertiseID;
			_Строка.ПоказательБезопасности = _laboratoryResearch.indicator.name;
			_Строка.Заболевание            = _laboratoryResearch.disease.name;
			_Строка.МетодИсследования      = _laboratoryResearch.method.name;
			_Строка.РезультатИсследования  = ВетисDictionaryСлой1с.ResearchResult(_laboratoryResearch.result);
			_Строка.Заключение             = _laboratoryResearch.conclusion;
		КонецЦикла;
		
		_СтрокаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
		_СтрокаТТН.Посредник      = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.broker);
		_СтрокаТТН.СпособХранения = ВетисDictionaryСлой1с.TransportationStorageType(_всд.certifiedConsignment.transportStorageType);
		_СтрокаТТН.Транспорт      = TransportInfo(_всд.certifiedConsignment.transportInfo);
		
		_док.МаршрутСледования.Очистить();
		Для каждого _point Из _всд.certifiedConsignment.shipmentRoute Цикл
			_Строка = _док.МаршрутСледования.Добавить();
			_Строка.ПунктПерегрузки = _point.location.name;
			_Строка.Предприятие     = ВетисDictionaryСлой1с.Enterprise(_point.enterprise);
			_Строка.ЕстьПерегрузка  = _point.transshipment;
			_Строка.Транспорт       = TransportInfo(_point.nextTransport);
		КонецЦикла;
		
		_СтрокаСЖ = ?(_док.Товары.Количество() = 0, _док.Товары.Добавить(), _док.Товары[0]);
		
		BatchКонвертировать(_СтрокаСЖ, _всд.certifiedConsignment.batch);
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
		
		_всд = value1;
		_док = value2;
		
		_СтрокаВСД = ?(_док.РезультатыОсмотра.Количество() = 0, _док.РезультатыОсмотра.Добавить(), _док.РезультатыОсмотра[0]);
		_СтрокаСЖ  = ?(_док.Товары.Количество() = 0, _док.Товары.Добавить(), _док.Товары[0]);
		_СтрокаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
		
		_consignorBusinessEntity = ВетисDictionaryСлой1с.BusinessEntity(_док.Отправитель);
		_consignorEnterprise     = ВетисDictionaryСлой1с.Enterprise(_док.ОтправительПредприятие);
		
		_consigneeBusinessEntity = ВетисDictionaryСлой1с.BusinessEntity(_док.Получатель);
		_consigneeEnterprise     = ВетисDictionaryСлой1с.Enterprise(_док.ПолучательПредприятие);
		
		_batch = ВетисMercuryVetdocument_2_0.Batch();
		
		BatchКонвертировать(_batch, _СтрокаСЖ);
		
		_всд.issueSeries          = _док.СерияВСД;
		_всд.issueNumber          = _док.НомерВСД;
		_всд.issueDate            = ВетисОбщегоНазначения.ВремяВетис(_док.ДатаВСД);
		_всд.vetDForm             = VetDocumentForm(_док.Форма);
		
		_всд.certifiedConsignment = ВетисMercuryVetdocument_2_0.CertifiedConsignment(
			ВетисDictionary_2_0.BusinessMember(_consignorBusinessEntity, _consignorEnterprise),
			ВетисDictionary_2_0.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise),
			_batch,
			ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_СтрокаТТН.Посредник)),
			TransportInfo(_СтрокаТТН.Транспорт),
			ВетисDictionaryСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения)
			);
		
		_всд.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
			ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
			_СтрокаВСД.КонтрольГосВетврачем,
			ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза),
			_СтрокаВСД.БлагополучиеМестности,
			_СтрокаВСД.ОсобыеОтметки
			);
		
		_всд.statusChange.Добавить(ВетисMercuryVetdocument_2_0.VetDocumentStatusChange(
			ВетисКонстанты.VetDocumentStatus_CONFIRMED(),
			ВетисПараметрыСоединения.Врач(),
			ВетисОбщегоНазначения.ВремяВетис()
			));
		
	КонецЕсли;
	
КонецФункции

Функция BatchКонвертировать(value1, value2) Экспорт
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисBase = ?(_Версия20, ВетисDictionary_2_0, ВетисBase);
	_ВетисArgusProduction = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusProduction);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	//пока фиксированный (v2.0)
	_уровеньУпаковки = ВетисПредопределенные.Получить("PackageLevelType", Перечисления.ВетисPackageLevelType.Потребительский);
	
	Если ТипЗнч(value1) = Тип("ДокументТабличнаяЧастьСтрока.ВетисВетеринарноСопроводительныйДокумент.Товары")
		ИЛИ ТипЗнч(value1) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		_СтрокаСЖ = value1;
		_batch    = value2;
		
		_строкаСЖ.SubProductGuid       = _batch.subProduct.guid;
		_строкаСЖ.ProductItemName      = _batch.productItem.name;
		_строкаСЖ.ProductItemGuid      = _batch.productItem.guid;
		
		_строкаСЖ.НоменклатурнаяГруппа = _ВетисArgusProductionСлой1с.SubProduct(_batch.subProduct);
		_строкаСЖ.Количество           = _batch.volume;
		_строкаСЖ.ЕдиницаИзмерения     = _ВетисArgusCommonСлой1с.Unit(_batch.unit);
		_строкаСЖ.ДатаВыработкиНачало  = _ВетисBase.ComplexDate(_batch.dateOfProduction.firstDate);
		_строкаСЖ.ДатаВыработкиКонец   = _ВетисBase.ComplexDate(_batch.dateOfProduction.secondDate);
		_строкаСЖ.СрокГодностиНачало   = _ВетисBase.ComplexDate(_batch.expiryDate.firstDate);
		_строкаСЖ.СрокГодностиКонец    = _ВетисBase.ComplexDate(_batch.expiryDate.secondDate);
		_строкаСЖ.Скоропортящаяся      = _batch.perishable;
		_строкаСЖ.Собственник          = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_batch.owner);
		_строкаСЖ.НекачественныйГруз   = _batch.lowGradeCargo;
		
		Если _Версия20 Тогда
			_package = ВетисDictionaryСлой1с.PackageList(_batch.packageList, _уровеньУпаковки);
			_строкаСЖ.Упаковка             = ВетисDictionaryСлой1с.Package(_package);
			_строкаСЖ.КоличествоМест       = _package.quantity;
			_строкаСЖ.ПроизводительПредприятие = _ВетисCerberusEnterpriseСлой1с.Producer(_batch.origin.producer);
			_строкаСЖ.Номенклатура         = _ВетисArgusProductionСлой1с.ProductItem(_batch.productItem, _строкаСЖ.ПроизводительПредприятие);
		Иначе
			_строкаСЖ.Упаковка             = _ВетисArgusCommonСлой1с.PackingForm(_batch.packingList);
			_строкаСЖ.КоличествоМест       = _batch.packingAmount;
			_строкаСЖ.СтранаПроисхождения  = _ВетисIkarСлой1с.Country(_batch.countryOfOrigin);
			_строкаСЖ.ПроизводительПредприятие = _ВетисCerberusEnterpriseСлой1с.Producer(_batch.producerList);
			_строкаСЖ.Номенклатура         = _ВетисArgusProductionСлой1с.ProductItem(_batch.productItem, _строкаСЖ.ПроизводительПредприятие);
			//_строкаСЖ.Маркировка           = ProductMarking(_batch.productMarkingList);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументТабличнаяЧастьСтрока.ВетисВетеринарноСопроводительныйДокумент.Товары")
		ИЛИ ТипЗнч(value2) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		_batch    = value1;
		_СтрокаСЖ = value2;
		
		//сделать: проверить конверсию номенклатуры
		
		_productItem = _ВетисArgusProductionСлой1с.ProductItem(_СтрокаСЖ.Номенклатура, _СтрокаСЖ.ПроизводительПредприятие);//Структура
		_subProduct  = _ВетисArgusProductionСлой1с.SubProduct(_СтрокаСЖ.НоменклатурнаяГруппа);
		_product     = "";
		_productType = ВетисКонстанты.ProductType_МясоИМясопродукты();
		
		Если ЗначениеЗаполнено(_productItem.guid) Тогда
			_productItem = _ВетисProductService.GetProductItemByGuid(_productItem.guid);//ОбъектXDTO
			_subProduct  = _productItem.subProduct;
			_product     = _productItem.product;
			_productType = _productItem.productType;
			
		ИначеЕсли НЕ ПустаяСтрока(_subProduct) Тогда
			_subProduct  = _ВетисProductService.GetSubProductByGuid(_subProduct);
			_product     = _ВетисProductService.GetProductByGuid(_subProduct.productGuid);
			_productType = _product.productType;
			_productItem.name = _subProduct.name;
			
		Иначе
			//не заполнены ключевые поля, выходим
			Возврат Неопределено;
		КонецЕсли;
		
		_batch.productType      = _productType;
		_batch.product          = _ВетисArgusProduction.Product(_product.guid);
		_batch.subProduct       = _ВетисArgusProduction.SubProduct(_subProduct.guid);
		_batch.productItem      = _ВетисArgusProduction.ProductItem(_productItem.guid, _productItem.name);
		_batch.volume           = _СтрокаСЖ.Количество;
		_batch.unit             = _ВетисArgusCommon.Unit(_ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения));
		_batch.dateOfProduction = _ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.ДатаВыработкиНачало, _СтрокаСЖ.ДатаВыработкиКонец);
		_batch.expiryDate       = _ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.СрокГодностиНачало, _СтрокаСЖ.СрокГодностиКонец);
		_batch.perishable       = _СтрокаСЖ.Скоропортящаяся;
		_batch.lowGradeCargo    = _СтрокаСЖ.НекачественныйГруз;
		_batch.owner            = _ВетисCerberusEnterprise.BusinessEntity(_ВетисCerberusEnterpriseСлой1с.BusinessEntity(_строкаСЖ.Собственник));
		
		Если _Версия20 Тогда
			//_packingType = ВетисDictionary_2_0.PackingType(ВетисDictionaryСлой1с.PackingType(_СтрокаСЖ.Упаковка));
			//_packaging = ВетисDictionary_2_0.Packaging(_packingType, _СтрокаСЖ.КоличествоМест);
			//_batch.productItem = ВетисDictionary_2_0.ProductItem(_productItem.guid, _productItem.name, _packaging);
			//MERC13265 - В ветеринарно-сопроводительном документе должен быть указан хотя бы один производитель продукции.
			//MERC13219 - Страна происхождения продукции в ветеринарно-сопроводительном документе обязательна для заполнения.
			_batch.origin = ВетисMercuryVetdocument_2_0.BatchOrigin(
				ВетисDictionary_2_0.ProductItem(_productItem.guid, _productItem.name),
				ВетисDictionary_2_0.Country(ВетисDictionaryСлой1с.Country(_СтрокаСЖ.СтранаПроисхождения)),
				ВетисDictionary_2_0.Producer(ВетисDictionaryСлой1с.Producer(_СтрокаСЖ.ПроизводительПредприятие))
				);
			//сделать: добавить упаковки для 2.0
			_level = ВетисDictionaryСлой1с.PackageLevelType(_уровеньУпаковки);
			_packingType = ВетисDictionaryСлой1с.PackingType(_СтрокаСЖ.Упаковка);
			_batch.packageList = ВетисDictionary_2_0.PackageList(_level, _packingType, _СтрокаСЖ.КоличествоМест);
			_batch.batchID = _СтрокаСЖ.ИДПартии;
		Иначе
			//_batch.productItem      = ВетисArgusProduction.ProductItem(_productItem.guid, _productItem.name);
			_batch.packingList      = ВетисArgusCommon.PackingFormList(_ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
			_batch.packingAmount    = _СтрокаСЖ.КоличествоМест;
			_batch.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(_СтрокаСЖ.СтранаПроисхождения));
			_batch.producerList     = ВетисCerberusEnterprise.ProducerList(_ВетисCerberusEnterpriseСлой1с.Enterprise(_СтрокаСЖ.ПроизводительПредприятие));
			_batch.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(_СтрокаСЖ.Маркировка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура Синхронизировать(пСсылка = Неопределено, пХозяйствующийСубъект = Неопределено, пПредприятие = Неопределено, пТип = Неопределено, пСтатус = Неопределено) Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(ВетисXSD.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	Если пХозяйствующийСубъект = Неопределено Тогда
		_ХозяйствующийСубъект = ВетисПараметрыСоединения.ОсновнойХС();
	Иначе
		_ХозяйствующийСубъект = пХозяйствующийСубъект;
	КонецЕсли;
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ХозяйствующийСубъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК Ссылка,
	|	_Таблица.uuid КАК uuid,
	|	_Таблица.Тип КАК Тип,
	|	_Таблица.Статус КАК Статус,
	|	_Таблица.СерияВСД КАК СерияВСД,
	|	_Таблица.НомерВСД КАК НомерВСД,
	|	_Таблица.ДатаВСД КАК ДатаВСД
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.uuid = """"
	|	И (_Таблица.Отправитель = &ХС ИЛИ _Таблица.Получатель = &ХС)
	|//опо	И (_Таблица.ОтправительПредприятие = &Предприятие ИЛИ _Таблица.ПолучательПредприятие = &Предприятие)
	|//от	И _Таблица.Тип = &Тип
	|//ос	И _Таблица.Статус = &Статус
	|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("Статус", пСтатус);
	Запрос.УстановитьПараметр("Тип", пТип);
	Запрос.УстановитьПараметр("ХС", _ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", пПредприятие);
	
	Если НЕ пСтатус = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ос", "");
	КонецЕсли;
	
	Если НЕ пТип = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//от", "");
	КонецЕсли;
	
	Если НЕ пПредприятие = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//опо", "");
	КонецЕсли;
	
	_Ветки = Запрос.Выполнить().Выгрузить();
	
	Если пПредприятие = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	_Таблица.Ссылка КАК Ссылка,
		|	_Таблица.guid КАК guid
		|ИЗ
		|	РегистрСведений.ВетисСоответствие КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И _Таблица.Ссылка ССЫЛКА Справочник."+ВетисИмяСправочника.Enterprise()+"
		//только свои предприятия
		|	И _Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				_Таблица.Предприятие
		|			ИЗ
		|				РегистрСведений.ВетисПредприятияХС КАК _Таблица
		|			ГДЕ
		|				_Таблица.ХозяйствующийСубъект = &ХС)
		|	И ИСТИНА";
		Запрос.УстановитьПараметр("ХС", _ХозяйствующийСубъект);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СинхронизироватьХозяйствующийСубъектПредприятие(Выборка.guid, _issuerId, пТип, пСтатус, _Ветки);
				
			КонецЦикла;
		КонецЕсли;
	Иначе
		СинхронизироватьХозяйствующийСубъектПредприятие(_ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие), _issuerId, пТип, пСтатус, _Ветки);
		
	КонецЕсли;
	
	Для каждого _Строка Из _Ветки Цикл
		_Док = _Строка.Ссылка.ПолучитьОбъект();
		_Док.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		_Док.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьХозяйствующийСубъектПредприятие(enterpriseGuid, issuerId = Неопределено, пТип = Неопределено, пСтатус = Неопределено, пВетки) Экспорт
	
	Перем _VetDocument, _Параметры;
	
	_Тип = ВетисMercuryVetdocumentСлой1с.VetDocumentType(пТип);
	_Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(пСтатус);
	
	_Версия20 = ВетисXSD.Версия_2_0();
	
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Пока _ВетисMercuryApplications.getVetDocumentListСледующий(enterpriseGuid, issuerId, _Тип, _Статус, _VetDocument, _Параметры) Цикл
		
		_Строка = пВетки.Найти(_VetDocument.uuid, "uuid");
		
		Если _Строка = Неопределено Тогда
			_док = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
			_док.Дата = ТекущаяДата();
		ИначеЕсли Ложь
			И _Строка.Тип       = VetDocumentType(_VetDocument.type)
			И _Строка.Статус    = VetDocumentStatus(_VetDocument.status)
			И (_Строка.СерияВСД = _VetDocument.issueSeries ИЛИ _VetDocument.issueSeries = Неопределено)
			И _Строка.НомерВСД  = _VetDocument.issueNumber
			И _Строка.ДатаВСД   = ВетисОбщегоНазначения.ВремяБД(_VetDocument.issueDate)
			Тогда
			//считаем что ничего не изменилось
			пВетки.Удалить(_Строка);
			Продолжить;
		Иначе
			_док = _Строка.Ссылка.ПолучитьОбъект();
			пВетки.Удалить(_Строка);
		КонецЕсли;
		
		VetDocumentКонвертировать(_док, _VetDocument);
		
		_док.ДополнительныеСвойства.Вставить("Загрузка");
		
		_док.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Аннулировать(пСсылка, пПричина) Экспорт
	
	ВетисMercuryApplicationsСлой1с.WithdrawVetDocumentOperation(пСсылка, пПричина);
	
КонецПроцедуры
