
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СправочникСписок.ПроизвольныйЗапрос = Истина;
	СправочникСписок.ОсновнаяТаблица = ВетисИмяСправочника.ProductItem("Справочник");
	СправочникСписок.ТекстЗапроса =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Ветис.guid КАК guid,
	|	_Ветис.name КАК name,
	|	_Ветис.Описание КАК Описание
	|ИЗ
	|	Справочник."+ВетисИмяСправочника.ProductItem()+" КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа
	|	И ИСТИНА";
	
	ОтборТипПродукции = ПредопределенноеЗначение("Перечисление.ВетисProductType.МясоИМясопродукты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокПродукцииСервер();
	
	ЗаполнитьСписокВидовПродукцииСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ТипПродукцииПриИзменении(Элемент)
	
	ОтборПродукция = "";
	
	ОтборПродукцияПредставление = "";
	
	ОтборВидПродукции = "";
	
	ОтборВидПродукцииПредставление = "";
	
	ЗаполнитьСписокПродукцииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ОтборПродукцияПредставление = Элементы.Продукция.СписокВыбора.НайтиПоЗначению(ОтборПродукция).Представление;
	
	ОтборВидПродукции = "";
	
	ОтборВидПродукцииПредставление = "";
	
	ЗаполнитьСписокВидовПродукцииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ОтборВидПродукцииПредставление = Элементы.ВидПродукции.СписокВыбора.НайтиПоЗначению(ОтборВидПродукции).Представление;
	
КонецПроцедуры


&НаКлиенте
Процедура ХСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ХСОбработкаОповещения", СтандартнаяОбработка, Объект.ХозяйствующийСубъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХСОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.ХозяйствующийСубъект = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ХозяйствующийСубъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.Предприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаНайти(Команда)
	
	КомандаНайтиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСвязь(Команда)
	
	СоздатьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСписокПродукцииСервер()
	
	Перем _Product, _параметры;
	
	Если НЕ ЗначениеЗаполнено(ОтборТипПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	
	_productType = _ВетисArgusProductionСлой1с.ProductType(ОтборТипПродукции);
	
	Элементы.Продукция.СписокВыбора.Очистить();
	
	Пока _ВетисProductService.GetProductByTypeListСледующий(_productType, _Product, _параметры) Цикл
		
		Элементы.Продукция.СписокВыбора.Добавить(_product.guid, _product.name);
		
	КонецЦикла;
	
	Элементы.Продукция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовПродукцииСервер()
	
	Перем _subProduct, _параметры;
	
	Если НЕ ЗначениеЗаполнено(ОтборПродукция) Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	
	Элементы.ВидПродукции.СписокВыбора.Очистить();
	
	Пока _ВетисProductService.GetSubProductByProductListСледующий(ОтборПродукция, _subProduct, _параметры) Цикл
		
		Элементы.ВидПродукции.СписокВыбора.Добавить(_subProduct.guid, _subProduct.name);
		
	КонецЦикла;
	
	Элементы.ВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер() Экспорт
	
	ТекДанные = Объект.ВетисНоменклатура.НайтиПоИдентификатору(Элементы.ВетисНоменклатура.ТекущаяСтрока);
	
	_productType = Перечисления.ВетисProductType.Индекс(ОтборТипПродукции) + 1;
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
		КонецЦикла;
	Иначе
		ТекДанные1с = Элементы.СправочникСписок.ТекущиеДанные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
		КонецЦикла;
	Иначе
		ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаНайтиСервер()
	
	Перем _product, _subProduct, _productItem, _параметрыP;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	
	СписокВетис.Очистить();
	
	Если _Версия20 Тогда
		_параметрыPI = Неопределено;
		_businessEntity = ВетисDictionary_2_0.BusinessEntity(?(ОтборТипПродукцииИспользование, ВетисDictionaryСлой1с.BusinessEntity(Объект.ХозяйствующийСубъект), Неопределено));
		_enterprise  = ВетисDictionary_2_0.Enterprise(?(ОтборТипПродукцииИспользование, ВетисDictionaryСлой1с.Enterprise(Объект.Предприятие), Неопределено));
		_productType = ВетисDictionaryСлой1с.ProductType(?(ОтборТипПродукцииИспользование, ОтборТипПродукции, Неопределено));
		_product     = ВетисDictionary_2_0.Product(?(ОтборПродукцияИспользование, ОтборПродукция, Неопределено));
		_subProduct  = ВетисDictionary_2_0.SubProduct(?(ОтборВидПродукцииИспользование, ОтборВидПродукции, Неопределено));
		Пока ВетисProductService_2_0.GetProductItemListСледующий(_productType, _product, _subProduct, _businessEntity, _enterprise, _productItem, _параметрыPI) Цикл
			
			_СписокСтрока = СписокВетис.Добавить();
			_СписокСтрока.name = _productItem.name;
			_СписокСтрока.guid = _productItem.guid;
			_СписокСтрока.subProduct = _subProduct.guid;
			
		КонецЦикла;
	Иначе
		_productType = ВетисArgusProductionСлой1с.ProductType(?(ОтборТипПродукцииИспользование, ОтборТипПродукции, Неопределено));
		_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.Enterprise(Объект.Предприятие);
		Пока ВетисProductService.GetProductByTypeListСледующий(_productType, _product, _параметрыP) Цикл
			
			_параметрыS = Неопределено;
			Пока ВетисProductService.GetSubProductByProductListСледующий(_product.guid, _subProduct, _параметрыS) Цикл
				
				_параметрыPI = Неопределено;
				Пока ВетисProductService.GetProductItemListСледующий(_subProduct.guid, _enterpriseGuid, _productItem, _параметрыPI) Цикл
					
					_СписокСтрока = СписокВетис.Добавить();
					_СписокСтрока.name = _productItem.name;
					_СписокСтрока.guid = _productItem.guid;
					_СписокСтрока.subProduct = _subProduct.guid;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	
	СписокВетис.Сортировать("name");
		
КонецПроцедуры
