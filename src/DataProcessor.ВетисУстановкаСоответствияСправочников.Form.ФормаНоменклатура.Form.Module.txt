
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СправочникСписок.ПроизвольныйЗапрос = Истина;
	СправочникСписок.ОсновнаяТаблица = ВетисИмяСправочника.ProductItem("Справочник");
	СправочникСписок.ТекстЗапроса =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Ветис.guid КАК guid,
	|	_Ветис.name КАК name,
	|	_Ветис.Описание КАК Описание
	|{ВЫБРАТЬ
	|	Ссылка.*,
	|	Код,
	|	Наименование,
	|	guid,
	|	name,
	|	Описание}
	|ИЗ
	|	Справочник."+ВетисИмяСправочника.ProductItem()+" КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа
	|	И ИСТИНА";
	
	ОтборТипПродукции = ПредопределенноеЗначение("Перечисление.ВетисProductType.МясоИМясопродукты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокПродукцииСервер();
	
	ЗаполнитьСписокВидовПродукцииСервер();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		//ЗаполнитьСписокПродукцииСервер();
		//ЗаполнитьСписокВидовПродукцииСервер();
		УстановитьВидимость();
		
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипПродукцииПриИзменении(Элемент)
	
	ОтборПродукция = "";
	
	ОтборПродукцияПредставление = "";
	
	ОтборВидПродукции = "";
	
	ОтборВидПродукцииПредставление = "";
	
	ЗаполнитьСписокПродукцииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ОтборПродукцияПредставление = Элементы.ОтборПродукция.СписокВыбора.НайтиПоЗначению(ОтборПродукция).Представление;
	
	ОтборВидПродукции = "";
	
	ОтборВидПродукцииПредставление = "";
	
	ЗаполнитьСписокВидовПродукцииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ОтборВидПродукцииПредставление = Элементы.ОтборВидПродукции.СписокВыбора.НайтиПоЗначению(ОтборВидПродукции).Представление;
	
КонецПроцедуры


&НаКлиенте
Процедура ХСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.BusinessEntityФормаВыбора(ЭтаФорма, "ХСОбработкаОповещения", СтандартнаяОбработка, Объект.ХозяйствующийСубъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХСОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.ХозяйствующийСубъект = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВетисФормы.EnterpriseФормаВыбора(ЭтаФорма, "ПредприятиеОбработкаОповещения", СтандартнаяОбработка, Объект.ХозяйствующийСубъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.Предприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаНайти(Команда)
	
	КомандаНайтиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСвязь(Команда)
	
	СоздатьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборИспользованиеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимость()
	
	_Версия20 = ВетисXSD.Версия_2_0();
	
	Если _Версия20 Тогда
		ОтборПродукцияИспользование = ОтборПродукцияИспользование И ОтборТипПродукцииИспользование;
		ОтборВидПродукцииИспользование = ОтборВидПродукцииИспользование И ОтборПродукцияИспользование И ОтборТипПродукцииИспользование;
		
		Элементы.ОтборХСИспользование.Видимость = Истина;
		Элементы.ОтборПредприятиеИспользование.Видимость = Истина;
		Элементы.ОтборТипПродукцииИспользование.Видимость = Истина;
		
		Элементы.ОтборХС.Видимость = Истина;
		
		Элементы.ОтборХС.Доступность = ОтборХСИспользование;
		Элементы.ОтборПредприятие.Доступность = ОтборПредприятиеИспользование;
		Элементы.ОтборТипПродукции.Доступность = ОтборТипПродукцииИспользование;
		Элементы.ОтборПродукция.Доступность = ОтборПродукцияИспользование;
		Элементы.ОтборВидПродукции.Доступность = ОтборВидПродукцииИспользование;
	Иначе
		ОтборВидПродукцииИспользование = ОтборВидПродукцииИспользование И ОтборПродукцияИспользование;
		
		Элементы.ОтборХСИспользование.Видимость = Ложь;
		Элементы.ОтборПредприятиеИспользование.Видимость = Ложь;
		Элементы.ОтборТипПродукцииИспользование.Видимость = Ложь;
		
		Элементы.ОтборХС.Видимость = Ложь;
		
		Элементы.ОтборХС.Доступность = Истина;
		Элементы.ОтборПредприятие.Доступность = Истина;
		Элементы.ОтборТипПродукции.Доступность = Истина;
		Элементы.ОтборПродукция.Доступность = ОтборПродукцияИспользование;
		Элементы.ОтборВидПродукции.Доступность = ОтборВидПродукцииИспользование;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПродукцииСервер()
	
	Перем _Product, _параметры;
	
	Если НЕ ЗначениеЗаполнено(ОтборТипПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	
	_productType = _ВетисArgusProductionСлой1с.ProductType(ОтборТипПродукции);
	
	Элементы.ОтборПродукция.СписокВыбора.Очистить();
	
	Пока _ВетисProductService.GetProductByTypeListСледующий(_productType, _Product, _параметры) Цикл
		
		Элементы.ОтборПродукция.СписокВыбора.Добавить(_product.guid, _product.name);
		
	КонецЦикла;
	
	Элементы.ОтборПродукция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовПродукцииСервер()
	
	Перем _subProduct, _параметры;
	
	Если НЕ ЗначениеЗаполнено(ОтборПродукция) Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	
	Элементы.ОтборВидПродукции.СписокВыбора.Очистить();
	
	Пока _ВетисProductService.GetSubProductByProductListСледующий(ОтборПродукция, _subProduct, _параметры) Цикл
		
		Элементы.ОтборВидПродукции.СписокВыбора.Добавить(_subProduct.guid, _subProduct.name);
		
	КонецЦикла;
	
	Элементы.ОтборВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер() Экспорт
	
	_ТекДанные = Объект.ВетисНоменклатура.НайтиПоИдентификатору(Элементы.ВетисНоменклатура.ТекущаяСтрока);
	
	Для Каждого _ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
		ВетисСоответствие.ДобавитьProductItem(_ТекДанные1с.Ссылка, Объект.Предприятие, _ТекДанные.guid, _ТекДанные.name);
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	Для Каждого _ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
		ВетисСоответствие.УдалитьProductItem(_ТекДанные1с.Ссылка, Объект.Предприятие);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомандаНайтиСервер()
	
	Перем _product, _subProduct, _productItem, _параметрыP;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	
	СписокВетис.Очистить();
	
	Если _Версия20 Тогда
		_параметрыPI = Неопределено;
		
		_businessEntity = ВетисDictionary_2_0.BusinessEntity(?(ОтборХСИспользование, ВетисDictionaryСлой1с.BusinessEntity(Объект.ХозяйствующийСубъект), Неопределено));
		_enterprise  = ВетисDictionary_2_0.Enterprise(?(ОтборПредприятиеИспользование, ВетисDictionaryСлой1с.Enterprise(Объект.Предприятие), Неопределено));
		_productType = ВетисDictionaryСлой1с.ProductType(?(ОтборТипПродукцииИспользование, ОтборТипПродукции, Неопределено));
		_product     = ВетисDictionary_2_0.Product(?(ОтборПродукцияИспользование, ОтборПродукция, Неопределено));
		_subProduct  = ВетисDictionary_2_0.SubProduct(?(ОтборВидПродукцииИспользование, ОтборВидПродукции, Неопределено));
		
		_subProductСоответствие = Новый Соответствие;
		_subProductСоответствие.Вставить(ОтборВидПродукции, ОтборВидПродукцииПредставление);
		
		_productСоответствие = Новый Соответствие;
		_productСоответствие.Вставить(ОтборПродукция, ОтборПродукцияПредставление);
		
		Пока ВетисProductService_2_0.GetProductItemListСледующий(_productType, _product, _subProduct, _businessEntity, _enterprise, _productItem, _параметрыPI) Цикл
			
			Если _subProductСоответствие.Получить(_productItem.subProduct.guid) = Неопределено Тогда
				//2017-11-01
				//entityNotFoundFault
				//SubProduct with guid [02eec86c-54f3-2d20-6311-d3db41a2e2d1] not found.
				//т.е. то что вернул GetProductItemList
				_item = ВетисProductService_2_0.GetSubProductByGuid(_productItem.subProduct.guid,,Ложь);
				Если _item = Неопределено Тогда
					_subProductСоответствие.Вставить(_productItem.subProduct.guid, "");
				Иначе
					_subProductСоответствие.Вставить(_productItem.subProduct.guid, _item.name);
				КонецЕсли;
			КонецЕсли;
			
			Если _productСоответствие.Получить(_productItem.product.guid) = Неопределено Тогда
				//здесь, видимо, тоже самое
				_item = ВетисProductService_2_0.GetProductItemByGuid(_productItem.product.guid,,Ложь);
				Если _item = Неопределено Тогда
					_productСоответствие.Вставить(_productItem.product.guid, "");
				Иначе
					_productСоответствие.Вставить(_productItem.product.guid, _item.name);
				КонецЕсли;
			КонецЕсли;
			
			_СписокСтрока = СписокВетис.Добавить();
			_СписокСтрока.name = _productItem.name;
			_СписокСтрока.guid = _productItem.guid;
			//_СписокСтрока.subProduct = ВетисDictionaryСлой1с.SubProduct(_productItem.subProduct.guid);
			_СписокСтрока.subProduct = _subProductСоответствие.Получить(_productItem.subProduct.guid);
			_СписокСтрока.product = _productСоответствие.Получить(_productItem.product.guid);
			
		КонецЦикла;
	Иначе
		_productType = ВетисArgusProductionСлой1с.ProductType(ОтборТипПродукции);
		_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.Enterprise(Объект.Предприятие);
		Если ОтборВидПродукцииИспользование Тогда
			_параметрыPI = Неопределено;
			Пока ВетисProductService.GetProductItemListСледующий(ОтборВидПродукции, _enterpriseGuid, _productItem, _параметрыPI) Цикл
				_СписокСтрока = СписокВетис.Добавить();
				_СписокСтрока.name = _productItem.name;
				_СписокСтрока.guid = _productItem.guid;
				_СписокСтрока.subProduct = ОтборВидПродукцииПредставление;
				_СписокСтрока.product = ОтборПродукцияПредставление;
			КонецЦикла;
			
		ИначеЕсли ОтборПродукцияИспользование Тогда
			_параметрыS = Неопределено;
			Пока ВетисProductService.GetSubProductByProductListСледующий(ОтборПродукция, _subProduct, _параметрыS) Цикл
				_параметрыPI = Неопределено;
				Пока ВетисProductService.GetProductItemListСледующий(_subProduct.guid, _enterpriseGuid, _productItem, _параметрыPI) Цикл
					_СписокСтрока = СписокВетис.Добавить();
					_СписокСтрока.name = _productItem.name;
					_СписокСтрока.guid = _productItem.guid;
					_СписокСтрока.subProduct = _subProduct.name;
					_СписокСтрока.product = ОтборПродукцияПредставление;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Пока ВетисProductService.GetProductByTypeListСледующий(_productType, _product, _параметрыP) Цикл
				_параметрыS = Неопределено;
				Пока ВетисProductService.GetSubProductByProductListСледующий(_product.guid, _subProduct, _параметрыS) Цикл
					_параметрыPI = Неопределено;
					Пока ВетисProductService.GetProductItemListСледующий(_subProduct.guid, _enterpriseGuid, _productItem, _параметрыPI) Цикл
						_СписокСтрока = СписокВетис.Добавить();
						_СписокСтрока.name = _productItem.name;
						_СписокСтрока.guid = _productItem.guid;
						_СписокСтрока.subProduct = _subProduct.name;
						_СписокСтрока.product = _product.name;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	СписокВетис.Сортировать("name");
		
КонецПроцедуры
