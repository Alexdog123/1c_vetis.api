
//Тип, описывающий партию груза.
Функция Batch() Экспорт
	
	_Объект = Создать("Batch");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о происхождении партии продукции.
//Параметры:
// productItem - dt:ProductItem - Оригинальное наименование продукции (данное производителем)
// country - 	dt:Country - Страна происхождения продукции
// producer - dt:Producer - Сведения о производителях продукции
Функция BatchOrigin(productItem, country, producer) Экспорт
	
	_Объект = Создать("BatchOrigin");
	
	_Объект.productItem = productItem;
	_Объект.country = country;
	
	Если ТипЗнч(producer) = Тип("Массив") Тогда
		Для каждого _producer Из producer Цикл
			_Объект.producer.Добавить(_producer);
		КонецЦикла;
	Иначе
		_Объект.producer.Добавить(producer);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Операция изменения связи между хозяйствующим субъектом и предприятиями. 
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
// businessEntity - dt:BusinessEntityList
// enterprise - dt:Enterprise
Функция BusinessEntityActivityLocationsModificationOperation(type, businessEntity, enterprise) Экспорт
	
	_Объект = Создать("BEActivityLocationsModificationOperation");
	
	_Объект.type = type;
	
	_Объект.businessEntity = businessEntity;
	
	Если ТипЗнч(enterprise) = Тип("Массив") Тогда
		Для каждого _enterprise Из enterprise Цикл
			_ОбъектЭлемент = _Объект.enterprise.Добавить();
			_ОбъектЭлемент.enterprise = _enterprise;
		КонецЦикла;
	Иначе
		_ОбъектЭлемент = _Объект.enterprise.Добавить();
		_ОбъектЭлемент.enterprise = enterprise;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
// affectedList - dt:BusinessEntityList - Входящий список ХС
// resultingList - dt:BusinessEntityList - Получаемые в результате операции записи
// reason - xs:String - Основание добавления записи в реестр
Функция BusinessEntityModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("BEModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cертифицированную производственную партию продукции.
//Параметры:
// producer - dt:BusinessMember - Сведения о производителе продукции. Заполняется только для производственного вет.сертификата.
// batch - vd:Batch - Сведения о партии продукции.
Функция CertifiedBatch(batch, producer = Неопределено) Экспорт
	
	_Объект = Создать("CertifiedBatch");
	
	_Объект.batch = batch;
	
	Если НЕ producer = Неопределено Тогда
		_Объект.producer = producer;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий сертифицированную транспортную партию.
//Параметры:
// consignor - dt:BusinessMember - Сведения об отправителе (владельце). Заполняется только для транспортного вет.сертификата.
// consignee - dt:BusinessMember - Сведения о получателе груза. Заполняется только для транспортного вет.сертификата.
// broker - dt:BusinessEntity - Сведения о фирме-посреднике (перевозчике).
// transportInfo - vd:TransportInfo - Сведения о транспорте.
// transportStorageType - dt:TransportationStorageType - Способ хранения при перевозке.
// batch - vd:Batch - Сведения о партии продукции.
// shipmentRoute - vd:ShipmentRoute - Сведения о маршруте следования (пунктах перегрузки).
Функция CertifiedConsignment(consignor, consignee, batch, broker, transportInfo, transportStorageType) Экспорт
	
	_Объект = Создать("CertifiedConsignment");
	
	_Объект.consignor = consignor;
	_Объект.consignee = consignee;
	_Объект.broker = broker;
	_Объект.transportInfo = transportInfo;
	_Объект.transportStorageType = transportStorageType;
	//_Объект.shipmentRoute = shipmentRoute;
	_Объект.batch = batch;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий транспортную партию груза.
Функция Consignment() Экспорт
	
	_Объект = Создать("Consignment");
	
	//_Объект.id = "";// Идентификатор, определяющий consignment в запросе. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	//_Объект.partOf = "";// Ссылка на consignment в разделе delivery запроса. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39747
	// Этот атрибут был заявлен на перспективу.
	// В дальнейшем планируется добавить возможность гашения нескольких партий товара.
	// На данный момент использование или неиспользование этого атрибута ошибочным не является.
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция ConsignmentDocumentList(waybill, VetDocument) Экспорт
	
	_Объект = Создать("ConsignmentDocumentList");
	
	_Объект.waybill = waybill;
	
	Если ТипЗнч(VetDocument) = Тип("Массив") Тогда
		Для каждого _VetDocument Из VetDocument Цикл
			_Объект.vetCertificate.Добавить(_VetDocument);
		КонецЦикла;
	Иначе
		_Объект.vetCertificate.Добавить(VetDocument);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий поставку.
//Параметры:
// consignor - dt:BusinessMember - Сведения об отправителе.
// consignee - dt:BusinessMember - Сведения о получателе.
// consignment - vd:Consignment - Фактические сведения о входящей партии или группе животных.
// accompanyingForms - vd:ConsignmentDocumentList - Сопроводительные документы.
// broker - dt:BusinessEntity - Сведения о фирме-посреднике.
// transportInfo - vd:TransportInfo - Сведения о транспорте.
// transportStorageType - dt:TransportationStorageType - Способ хранения при перевозке.
// shipmentRoute - vd:ShipmentRoute - Сведения о маршруте следования (пунктах перегрузки).
Функция Delivery(consignor, consignee, consignment, accompanyingForms, broker, transportInfo, transportStorageType) Экспорт
	
	_Объект = Создать("Delivery");
	
	_Объект.deliveryDate = ВетисОбщегоНазначения.ВремяВетис();// Дата поставки.
	_Объект.consignor = consignor;
	_Объект.consignee = consignee;
	_Объект.accompanyingForms = accompanyingForms;
	_Объект.broker = broker;
	_Объект.transportInfo = transportInfo;
	_Объект.transportStorageType = transportStorageType;
	//_Объект.shipmentRoute = shipmentRoute;
	
	Если ТипЗнч(consignment) = Тип("Массив") Тогда
		Для каждого _consignment Из consignment Цикл
			_Объект.consignment.Добавить(_consignment);
		КонецЦикла;
	Иначе
		_Объект.consignment.Добавить(consignment);
	КонецЕсли;

	Возврат _Объект;
	
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41188
	// В случае если вы передаете в запросе несколько объектов consignment ("..Request/delivery/consignment")
	// и несколько объектов vetCertificate ("..Request/delivery/accompanyingForms/vetCertificate")
	// то связь между ними должна быть установлена путем указания атрибутов "id" - у элемента consignment
	// и "for" - для элемента vetCertificate.
	// 
	// В случае если вы передаете в запросе несколько объектов consignment и один объект vetCertificate,
	// то атрибуты id и for могут быть не указаны,
	// но в этом случае информация из единственного элемента vetCertificate будет распространяться на все ВСД,
	// оформляемые в этом запросе.
	//
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41192
	// Возможно, что неверно указали значения для атрибутов id и for.
	// Их типы ID и IDREF, соответственно, и должны начинаться с "_" или буквенного символа.
	
КонецФункции

//Обобщенные сведения о результате приема партии продукции.
//Параметры:
// presence - vd:DocumentNature - Природа ВСД (электронный или бумажный)
// docInspection - vd:DeliveryInspection - Соответствуют ли сведения о партии, указанной в ВСД, фактическим
// vetInspection - vd:DeliveryInspection - Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
// decision - vd:DeliveryDecision - Принятое решение о приёме входной партии.
Функция DeliveryFactList(presence, docInspection, vetInspection, decision) Экспорт
	
	_Объект = Создать("DeliveryFactList");
	
	_Объект.vetCertificatePresence = presence;
	_Объект.docInspection = docInspection;
	_Объект.vetInspection = vetInspection;
	_Объект.decision = decision;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
//Параметры:
// result - vd:DeliveryInspectionResult - Результат контроля.
// responsible - vd:User - Ответственный за контроль.
Функция DeliveryInspection(result, responsible = Неопределено) Экспорт
	
	_Объект = Создать("DeliveryInspection");
	
	_Объект.result = result;
	
	Если responsible = Неопределено Тогда
		_Объект.responsible = ВетисMercuryVetdocument_2_0.User(ВетисПараметрыСоединения.ЛогинХС());
	Иначе
		_Объект.responsible = responsible;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReason(name) Экспорт
	
	_Объект = Создать("DiscrepancyReason");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReport(issueSeries = "", issueNumber = "", issueDate, reason, description) Экспорт
	
	_Объект = Создать("DiscrepancyReport");
	
	_Объект.issueSeries = issueSeries;
	_Объект.issueNumber = issueNumber;
	_Объект.issueDate   = ВетисОбщегоНазначения.ВремяВетис(issueDate);
	_Объект.reason      = DiscrepancyReason(reason);
	_Объект.description = description;
	
	Возврат _Объект;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
// affectedList - dt:EnterpriseList - Входящий список площадок
// resultingList - dt:EnterpriseList - Получаемые в результате операции записи
// reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("ENTModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий дату производства, либо дату окончания срока годности продукции.
//Может указываться единичной датой, интервалом, либо строкой.
Функция GoodsDate(firstDate, secondDate = Неопределено) Экспорт
	
	_Объект = Создать("GoodsDate");
	
	Если ЗначениеЗаполнено(firstDate) Тогда
		Если ТипЗнч(firstDate) = Тип("Дата") Тогда
			_Объект.firstDate = ВетисDictionary_2_0.ComplexDate(firstDate);
		Иначе
			_Объект.firstDate = firstDate;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ secondDate = Неопределено И ЗначениеЗаполнено(secondDate) Тогда
		Если ТипЗнч(secondDate) = Тип("Дата") Тогда
			_Объект.secondDate = ВетисDictionary_2_0.ComplexDate(secondDate);
		Иначе
			_Объект.secondDate = secondDate;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Создает объект, который содержит сведения об объединяемых складских записях журнала продукции
//Параметры:
// sourceStockEntry - Массив - vd:StockEntry - Позиции в складском журнале системы Меркурий, не менее двух.
//                    Указанные позиции будут объединены в одну. Представляют собой идентификатор версии записи (uuid) в ИС Меркурий.
//	Указанная версия записи складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//	Объединяемые записи журнала должны быть в статусе "создана" или "отправлена".
//	Объединяемые записи журнала должны быть в журнале входной продукции, для вырабатываемой продукции функция объединения отсутствует.
//	Хозяйствующий субъект - владелец продукции в объединяемых записях должен совпадать.
//	Объединяемые записи журнала продукции должны относится к одному типу продукции (первый уровень справочника продукции).
//	Объединяемые записи журнала продукции должны относится к одной продукции (второй уровень справочника продукции).
//	В объединяемых записях журнала продукции указанная ед. измерения должна относится к одной группе единиц измерения.
//	Объединяемые записи журнала продукции должны относится к одной стране происхождения.
//	Запрещено объединение записи журнала входной и вырабатываемой продукции.
//	Запрещено объединение записей журнала относящихся к скоропортящейся и не скоропортящейся продукции.
//	Запрещено объединение записей журнала относящихся к качественной и некачественной продукции;
//
Функция MergeStockEntriesOperation(sourceStockEntry) Экспорт
	
	_Объект = Создать("MergeStockEntriesOperation");
	
	Для каждого _StockEntry Из sourceStockEntry Цикл
		_Объект.sourceStockEntry.Добавить(StockEntry(_StockEntry));
	КонецЦикла;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий лабораторное исследование. Исследование выполняется на конкретный показатель/заболевание в лаборатории.
//Параметры:
// batchID - bs:Identifier - Уникальный идентификатор производственной партии продукции, для которой проводились лабораторные исследования.
// expertiseID - bs:String255 - Номер экспертизы.
// indicator - dt:Indicator - Показатель безопасности.
// disease - dt:AnimalDisease - Заболевание.
// method - dt:ResearchMethod - Метод исследования.
// result - dt:ResearchResult - Результат исследования.
// conclusion - 	bs:Text - Заключение.
Функция LaboratoryResearchEvent(expertiseID, indicator, disease, method, result, conclusion) Экспорт
	
	_Объект = Создать("LaboratoryResearchEvent");
	
	_Объект.expertiseID = expertiseID;
	_Объект.indicator = indicator;
	_Объект.disease = disease;
	_Объект.method = method;
	_Объект.result = result;
	_Объект.conclusion = conclusion;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий подтверждение соблюдения условия перемещения продукции.
//Параметры:
// condition - dt:RegionalizationCondition - Cоблюдаемое условие перемещения партии.
// text - bs:Text - Текст (точная формулировка) соблюдаемого условия перемещения партии.
Функция RegionalizationClause(condition, text) Экспорт
	
	_Объект = Создать("RegionalizationClause");
	
	_Объект.condition = condition;
	_Объект.text = text;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий условие регионализации, соблюдаемое при перевозке груза.
//Параметры:
// referenceNumber - bs:Identifier - Номер условия.
// text - xs:Text - Формулировка условия.
// strict - xs:boolean - Обязательность соблюдения условия.
// relatedDisease - dt:AnimalDisease - Заболевание, к которому относится данное условие.
Функция RegionalizationCondition(referenceNumber, text, strict, relatedDisease) Экспорт
	
	_Объект = Создать("RegionalizationCondition");
	
	_Объект.referenceNumber = referenceNumber;
	_Объект.text = text;
	_Объект.strict = strict;
	_Объект.relatedDisease = relatedDisease;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о записи журнала продукции.
Функция StockEntry(guid) Экспорт
	
	_Объект = Создать("StockEntry");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция StockEntryListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "stockEntry");
	
КонецФункции

Функция TransportInfo(transportType, transportNumber) Экспорт
	
	_Объект = Создать("TransportInfo");
	
	_Объект.transportType   = transportType;  //Тип транспортного средства.
	_Объект.transportNumber = transportNumber;//Номера транспортного средства.
	
	Возврат _Объект;
	
КонецФункции

Функция TransportNumber() Экспорт
	
	_Объект = Создать("TransportNumber");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий пользователя. Наследуется от типа bs:GenericEntity.
Функция User(login = Неопределено, fio = Неопределено, post = Неопределено) Экспорт
	
	_Объект = Создать("User");
	
	Если НЕ login = Неопределено Тогда
		_Объект.login = login;
	КонецЕсли;
	
	Если НЕ fio = Неопределено Тогда
		_Объект.fio = fio;
	КонецЕсли;
	
	Если НЕ post = Неопределено Тогда
		_Объект.post = post;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
//Параметры:
// purpose - dt:Purpose - Цель. Назначение груза.
// cargoInspected - xs:boolean - Осуществлен контроль гос.ветврачом на соответствие требованиям.
// cargoExpertized - dt:ResearchResult - Проводилась ли ветсанэкспертиза.
// locationProsperity - bs:String255 - Благополучие местности.
// specialMarks - bs:Text - Особые отметки.
Функция VeterinaryAuthentication(purpose, cargoInspected, cargoExpertized, locationProsperity, specialMarks) Экспорт
	
	_Объект = Создать("VeterinaryAuthentication");
	
	_Объект.purpose = purpose;
	_Объект.cargoInspected = cargoInspected;
	_Объект.cargoExpertized = cargoExpertized;
	_Объект.locationProsperity = locationProsperity;
	_Объект.specialMarks = specialMarks;
	
	//_Объект.animalSpentPeriod
	//_Объект.monthsSpent
	//_Объект.laboratoryResearch = laboratoryResearch;
	//_Объект.quarantine
	//_Объект.immunization
	//_Объект.veterinaryEvent
	//_Объект.r13nClause = r13nClause;
	
	// laboratoryResearch - vd:LaboratoryResearchEvent - Сведения о проведенных лабораторных исследованиях.
	// r13nClause - vd:RegionalizationClause - Подтверждение соблюдаемых условий перемещения продукции.
	//              Если в соответствии с правилами регионализации перемещение продукции разрешено при выполнении определенных условий,
	//              то условия, которые обязуется выполнить перевозчик передаются в данном поле.
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий ветеринарно-сопроводительный документ (ВСД).
//Параметры:
// uuid - Идентификатор ВСД
Функция VetDocument(uuid = Неопределено) Экспорт
	
	_Объект = Создать("VetDocument");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, uuid, "uuid");
	
	Возврат _Объект;
	
КонецФункции

Функция VetDocumentListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "vetDocument");
	
КонецФункции

//Тип, описывающий cведения об изменении статуса ветеринарного документа.
//Параметры;
// status - vd:VetDocumentStatus - установленный статус документа
// user - dt:User - пользователь, изменивший статус
// date - xs:dateTime - дата и время изменения статуса
// reason - vd:VetDocumentStatusChangeReason - основание
Функция VetDocumentStatusChange(status, user, date, reason = "") Экспорт
	
	_Объект = Создать("VetDocumentStatusChange");
	
	_Объект.status = status;
	_Объект.specifiedPerson = user;
	_Объект.actualDateTime = date;
	_Объект.reason = VetDocumentStatusChangeReason(reason);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий товарно-транспортную накладную.
Функция Waybill() Экспорт
	
	_Объект = Создать("Waybill");
	
	Возврат _Объект;
	
КонецФункции


//Тип, описывающий cколько времени животные находились на территории ТС.
Функция AnimalSpentPeriod(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_ZERO();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция DeliveryDecision(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий результат контроля поставки.
Функция DeliveryInspectionResult(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий форму ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentForm(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC1();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC2();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
	ИначеЕсли value = 6 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC3();
	ИначеЕсли value = 7 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
	ИначеЕсли value = 8 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
	ИначеЕсли value = 9 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT61();
	ИначеЕсли value = 10 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT62();
	ИначеЕсли value = 11 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT63();
	ИначеЕсли value = 12 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий статус ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentStatus(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Причина аннулирования ветеринарного сертификата. 
Функция VetDocumentStatusChangeReason(пЗначение) Экспорт
	
	Возврат Строка(пЗначение);
	
КонецФункции

//Тип, описывающий тип ветеринарно-сопроводительного документа (ВСД).
//Типы сертификатов в документации перечислены как для запросов, так и для ответов сервиса.
//В запросе на список ветеринарных сертификатов можно указать только входящие или исходящие.
//В ответе сервиса придут транспортные и возвратные сертификаты.
//То есть в запросе можно указать направление отправки сертификата (от предприятия или на предприятие),
//а в ответе придет информация о том какие из них были транспортными, а какие были оформлены как возвратными.
Функция VetDocumentType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentType_INCOMING();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2";
	
КонецФункции

