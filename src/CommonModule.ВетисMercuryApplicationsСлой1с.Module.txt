
Процедура MergeOperation() Экспорт
	
КонецПроцедуры


Процедура IncomingOperation(пСтрокаСЖ, пОтказ = Ложь) Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	Если НЕ _СтрокаСЖ.ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_СтрокаСЖ.ВСД.Статус) И НЕ _СтрокаСЖ.ВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_всд = _СтрокаСЖ.ВСД.ПолучитьОбъект();
	_ттн = _всд.ТТН[0];
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
	
	Если _Версия20 Тогда
		_delivery = ВетисMercuryVetdocument_2_0.Delivery(
			ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)),
			ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
			ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),
			ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения));
	Иначе
		_delivery = ВетисMercuryVetdocument.Delivery(
			_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
	КонецЕсли;
	
	_всдСтрокаСЖ = _СтрокаСЖ.ВСД.Товары[0];
	
	_КоличествоФакт     = _СтрокаСЖ.Количество + _СтрокаСЖ.КоличествоВозврат;
	_КоличествоМестФакт = _СтрокаСЖ.КоличествоМест + _СтрокаСЖ.КоличествоМестВозврат;
	
	_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
	_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖ.КоличествоМест);
	
	_СтрокаСЖ.РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
	_СтрокаСЖ.РезультатВетКонтроля = _СтрокаСЖ.РезультатПриема;
	_СтрокаСЖ.РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", ?(_СтрокаСЖ.КоличествоВозврат = 0, "ACCEPT_ALL", "PARTIALLY"))];
	
	_deliveryFacts = _ВетисMercuryVetdocument.DeliveryFactList(
	  _ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатПриема)),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатВетКонтроля), ВетисПараметрыСоединения.Врач()),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_СтрокаСЖ.РешениеОПриеме));
	
	_reason = "";
	_description = "";
	
	//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
	Если _Отклонение > 5 Тогда
		_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
		_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
		_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
		_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
	КонецЕсли;
	
	//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
	Если _ОтклонениеМест > 10 Тогда
		_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖ.КоличествоМест, _всдСтрокаСЖ.КоличествоМест - _КоличествоМестФакт);
		_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖ.КоличествоМест, "больше", "меньше");
		_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
		_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖ.КоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_reason) Тогда
		_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,
			_всд.Дата,
			"Количество " + _reason + ".",
			"В ВСД заявлено " + _description + ".");
	КонецЕсли;
	
	_СтрокаСЖ.АктПричина = _reason;
	_СтрокаСЖ.АктОписание = _description;
	
	Если _СтрокаСЖ.Возврат = Истина Тогда
		Если _Версия20 Тогда
			_returnedDelivery = ВетисMercuryVetdocument_2_0.Delivery(
				ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)),
				ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),//пока тот же который привез
				ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),//пока тот же который привез
				ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)//пока тот же который привез
				);
		Иначе
			_returnedDelivery = ВетисMercuryVetdocument.Delivery(
				ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
		КонецЕсли;
	КонецЕсли;
	
	_Response = _ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		Если _vetDocument.type = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			
			_всд.Uuid   = _vetDocument.uuid;
			_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.type);
			_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
			
			//сделать: проверить, возможно здесь надо через ДополнительныеСвойства
			_всд.ОбменДанными.Загрузка = Истина;
			
			Попытка
				_всд.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
				ВызватьИсключение;
			КонецПопытки;
			
		ИначеЕсли _vetDocument.type = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			
			Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
				_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
			Иначе
				_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				_возвратный.Дата = ТекущаяДата();
			КонецЕсли;
			
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
			
			_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
			
			Попытка
				_возвратный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
				ВызватьИсключение;
			КонецПопытки;
			
			_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _stockEntry Из _Response.stockEntry Цикл
		_СтрокаСЖ.guid = _stockEntry.guid;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура TransportOperation(пСтрокаСЖ, пОтказ = Ложь) Экспорт
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисBase = ?(_Версия20, ВетисDictionary_2_0, ВетисBase);
	_ВетисArgusProduction = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusProduction);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисArgusShipmentСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusShipmentСлой1с);
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_unitGuid = _ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения);
	_unit     = _ВетисArgusCommon.Unit(_unitGuid);
	
	_unitws    = ?(_Версия20, ВетисDictionaryService_2_0, ВетисDictionaryService).GetUnitByGuid(_unitGuid);
	_unit.uuid = _unitws.uuid;
	
	_всд = _СтрокаСЖ.ВСД.ПолучитьОбъект();
	
	_СтрокаВСД = _всд.ВСД[0];
	_СтрокаТТН = _всд.ТТН[0];
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
	
	_Consignment = _ВетисMercuryVetdocument.Consignment();
	_Consignment.volume           = _СтрокаСЖ.Количество;
	_Consignment.unit             = _unit;
	_Consignment.packingList      = _ВетисArgusCommon.PackingFormList(_ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
	_Consignment.packingAmount    = _СтрокаСЖ.КоличествоМест;
	_Consignment.sourceStockEntry = ВетисMercuryVetdocument.StockEntry(_СтрокаСЖ.guid);
	 
	_VetDocument = ВетисMercuryVetdocument.VetDocument();
	_VetDocument.issueSeries        = _всд.СерияВСД;
	_VetDocument.issueNumber        = _всд.НомерВСД;
	_VetDocument.issueDate          = ВетисОбщегоНазначения.ВремяВетис(_всд.ДатаВСД);
	_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
	_VetDocument.transportInfo      = _ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_VetDocument.transportStorageType = _ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
	_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
	_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
	_VetDocument.confirmedBy        = ВетисПараметрыСоединения.Врач();
	_VetDocument.confirmedDate      = ВетисОбщегоНазначения.ВремяВетис(_всд.ДатаВСД);
	_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
	
	_delivery = ВетисMercuryVetdocument.Delivery(
		_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
		_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
		_Consignment,
		_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), _VetDocument));
	
	Если _Версия20 Тогда
		_Response = ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(_delivery, _Получатель, пОтказ);
	Иначе
		_Response = ВетисMercuryApplications.prepareOutcomingConsignment(_delivery, _Получатель, пОтказ);
	КонецЕсли;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 

	
КонецПроцедуры

Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь) Экспорт
	
	Если НЕ пСсылка.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ пСсылка.Тип = Перечисления.ВетисVetDocumentType.Транспортный Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		_Reason = ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason(пПричина);
		
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications_2_0.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	Иначе
		_Reason = ВетисMercuryVetdocument.WithdrawReason(пПричина);
		
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	КонецЕсли;
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response.VetDocument);
	
	//_док.ДатаОбновления = ТекущаяДата();
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры

Процедура СинхронизироватьСкладскойЖурнал(ХС, Предприятие) Экспорт
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(ХС);
	
	_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(Предприятие);
	
	_нз = РегистрыСведений.ВетисСкладскойЖурналРС.СоздатьНаборЗаписей();
	
	Пока _ВетисMercuryApplications.getStockEntryListСледующий(_enterpriseGuid, _issuerId, _stockEntry, _параметры) Цикл
		
		Если _stockEntry.batch.volume = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		_строка = _нз.Добавить();
		
		_строка.guid = _stockEntry.guid;
		_строка.Номенклатура = _ВетисArgusProductionСлой1с.ProductItem(_stockEntry.batch.productItem);
		_строка.НоменклатурнаяГруппа = _ВетисArgusProductionСлой1с.SubProduct(_stockEntry.batch.subProduct);
		_строка.Упаковка = _ВетисArgusCommonСлой1с.PackingForm(_stockEntry.batch.packingList);
		_строка.ЕдиницаИзмерения = _ВетисArgusCommonСлой1с.Unit(_stockEntry.batch.unit);
		
		_строка.SubProductGuid = _stockEntry.batch.subProduct.guid;
		_строка.ProductItemGuid = _stockEntry.batch.productItem.guid;
		
		_строка.Количество = _stockEntry.batch.volume;
		_строка.КоличествоМест = _stockEntry.batch.packingAmount;
		
	КонецЦикла;
	
	_нз.Записать();
	
КонецПроцедуры


Функция getVetDocumentByUuid(пВСД, пВСДОбъект = Неопределено) Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Если Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	_vetDocument = _ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId);
	
	Если пВСДОбъект = Неопределено Тогда
		Возврат _vetDocument;
	Иначе
		Если ТипЗнч(пВСДОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
			ИЛИ ТипЗнч(пВСДОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			_ВСДОбъект = пВСДОбъект;
		Иначе
			_ВСДОбъект = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
		КонецЕсли;
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_ВСДОбъект, _vetDocument);
		
		//_ВСДОбъект.ДатаОбновления = ТекущаяДата();
		
		Возврат _ВСДОбъект;
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьConsignment(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пSourceStockEntry = Неопределено)
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		_Consignment = ВетисMercuryVetdocument_2_0.Consignment();
		ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
	Иначе
		_Consignment = ВетисMercuryVetdocument.Consignment();
		ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
		
		Если пSourceStockEntry = Неопределено Тогда
			_Consignment.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
			_Consignment.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
		Иначе
			_Количество     = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
			_КоличествоМест = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
			
			Для каждого _StockEntry Из пSourceStockEntry Цикл
				//_StockEntry.
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Consignment;
	
КонецФункции

Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь)
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	
	Если пВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		_VetDocument.uuid = пВСД.uuid;
		//__ = ВетисMercuryApplicationsСлой1с.getVetDocumentByUuid(пВСД);
	Иначе
		Если пВозврат = Ложь Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
		ИначеЕсли _Версия20 Тогда
			//ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
			//_consignor = _VetDocument.certifiedConsignment.consignor;
			//_VetDocument.certifiedConsignment.consignor = _VetDocument.certifiedConsignment.consignee;
			//_VetDocument.certifiedConsignment.consignee = _consignor;
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
				ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
				_СтрокаВСД.КонтрольГосВетврачем,
				ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.РезультатЛабораторногоИсследования),
				_СтрокаВСД.БлагополучиеМестности,
				_СтрокаВСД.ОсобыеОтметки);
			
		Иначе
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(ВетисПредопределенные.Получить("Purpose.ВозвратГруза")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = ВетисПараметрыСоединения.Врач();
			_VetDocument.confirmedDate      = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь)
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		Возврат ВетисMercuryVetdocumentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
	Иначе
		Возврат ВетисArgusShipmentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
	КонецЕсли;
	
КонецФункции

Функция Процент(Знач1, Знач2) Экспорт
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции
