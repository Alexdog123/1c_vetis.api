
Процедура MergeOperation() Экспорт
	
КонецПроцедуры

Функция ResolveDiscrepancy(пПредприятие, пСтрокаПартии, discrepancyReport = Неопределено, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	//сделать: тестировать ResolveDiscrepancy
	
	_enterprise = ВетисCerberusEnterprise.Enterprise(ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие));
	
	_inventoryDate = ТекущаяДата();
	
	_responsible = ВетисArgusCommon.User(Ветис.ЛогинХС());
	
	_stockEntry = ВетисMercuryVetdocument.StockEntry(пСтрокаПартии.guid);
	
	_stockEntry.batch = ВетисMercuryVetdocument.Batch();
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_stockEntry.batch, пСтрокаПартии);
	
	_stockDiscrepancy = ВетисMercuryVetdocument.StockDiscrepancy(_stockEntry);
	
	Если discrepancyReport = Неопределено Тогда
		_discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport();
	Иначе
		_discrepancyReport = discrepancyReport;
	КонецЕсли;
	
	_Response = ВетисMercuryApplications.resolveDiscrepancy(_enterprise, _inventoryDate, _responsible, _stockDiscrepancy, _discrepancyReport, issuerId, пОтказ, пОшибка);
	
КонецФункции

Процедура IncomingOperation(пСтрокаСЖ, пВСД = Неопределено, пВозвратДата = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_ВозвратДата = ?(пВозвратДата = Неопределено, ТекущаяДата(), пВозвратДата);
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	_всд = ?(пВСД = Неопределено, _СтрокаСЖ.ВСД, пВСД);
	
	Если НЕ _всд.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_всд.Статус) И НЕ _всд.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	//для гашения из ВСД, т.е. когда нет расхождений и возврата
	_ЕстьСвойствоВозврат = ВетисОбщегоНазначения.ЕстьСвойство(_СтрокаСЖ, "Возврат");
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_всд = ?(ТипЗнч(_всд) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент"), _всд.ПолучитьОбъект(), _всд);
	
	_ттн = _всд.ТТН[0];
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
	
	Если _Версия20 Тогда
		_delivery = ВетисMercuryVetdocument_2_0.Delivery(
			ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment_20(_всд.Товары[0], _всд.Упаковка, _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)),
			ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
			ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),
			ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения));
	Иначе
		_delivery = ВетисMercuryVetdocument.Delivery(
			_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
	КонецЕсли;
	
	_всдСтрокаСЖ = _всд.Товары[0];
	
	_КоличествоФакт     = _СтрокаСЖ.Количество + ?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, _СтрокаСЖ.КоличествоВозврат, 0);
	_КоличествоМестФакт = _СтрокаСЖ.КоличествоМест + ?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, _СтрокаСЖ.КоличествоМестВозврат, 0);
	
	_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
	_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖ.КоличествоМест);
	
	_РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
	
	_РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, ?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", "PARTIALLY"), "ACCEPT_ALL")];
	
	ВетисОбщегоНазначения.УстановитьЗначение(_СтрокаСЖ, _РезультатПриема, "РезультатПриема");
	ВетисОбщегоНазначения.УстановитьЗначение(_СтрокаСЖ, _РезультатПриема, "РезультатВетКонтроля");
	ВетисОбщегоНазначения.УстановитьЗначение(_СтрокаСЖ, _РешениеОПриеме, "РешениеОПриеме");
	
	_deliveryFacts = _ВетисMercuryVetdocument.DeliveryFactList(
	  _ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема), Ветис.Врач()),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_РешениеОПриеме));
	
	_reason = "";
	_description = "";
	
	//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
	Если _Отклонение > 5 Тогда
		_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
		_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
		_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
		_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
	КонецЕсли;
	
	//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
	Если _ОтклонениеМест > 10 Тогда
		_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖ.КоличествоМест, _всдСтрокаСЖ.КоличествоМест - _КоличествоМестФакт);
		_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖ.КоличествоМест, "больше", "меньше");
		_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
		_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖ.КоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_reason) Тогда
		_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,
			_ВозвратДата,
			"Количество " + _reason + ".",
			"В ВСД заявлено " + _description + ".");
	КонецЕсли;
	
	ВетисОбщегоНазначения.УстановитьЗначение(_СтрокаСЖ, _reason, "АктПричина");
	ВетисОбщегоНазначения.УстановитьЗначение(_СтрокаСЖ, _description, "АктОписание");
	
	Если _ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат = Истина Тогда
		Если _Версия20 Тогда
			_returnedDelivery = ВетисMercuryVetdocument_2_0.Delivery(
				ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment_20(_всд.Товары[0], _всд.Упаковка, _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина, _ВозвратДата), ПолучитьVetDocument(_всд, Истина, _ВозвратДата)),
				ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),//пока тот же который привез
				ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),//пока тот же который привез
				ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)//пока тот же который привез
				);
		Иначе
			_returnedDelivery = ВетисMercuryVetdocument.Delivery(
				ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
		КонецЕсли;
	КонецЕсли;
	
	_Response = _ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		Если ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			
			_всд.Uuid   = _vetDocument.uuid;
			
			Если _Версия20 Тогда
				_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.vetDType);
				_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.vetDStatus);
			Иначе
				_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.type);
				_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
			КонецЕсли;
			
			Если ТипЗнч(_всд) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
				//сделать: проверить, возможно здесь надо через ДополнительныеСвойства
				_всд.ОбменДанными.Загрузка = Истина;
				
				Попытка
					_всд.Записать();
				Исключение
					ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли _ЕстьСвойствоВозврат И ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			
			Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
				_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
			Иначе
				_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				_возвратный.Дата = _ВозвратДата;
			КонецЕсли;
			
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
			
			_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
			
			Попытка
				_возвратный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
				ВызватьИсключение;
			КонецПопытки;
			
			_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ВетисОбщегоНазначения.ЕстьСвойство(_СтрокаСЖ, "guid") Тогда
		Для каждого _stockEntry Из _Response.stockEntry Цикл
			_СтрокаСЖ.guid = _stockEntry.guid;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура TransportOperation(пДокумент, пСтрокаПартии, пСтрокаВСД, пСтрокаТТН, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисBase = ?(_Версия20, ВетисDictionary_2_0, ВетисBase);
	_ВетисArgusProduction = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusProduction);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисArgusShipment = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusShipment);
	_ВетисArgusShipmentСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusShipmentСлой1с);
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_СтрокаСЖ  = пСтрокаПартии;
	_СтрокаВСД = пСтрокаВСД;
	_СтрокаТТН = пСтрокаТТН;
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ПолучательПредприятие);
	
	_unitGuid = _ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения);
	_unit     = _ВетисArgusCommon.Unit(_unitGuid);
	
	_Consignment = _ВетисMercuryVetdocument.Consignment();
	_Consignment.volume           = _СтрокаСЖ.Количество;
	_Consignment.unit             = _unit;
	_Consignment.packingList      = _ВетисArgusCommon.PackingFormList(_ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
	_Consignment.packingAmount    = _СтрокаСЖ.КоличествоМест;
	_Consignment.sourceStockEntry = _ВетисMercuryVetdocument.StockEntry(_СтрокаСЖ.guid);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
	_VetDocument.transportInfo      = _ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_VetDocument.transportStorageType = _ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
	_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
	_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
	_VetDocument.confirmedBy        = Ветис.Врач();
	_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
	
	_waybill = _ВетисArgusShipment.Waybill();
	_waybill.issueSeries   = _СтрокаТТН.Серия;
	_waybill.issueNumber   = _СтрокаТТН.Номер;
	_waybill.issueDate     = Ветис.ВремяВетис(_СтрокаТТН.Дата);
	_waybill.type          = _ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
	_waybill.transportInfo = _ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_waybill.transportStorageType = _ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	
	_delivery = ВетисMercuryVetdocument.Delivery(
		_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
		_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
		_Consignment,
		_ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument));
	
	Если _Версия20 Тогда
		_Response = ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	Иначе
		_Response = ВетисMercuryApplications.prepareOutcomingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	КонецЕсли;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 
	
КонецПроцедуры

Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ пСсылка.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ пСсылка.Тип = Перечисления.ВетисVetDocumentType.Транспортный Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	Если Ветис.Версия_2_0() Тогда
		_Reason = ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason(пПричина);
		
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications_2_0.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ, пОшибка);
	Иначе
		_Reason = ВетисMercuryVetdocument.WithdrawReason(пПричина);
		
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ, пОшибка);
	КонецЕсли;
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response.VetDocument);
	
	//_док.ДатаОбновления = ТекущаяДата();
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры

Функция getVetDocumentByUuid(пВСД, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(Ветис.Версия_2_0(), ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Если Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат _ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId, пОтказ, пОшибка);
	
КонецФункции

Функция ModifyActivityLocations(пХС, пПредприятие, ModificationTypeCREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ModificationType = ?(ModificationTypeCREATE, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_DELETE());
	
	Если Ветис.Версия_2_0() Тогда
		
		_BusinessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
		
		_EnterpriseGuid     = ВетисDictionaryСлой1с.Enterprise(пПредприятие);
		
		_Operation = ВетисMercuryVetdocument_2_0.BusinessEntityActivityLocationsModificationOperation(_ModificationType, _BusinessEntityGuid, _EnterpriseGuid);
		
		_BusinessEntityResponse = ВетисMercuryApplications_2_0.ModifyActivityLocations(_Operation, _BusinessEntityGuid, пОтказ, пОшибка);
		
	Иначе
		
		_BusinessEntityGuid = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
		
		_EnterpriseGuid     = ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие);
		
		_Operation = ВетисCerberusEnterprise.BusinessEntityActivityLocationsModificationOperation(_ModificationType, _BusinessEntityGuid, _EnterpriseGuid);
		
		_BusinessEntityResponse = ВетисMercuryApplications.ModifyActivityLocations(_Operation, _BusinessEntityGuid, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _BusinessEntityResponse;
	
КонецФункции

Функция ModifyBusinessEntity(пХС, пПричина = Неопределено, RegisterModificationType_FIND_OR_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = ?(RegisterModificationType_FIND_OR_CREATE = Истина, ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_ХС = пХС.ПолучитьОбъект();
	
	Если Ветис.Версия_2_0() Тогда
		
		_businessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
		
		_businessEntity = ВетисDictionary_2_0.BusinessEntity(_businessEntityGuid);
		
		_businessEntity.type = ?(_ХС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, ВетисКонстанты.BusinessEntityType_JURIDICAL(), ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED());
		
		_businessEntity.name = _ХС.Наименование;
		
		_businessEntity.fullName = _ХС.НаименованиеПолное;
		
		_businessEntity.inn = _ХС.ИНН;
		
		_businessEntity.incorporationForm = ВетисDictionary_2_0.IncorporationForm(?(_ХС.ЮрФизЛицо, "12300", "50102"));
		
		//_businessEntity.ogrn = ;
		
		//_businessEntity.juridicalAddress = ВетисDictionary_2_0.Address();
		
		_modificationOperation = ВетисMercuryVetdocument_2_0.BusinessEntityModificationOperation(_type, , _businessEntity, _Причина);
		
		_Response = ВетисMercuryApplications_2_0.ModifyBusinessEntity(_modificationOperation, _businessEntityGuid, пОтказ, пОшибка);
		
	Иначе
		
		_businessEntityGuid = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
		
		_businessEntity = ВетисCerberusEnterprise.BusinessEntity(_businessEntityGuid);
		
		_businessEntity.type = ?(_ХС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, ВетисКонстанты.BusinessEntityType_JURIDICAL(), ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED());
		
		_businessEntity.name = _ХС.Наименование;
		
		_businessEntity.fullName = _ХС.НаименованиеПолное;
		
		_businessEntity.inn = _ХС.ИНН;
		
		_businessEntity.incorporationForm = ВетисDictionary_2_0.IncorporationForm(?(_ХС.ЮрФизЛицо, "12300", "50102"));
		
		//_businessEntity.juridicalAddress = ВетисDictionary_2_0.Address();
		
		//_businessEntity.ogrn = ;
		
		_modificationOperation = ВетисCerberusEnterprise.BusinessEntityModificationOperation(_type, , _businessEntity, _Причина);
		
		_Response = ВетисMercuryApplications.ModifyBusinessEntity(_modificationOperation, _businessEntityGuid, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _Response;
	
КонецФункции

Функция ModifyEnterprise(пПредприятие, пПричина = Неопределено, RegisterModificationType_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = ?(RegisterModificationType_CREATE = Истина, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_issuerId = Ветис.ТекущийХС();
	
	_Предприятие = пПредприятие.ПолучитьОбъект();
	
	Если Ветис.Версия_2_0() Тогда
		
		_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пПредприятие);
		
		_enterprise = ВетисDictionary_2_0.BusinessEntity(_enterpriseGuid);
		
		_enterprise.name = _Предприятие.Наименование;
		
		_enterprise.type = ВетисDictionaryСлой1с.EnterpriseType(_Предприятие.Тип);
		
		_enterprise.address = ВетисDictionary_2_0.Address(ВетисDictionaryСлой1с.Country(_Предприятие.Страна), ВетисDictionaryСлой1с.Region(_Предприятие.Регион), ВетисDictionaryСлой1с.District(_Предприятие.Район), ВетисDictionaryСлой1с.Locality(_Предприятие.НаселенныйПункт));
		
		Для каждого _ВидыДеятельностиСтрока Из _Предприятие.ВидыДеятельности Цикл
			_enterprise.activityList.Добавить(ВетисDictionary_2_0.EnterpriseActivity(_ВидыДеятельностиСтрока.Наименование));
		КонецЦикла;
		
		_enterprise.owner = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_Предприятие.Собственник));
		
		//_enterprise.officialRegistration = 
		
		_modificationOperation = ВетисMercuryVetdocument_2_0.EnterpriseModificationOperation(_type, , _enterprise, _Причина);
		
		_Response = ВетисMercuryApplications_2_0.ModifyEnterprise(_modificationOperation, _issuerId, пОтказ, пОшибка);
		
	Иначе
		
		_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие);
		
		_enterprise = ВетисCerberusEnterprise.BusinessEntity(_enterpriseGuid);
		
		_enterprise.name = _Предприятие.Наименование;
		
		_enterprise.type = ВетисCerberusEnterpriseСлой1с.EnterpriseType(_Предприятие.Тип);
		
		_enterprise.address = ВетисIkar.Address(ВетисIkarСлой1с.Country(_Предприятие.Страна), ВетисIkarСлой1с.Region(_Предприятие.Регион), ВетисIkarСлой1с.District(_Предприятие.Район), ВетисIkarСлой1с.Locality(_Предприятие.НаселенныйПункт));
		
		Для каждого _ВидыДеятельностиСтрока Из _Предприятие.ВидыДеятельности Цикл
			_enterprise.activityList.Добавить(ВетисDictionary_2_0.EnterpriseActivity(_ВидыДеятельностиСтрока.Наименование));
		КонецЦикла;
		
		_enterprise.owner = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_Предприятие.Собственник));
		
		_modificationOperation = ВетисCerberusEnterprise.EnterpriseModificationOperation(_type, , _enterprise, _Причина);
		
		_Response = ВетисMercuryApplications.ModifyEnterprise(_modificationOperation, _issuerId, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _Response;
	
КонецФункции


Функция ПолучитьConsignment(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пSourceStockEntry = Неопределено)
	
	_Consignment = ВетисMercuryVetdocument.Consignment();
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
	
	Если пSourceStockEntry = Неопределено Тогда
		_Consignment.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
		_Consignment.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
	Иначе
		_Количество     = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
		_КоличествоМест = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
		
		Для каждого _StockEntry Из пSourceStockEntry Цикл
			//_StockEntry.
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат _Consignment;
	
КонецФункции

Функция ПолучитьConsignment_20(пСтрокаСЖ, пУпаковка, пКоличество = Неопределено, пКоличествоМест = Неопределено, пSourceStockEntry = Неопределено)
	
	_Consignment = ВетисMercuryVetdocument_2_0.Consignment();
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать_20(_Consignment, пСтрокаСЖ, пУпаковка);
	
	_Consignment.volume = ?(пКоличество = Неопределено, пСтрокаСЖ.Количество, пКоличество);
	
	Если ЗначениеЗаполнено(пСтрокаСЖ.Упаковка) И НЕ пКоличествоМест = Неопределено Тогда
		ВетисDictionaryСлой1с.PackageList(_Consignment.packageList).quantity = пКоличествоМест;
	КонецЕсли;
	
	Возврат _Consignment;
	
КонецФункции

Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь, пВозвратДата = Неопределено)
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	
	Если ЗначениеЗаполнено(пВСД.uuid) Тогда
		_VetDocument.uuid = пВСД.uuid;
	Иначе
		Если пВозврат = Ложь Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
		ИначеЕсли _Версия20 Тогда
			_СтрокаВСД = пВСД.РезультатыОсмотра[0];
			_VetDocument.issueDate      = Ветис.ВремяВетис(пВозвратДата);
			//остальные берем из входящего (возможно это неправильно)
			_VetDocument.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
				ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
				_СтрокаВСД.КонтрольГосВетврачем,
				ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза),
				_СтрокаВСД.БлагополучиеМестности,
				_СтрокаВСД.ОсобыеОтметки //MERC15246 - Особые отметки в сведениях о возврате продукции должны совпадать с указанными в ветеринарно-сопроводительном документе.
				);
			
		Иначе
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = Ветис.ВремяВетис(пВозвратДата);
			//остальные берем из входящего (возможно это неправильно)
			_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(Ветис.Предопределенные_Получить("Purpose.Возврат")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = Ветис.Врач();
			_VetDocument.confirmedDate      = Ветис.ВремяВетис(пВозвратДата);
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь, пВозвратДата = Неопределено)
	
	Если Ветис.Версия_2_0() Тогда
		//Возврат ВетисMercuryVetdocumentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
		_СтрокаТТН = пВСД.ТТН[0];
		
		_waybill = ВетисMercuryVetdocument_2_0.Waybill();
		_waybill.issueSeries   = _СтрокаТТН.Серия;
		_waybill.issueNumber   = _СтрокаТТН.Номер;
		_waybill.issueDate     = Ветис.ВремяВетис(_СтрокаТТН.Дата);
		_waybill.broker        = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_СтрокаТТН.Тип);
		_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		
		Если пВозврат = Истина Тогда
			_waybill.issueSeries   = "";
			_waybill.issueNumber   = "";
			_waybill.issueDate     = Ветис.ВремяВетис(пВозвратДата);
		КонецЕсли;
	Иначе
		//Возврат ВетисArgusShipmentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
		_СтрокаТТН = пВСД.ТТН[0];
		
		_waybill = ВетисArgusShipment.Waybill();
		_waybill.issueSeries   = _СтрокаТТН.Серия;
		_waybill.issueNumber   = _СтрокаТТН.Номер;
		_waybill.issueDate     = Ветис.ВремяВетис(_СтрокаТТН.Дата);
		_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
		_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		
		Если пВозврат = Истина Тогда
			_waybill.issueSeries   = "";
			_waybill.issueNumber   = "";
			_waybill.issueDate     = Ветис.ВремяВетис(пВозвратДата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат _waybill;
	
КонецФункции

Функция Процент(Знач1, Знач2)
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции

