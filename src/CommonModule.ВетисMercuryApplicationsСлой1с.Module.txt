
Процедура MergeOperation() Экспорт
	
КонецПроцедуры


Функция ResolveDiscrepancy(пПредприятие, пСтрокаПартии, discrepancyReport = Неопределено, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	//сделать: тестировать ResolveDiscrepancy
	
	_enterprise = ВетисCerberusEnterprise.Enterprise(ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие));
	
	_inventoryDate = ТекущаяДата();
	
	_responsible = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	
	_stockEntry = ВетисMercuryVetdocument.StockEntry(пСтрокаПартии.guid);
	
	_stockEntry.batch = ВетисMercuryVetdocument.Batch();
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_stockEntry.batch, пСтрокаПартии);
	
	_stockDiscrepancy = ВетисMercuryVetdocument.StockDiscrepancy(_stockEntry);
	
	Если discrepancyReport = Неопределено Тогда
		_discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport();
	Иначе
		_discrepancyReport = discrepancyReport;
	КонецЕсли;
	
	_Response = ВетисMercuryApplications.resolveDiscrepancy(_enterprise, _inventoryDate, _responsible, _stockDiscrepancy, _discrepancyReport, issuerId, пОтказ);
	
КонецФункции

Процедура IncomingOperation(пСтрокаСЖ, пВСД = Неопределено, пОтказ = Ложь) Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	_ВСД = ?(пВСД = Неопределено, _СтрокаСЖ.ВСД, пВСД);
	
	Если НЕ _ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_ВСД.Статус) И НЕ _ВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_всд = _ВСД.ПолучитьОбъект();
	_ттн = _всд.ТТН[0];
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
	
	Если _Версия20 Тогда
		_delivery = ВетисMercuryVetdocument_2_0.Delivery(
			ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)),
			ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
			ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),
			ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения));
	Иначе
		_delivery = ВетисMercuryVetdocument.Delivery(
			_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест),
			_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
	КонецЕсли;
	
	_всдСтрокаСЖ = _ВСД.Товары[0];
	
	_КоличествоФакт     = _СтрокаСЖ.Количество + _СтрокаСЖ.КоличествоВозврат;
	_КоличествоМестФакт = _СтрокаСЖ.КоличествоМест + _СтрокаСЖ.КоличествоМестВозврат;
	
	_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
	_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖ.КоличествоМест);
	
	_СтрокаСЖ.РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
	_СтрокаСЖ.РезультатВетКонтроля = _СтрокаСЖ.РезультатПриема;
	_СтрокаСЖ.РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", ?(_СтрокаСЖ.КоличествоВозврат = 0, "ACCEPT_ALL", "PARTIALLY"))];
	
	_deliveryFacts = _ВетисMercuryVetdocument.DeliveryFactList(
	  _ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатПриема)),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатВетКонтроля), ВетисПараметрыСоединения.Врач()),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_СтрокаСЖ.РешениеОПриеме));
	
	_reason = "";
	_description = "";
	
	//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
	Если _Отклонение > 5 Тогда
		_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
		_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
		_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
		_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
	КонецЕсли;
	
	//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
	Если _ОтклонениеМест > 10 Тогда
		_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖ.КоличествоМест, _всдСтрокаСЖ.КоличествоМест - _КоличествоМестФакт);
		_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖ.КоличествоМест, "больше", "меньше");
		_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
		_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖ.КоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_reason) Тогда
		_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,
			_всд.Дата,
			"Количество " + _reason + ".",
			"В ВСД заявлено " + _description + ".");
	КонецЕсли;
	
	_СтрокаСЖ.АктПричина = _reason;
	_СтрокаСЖ.АктОписание = _description;
	
	Если _СтрокаСЖ.Возврат = Истина Тогда
		Если _Версия20 Тогда
			_returnedDelivery = ВетисMercuryVetdocument_2_0.Delivery(
				ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)),
				ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),//пока тот же который привез
				ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.Транспорт),//пока тот же который привез
				ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)//пока тот же который привез
				);
		Иначе
			_returnedDelivery = ВетисMercuryVetdocument.Delivery(
				ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ПолучитьConsignment(_всд.Товары[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат),
				ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
		КонецЕсли;
	КонецЕсли;
	
	_Response = _ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		Если _vetDocument.type = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			
			_всд.Uuid   = _vetDocument.uuid;
			_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.type);
			_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
			
			//сделать: проверить, возможно здесь надо через ДополнительныеСвойства
			_всд.ОбменДанными.Загрузка = Истина;
			
			Попытка
				_всд.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
				ВызватьИсключение;
			КонецПопытки;
			
		ИначеЕсли _vetDocument.type = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			
			Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
				_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
			Иначе
				_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				_возвратный.Дата = ТекущаяДата();
			КонецЕсли;
			
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
			
			_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
			
			Попытка
				_возвратный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
				ВызватьИсключение;
			КонецПопытки;
			
			_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _stockEntry Из _Response.stockEntry Цикл
		_СтрокаСЖ.guid = _stockEntry.guid;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура TransportOperation(пДокумент, пСтрокаПартии, пСтрокаВСД, пСтрокаТТН, пОтказ = Ложь) Экспорт
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисBase = ?(_Версия20, ВетисDictionary_2_0, ВетисBase);
	_ВетисArgusProduction = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusProduction);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисArgusShipment = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusShipment);
	_ВетисArgusShipmentСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusShipmentСлой1с);
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисProductService = ?(_Версия20, ВетисProductService_2_0, ВетисProductService);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_СтрокаСЖ  = пСтрокаПартии;
	_СтрокаВСД = пСтрокаВСД;
	_СтрокаТТН = пСтрокаТТН;
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ПолучательПредприятие);
	
	_unitGuid = _ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения);
	_unit     = _ВетисArgusCommon.Unit(_unitGuid);
	
	_Consignment = _ВетисMercuryVetdocument.Consignment();
	_Consignment.volume           = _СтрокаСЖ.Количество;
	_Consignment.unit             = _unit;
	_Consignment.packingList      = _ВетисArgusCommon.PackingFormList(_ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
	_Consignment.packingAmount    = _СтрокаСЖ.КоличествоМест;
	_Consignment.sourceStockEntry = _ВетисMercuryVetdocument.StockEntry(_СтрокаСЖ.guid);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
	_VetDocument.transportInfo      = _ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_VetDocument.transportStorageType = _ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
	_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
	_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
	_VetDocument.confirmedBy        = ВетисПараметрыСоединения.Врач();
	_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
	
	_waybill = _ВетисArgusShipment.Waybill();
	_waybill.issueSeries   = _СтрокаТТН.Серия;
	_waybill.issueNumber   = _СтрокаТТН.Номер;
	_waybill.issueDate     = ВетисОбщегоНазначения.ВремяВетис(_СтрокаТТН.Дата);
	_waybill.type          = _ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
	_waybill.transportInfo = _ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
	_waybill.transportStorageType = _ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
	
	_delivery = ВетисMercuryVetdocument.Delivery(
		_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
		_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
		_Consignment,
		_ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument));
	
	Если _Версия20 Тогда
		_Response = ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(_delivery, _Отправитель, пОтказ);
	Иначе
		_Response = ВетисMercuryApplications.prepareOutcomingConsignment(_delivery, _Отправитель, пОтказ);
	КонецЕсли;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 
	
КонецПроцедуры

Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь) Экспорт
	
	Если НЕ пСсылка.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ пСсылка.Тип = Перечисления.ВетисVetDocumentType.Транспортный Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	Если ВетисXSD.Версия_2_0() Тогда
		_Reason = ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason(пПричина);
		
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications_2_0.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	Иначе
		_Reason = ВетисMercuryVetdocument.WithdrawReason(пПричина);
		
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	КонецЕсли;
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response.VetDocument);
	
	//_док.ДатаОбновления = ТекущаяДата();
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры

Процедура СинхронизироватьСкладскойЖурнал(пХС, пПредприятие) Экспорт
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
	
	_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие);
	
	_запрос = Новый Запрос("ВЫБРАТЬ ЕСТЬNULL(МАКСИМУМ(updateDate), ДАТАВРЕМЯ(1,1,1)) КАК Период ИЗ РегистрСведений.ВетисСкладскойЖурналРС");
	_выборка = _запрос.Выполнить().Выбрать();
	_выборка.Следующий();
	
	Пока _ВетисMercuryApplications.getStockEntryChangesListСледующий(_enterpriseGuid, _issuerId, _выборка.Период + 1, , _stockEntry, _параметры) Цикл
		
		_мз = РегистрыСведений.ВетисСкладскойЖурналРС.СоздатьМенеджерЗаписи();
		
		_мз.guid = _stockEntry.guid;
		_мз.uuid = _stockEntry.uuid;
		_мз.last = _stockEntry.last;
		
		_мз.status = _stockEntry.status;
		_мз._active = _stockEntry.active;
		_мз.entryNumber = _stockEntry.entryNumber;
		
		_мз.createDate = ВетисОбщегоНазначения.ВремяБД(_stockEntry.createDate);
		_мз.updateDate = ВетисОбщегоНазначения.ВремяБД(_stockEntry.updateDate);
		
		_мз.ProductType = _stockEntry.batch.productType;
		_мз.Product     = _stockEntry.batch.product.guid;
		_мз.SubProduct  = _stockEntry.batch.subProduct.guid;
		_мз.ProductItem = _stockEntry.batch.productItem.guid;
		
		_мз.Unit        = _stockEntry.batch.unit.guid;
		_мз.volume      = _stockEntry.batch.volume;
		
		Если _Версия20 Тогда
			//_мз.PackingForm = ?(_stockEntry.batch.productItem.packaging = Неопределено, "", _stockEntry.batch.productItem.packaging.packagingType.guid);
			//_мз.packingAmount = ?(_stockEntry.batch.productItem.packaging = Неопределено, 0, _stockEntry.batch.productItem.packaging.quantity);
			_package = ВетисDictionaryСлой1с.PackageList(_stockEntry.batch.packageList);
			_мз.PackingForm   = _package.packingType.guid;
			_мз.packingAmount = _package.quantity;
		Иначе
			_мз.PackingForm = ?(_stockEntry.batch.packingList = Неопределено, "", _stockEntry.batch.packingList.packingForm[0].uuid);
			_мз.packingAmount = _stockEntry.batch.packingAmount;
		КонецЕсли;
		
		_мз.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


Функция getVetDocumentByUuid(пВСД, пВСДОбъект = Неопределено) Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(ВетисXSD.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(ВетисXSD.Версия_2_0(), ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Если Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	_vetDocument = _ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId);
	
	Если пВСДОбъект = Неопределено Тогда
		Возврат _vetDocument;
	Иначе
		Если ТипЗнч(пВСДОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
			ИЛИ ТипЗнч(пВСДОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			_ВСДОбъект = пВСДОбъект;
		Иначе
			_ВСДОбъект = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
		КонецЕсли;
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_ВСДОбъект, _vetDocument);
		
		//_ВСДОбъект.ДатаОбновления = ТекущаяДата();
		
		Возврат _ВСДОбъект;
		
	КонецЕсли;
	
КонецФункции


Функция ПолучитьConsignment(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пSourceStockEntry = Неопределено)
	
	Если ВетисXSD.Версия_2_0() Тогда
		_Consignment = ВетисMercuryVetdocument_2_0.Consignment();
		
		ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
		
		_Consignment.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
		
		Если НЕ пКоличествоМест = Неопределено Тогда
			ВетисDictionaryСлой1с.PackageList(_Consignment.packageList).quantity = пКоличествоМест;
		КонецЕсли;
		
	Иначе
		_Consignment = ВетисMercuryVetdocument.Consignment();
		ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
		
		Если пSourceStockEntry = Неопределено Тогда
			_Consignment.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
			_Consignment.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
		Иначе
			_Количество     = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
			_КоличествоМест = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
			
			Для каждого _StockEntry Из пSourceStockEntry Цикл
				//_StockEntry.
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Consignment;
	
КонецФункции

Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь)
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	
	Если ЗначениеЗаполнено(пВСД.uuid) Тогда
		_VetDocument.uuid = пВСД.uuid;
	Иначе
		Если пВозврат = Ложь Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
		ИначеЕсли _Версия20 Тогда
			_СтрокаВСД = пВСД.РезультатыОсмотра[0];
			_VetDocument.issueDate      = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
				ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
				_СтрокаВСД.КонтрольГосВетврачем,
				ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза),
				_СтрокаВСД.БлагополучиеМестности,
				_СтрокаВСД.ОсобыеОтметки);
			
		Иначе
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(ВетисПредопределенные.Получить("Purpose.Возврат")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = ВетисПараметрыСоединения.Врач();
			_VetDocument.confirmedDate      = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь)
	
	Если ВетисXSD.Версия_2_0() Тогда
		//Возврат ВетисMercuryVetdocumentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
		_СтрокаТТН = пВСД.ТТН[0];
		
		_waybill = ВетисMercuryVetdocument_2_0.Waybill();
		_waybill.issueSeries   = _СтрокаТТН.Серия;
		_waybill.issueNumber   = _СтрокаТТН.Номер;
		_waybill.issueDate     = ВетисОбщегоНазначения.ВремяВетис(_СтрокаТТН.Дата);
		_waybill.broker        = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_СтрокаТТН.Тип);
		_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		
		Если пВозврат = Истина Тогда
			_waybill.issueSeries   = "";
			_waybill.issueNumber   = "";
			_waybill.issueDate     = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
		КонецЕсли;
	Иначе
		//Возврат ВетисArgusShipmentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
		_СтрокаТТН = пВСД.ТТН[0];
		
		_waybill = ВетисArgusShipment.Waybill();
		_waybill.issueSeries   = _СтрокаТТН.Серия;
		_waybill.issueNumber   = _СтрокаТТН.Номер;
		_waybill.issueDate     = ВетисОбщегоНазначения.ВремяВетис(_СтрокаТТН.Дата);
		_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_СтрокаТТН.Тип);
		_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		
		Если пВозврат = Истина Тогда
			_waybill.issueSeries   = "";
			_waybill.issueNumber   = "";
			_waybill.issueDate     = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат _waybill;
	
КонецФункции

Функция Процент(Знач1, Знач2)
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции

