
Процедура MergeOperation() Экспорт
	
КонецПроцедуры


Процедура IncomingOperation(пСтрокаСЖ, пОтказ = Ложь) Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	Если НЕ _СтрокаСЖ.ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_СтрокаСЖ.ВСД.Статус) И НЕ _СтрокаСЖ.ВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_всд = _СтрокаСЖ.ВСД.ПолучитьОбъект();
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
	
	_delivery = _ВетисMercuryVetdocument.Delivery(
		_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
		_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
		ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест, _ВетисMercuryVetdocument.Consignment()),
		_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
	
	_всдСтрокаСЖ = _СтрокаСЖ.ВСД.СкладскойЖурнал[0];
	
	_КоличествоФакт     = _СтрокаСЖ.Количество + _СтрокаСЖ.КоличествоВозврат;
	_КоличествоМестФакт = _СтрокаСЖ.КоличествоМест + _СтрокаСЖ.КоличествоМестВозврат;
	
	_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
	_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖ.КоличествоМест);
	
	_СтрокаСЖ.РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
	_СтрокаСЖ.РезультатВетКонтроля = _СтрокаСЖ.РезультатПриема;
	_СтрокаСЖ.РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", ?(_СтрокаСЖ.КоличествоВозврат = 0, "ACCEPT_ALL", "PARTIALLY"))];
	
	_deliveryFacts = _ВетисMercuryVetdocument.DeliveryFactList(
	  _ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатПриема)),
	  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_СтрокаСЖ.РезультатВетКонтроля), ВетисПараметрыСоединения.Врач()),
	  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_СтрокаСЖ.РешениеОПриеме));
	
	_reason = "";
	_description = "";
	
	//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
	Если _Отклонение > 5 Тогда
		_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
		_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
		_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
		_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
	КонецЕсли;
	
	//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
	Если _ОтклонениеМест > 10 Тогда
		_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖ.КоличествоМест, _всдСтрокаСЖ.КоличествоМест - _КоличествоМестФакт);
		_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖ.КоличествоМест, "больше", "меньше");
		_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
		_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖ.КоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_reason) Тогда
		_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,
			_всд.Дата,
			"Количество " + _reason + ".",
			"В ВСД заявлено " + _description + ".");
	КонецЕсли;
	
	_СтрокаСЖ.АктПричина = _reason;
	_СтрокаСЖ.АктОписание = _description;
	
	Если _СтрокаСЖ.Возврат = Истина Тогда
		_returnedDelivery = _ВетисMercuryVetdocument.Delivery(
			_ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			_ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.КоличествоВозврат, _СтрокаСЖ.КоличествоМестВозврат, _ВетисMercuryVetdocument.Consignment()),
			_ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд, Истина), ПолучитьVetDocument(_всд, Истина)));
	КонецЕсли;
	
	_Response = _ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		Если _vetDocument.type = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			
			_всд.Uuid   = _vetDocument.uuid;
			_всд.Тип    = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_vetDocument.type);
			_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
			
			//сделать: проверить, возможно здесь надо через ДополнительныеСвойства
			_всд.ОбменДанными.Загрузка = Истина;
			
			Попытка
				_всд.Записать();
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
				ВызватьИсключение;
			КонецПопытки;
			
		ИначеЕсли _vetDocument.type = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			
			Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
				_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
			Иначе
				_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				_возвратный.Дата = ТекущаяДата();
			КонецЕсли;
			
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
			
			_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
			
			Попытка
				_возвратный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
				ВызватьИсключение;
			КонецПопытки;
			
			_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _stockEntry Из _Response.stockEntry Цикл
		_СтрокаСЖ.guid = _stockEntry.guid;
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура TransportOperation(пСтрокаСЖ, пПартии, пОтказ = Ложь) Экспорт
	
	_СтрокаСЖ = пСтрокаСЖ;
	
	Если НЕ _СтрокаСЖ.ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_СтрокаСЖ.ВСД.Статус) И НЕ _СтрокаСЖ.ВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_всд = _СтрокаСЖ.ВСД.ПолучитьОбъект();
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		_Отправитель = ВетисDictionaryСлой1с.BusinessEntity(_всд.Отправитель);
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(_всд.Получатель);
		
		_ОтправительПредприятие = ВетисDictionaryСлой1с.Enterprise(_всд.ОтправительПредприятие);
		_ПолучательПредприятие = ВетисDictionaryСлой1с.Enterprise(_всд.ПолучательПредприятие);
		
		_delivery = ВетисMercuryVetdocument_2_0.Delivery(
			ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест, ВетисMercuryVetdocument_2_0.Consignment()),
			ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
		
		_Response = ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(_delivery, _Получатель, пОтказ);
		
	Иначе
		_Отправитель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Отправитель);
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.Получатель);
		
		_ОтправительПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ОтправительПредприятие);
		_ПолучательПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.ПолучательПредприятие);
		
		_delivery = ВетисMercuryVetdocument.Delivery(
			ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			ПолучитьBatch(_всд.СкладскойЖурнал[0], _СтрокаСЖ.Количество, _СтрокаСЖ.КоличествоМест, ВетисMercuryVetdocument.Consignment()),
			ВетисMercuryVetdocument.ConsignmentDocumentList(ПолучитьWaybill(_всд), ПолучитьVetDocument(_всд)));
		
		_Response = ВетисMercuryApplications.prepareOutcomingConsignment(_delivery, _Получатель, пОтказ);
		
	КонецЕсли;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 

	
КонецПроцедуры

Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь) Экспорт
	
	Если НЕ пСсылка.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ пСсылка.Тип = Перечисления.ВетисVetDocumentType.Транспортный Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		_Reason = ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason(пПричина);
		
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications_2_0.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	Иначе
		_Reason = ВетисMercuryVetdocument.WithdrawReason(пПричина);
		
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ);
	КонецЕсли;
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response.VetDocument);
	
	_док.ДатаОбновления = ТекущаяДата();
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры


Функция getVetDocumentByUuid(пВСД, пВСДОбъект = Неопределено) Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Если Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий")
		ИЛИ пВСД.Тип = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный")
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	_vetDocument = _ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId);
	
	Если пВСДОбъект = Неопределено Тогда
		Возврат _vetDocument;
	Иначе
		Если ТипЗнч(пВСДОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
			ИЛИ ТипЗнч(пВСДОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			_ВСДОбъект = пВСДОбъект;
		Иначе
			_ВСДОбъект = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
		КонецЕсли;
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_ВСДОбъект, _vetDocument);
		
		_ВСДОбъект.ДатаОбновления = ТекущаяДата();
		
		Возврат _ВСДОбъект;
		
	КонецЕсли;
	
КонецФункции

// Предназначена для получения всех ВСД предприятия
// Используется самостоятельно в цикле Пока.
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  issuerId       - Идентификатор ХС
//  пItem          - элемент списка, возвращаемый параметр
//  пПараметры     - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево         - Ложь значит список пройден весь
Функция GetVetDocumentListСледующий(enterpriseGuid, issuerId = Неопределено, пItem, пПараметры) Экспорт
	
	Если ВетисОбщегоНазначения.ВерсияРавно("2.0") Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentListСледующий(enterpriseGuid, issuerId, пItem, пПараметры);
	Иначе
		Возврат ВетисMercuryApplications.GetVetDocumentListСледующий(enterpriseGuid, issuerId, пItem, пПараметры);
	КонецЕсли;
	
	
КонецФункции


Функция ПолучитьBatch(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пОбъект = Неопределено)
	
	_ВетисMercuryVetdocument = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	Если пОбъект = Неопределено Тогда
		_batch = _ВетисMercuryVetdocument.Batch();
	Иначе
		_batch = пОбъект;
	КонецЕсли;
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_batch, пСтрокаСЖ);
	
	_batch.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
	_batch.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
	
	Возврат _batch;
	
КонецФункции

Функция ПолучитьConsignment(пСтрокаСЖ, пКоличество = Неопределено, пКоличествоМест = Неопределено, пSourceStockEntry = Неопределено)
	
	_ВетисMercuryVetdocument = ?(ВетисОбщегоНазначения.ВерсияРавно("2.0"), ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	_Consignment = _ВетисMercuryVetdocument.Consignment();
	
	ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_Consignment, пСтрокаСЖ);
	
	Если пSourceStockEntry = Неопределено Тогда
		_Consignment.volume           = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
		_Consignment.packingAmount    = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
	Иначе
		_Количество     = ?(пКоличество     = Неопределено, пСтрокаСЖ.Количество, пКоличество);
		_КоличествоМест = ?(пКоличествоМест = Неопределено, пСтрокаСЖ.КоличествоМест, пКоличествоМест);
		
		Для каждого _StockEntry Из пSourceStockEntry Цикл
			//_StockEntry.
		КонецЦикла;
		
	КонецЕсли;
	
	//Возврат _batch;
	
КонецФункции


Функция ПолучитьVetDocument(пВСД, пВозврат = Ложь)
	
	_Версия20 = ВетисОбщегоНазначения.ВерсияРавно("2.0");
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_VetDocument = _ВетисMercuryVetdocument.VetDocument();
	
	Если пВСД.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		_VetDocument.uuid = пВСД.uuid;
	Иначе
		Если пВозврат = Ложь Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, пВСД);
		Иначе
			_СтрокаВСД = пВСД.ВСД[0];
			_VetDocument.issueDate          = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.purpose            = _ВетисArgusCommon.Purpose(_ВетисArgusCommonСлой1с.Purpose(ВетисПредопределенные.Получить("Purpose.ВозвратГруза")));
			_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
			_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
			_VetDocument.confirmedBy        = ВетисПараметрыСоединения.Врач();
			_VetDocument.confirmedDate      = ВетисОбщегоНазначения.ВремяВетис(пВСД.Дата);
			_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
			_VetDocument.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _VetDocument;
	
КонецФункции

Функция ПолучитьWaybill(пВСД, пВозврат = Ложь)
	
	Возврат ВетисArgusShipmentСлой1с.WaybillКонвертировать(пВСД.ТТН[0], пВСД.Дата, пВозврат);
	
КонецФункции

Функция Процент(Знач1, Знач2) Экспорт
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции
