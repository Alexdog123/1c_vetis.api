
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СправочникСписок.ПроизвольныйЗапрос = Истина;
	СправочникСписок.ОсновнаяТаблица = ВетисИмяСправочника.BusinessEntity("Справочник");
	СправочникСписок.ТекстЗапроса =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Таблица.ИНН,
	|	_Таблица.КПП,
	|	_Ветис.guid КАК guid,
	|	_Ветис.name КАК Ветисname,
	|	_Ветис.Описание КАК ВетисОписание
	|ИЗ
	|	Справочник."+ВетисИмяСправочника.BusinessEntity()+" КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа";
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаНайтиПоGuid(Команда)
	
	СписокВетисЗаполнитьПоGuidСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	СписокВетисЗаполнитьСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаСопоставитьАвтоматически(Команда)
	
	_оо = Новый ОписаниеОповещения("КомандаСопоставитьАвтоматическиВопросОбработкаОповещения", ЭтаФорма, "Только выделенные");
	
	ПоказатьВопрос(_оо, "Только выделенные?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСопоставитьАвтоматическиВопросОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если Параметр = "Только выделенные" Тогда
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			СопоставитьАвтоматическиСервер(Истина);
			
			Элементы.СправочникСписок.Обновить();
			
		Иначе
			
			_оо = Новый ОписаниеОповещения("КомандаСопоставитьАвтоматическиВопросОбработкаОповещения", ЭтаФорма, "длительная операция");
			
			ПоказатьВопрос(_оо, "Это длительная операция без отображения прогресса. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	ИначеЕсли Параметр = "длительная операция" Тогда
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			СопоставитьАвтоматическиСервер();
			
			Элементы.СправочникСписок.Обновить();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура КомандаСоздатьСвязь(Команда)
	
	ТекущиеДанные = Элементы.СправочникСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение("Необходимо заполнить справочник ""Контрагенты""");
		Возврат;
	КонецЕсли;
	
	СоздатьСвязьСервер(ТекущиеДанные.Ссылка);
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправочникДобавить(Команда)
	
	Форма = ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта");
	
	_ТекущиеДанные = Элементы.СписокВетис.ТекущиеДанные;
	
	Если НЕ _ТекущиеДанные = Неопределено Тогда
		Форма.Объект.Наименование = _ТекущиеДанные.name;
		Форма.Объект.ИНН = _ТекущиеДанные.inn;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СписокВетисЗаполнитьСервер()
	
	Перем _businessEntity, _параметры;
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисEnterpriseService = ?(_Версия20, ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	СписокВетис.Очистить();
	
	_Отбор = Новый Структура;
	
	Если ОтборИмяИспользование Тогда
		_Отбор.Вставить("name", ОтборИмя);
	КонецЕсли;
	
	Если ОтборПолноеИмяИспользование Тогда
		_Отбор.Вставить("fullName", ОтборПолноеИмя);
	КонецЕсли;
	
	Если ОтборИННИспользование Тогда
		_Отбор.Вставить("inn", ОтборИНН);
	КонецЕсли;
	
	Если ОтборФИОИспользование Тогда
		_Отбор.Вставить("fio", ОтборФИО);
	КонецЕсли;
	
	Если ОтборРайонИспользование ИЛИ ОтборРегионИспользование Тогда
		_отборадрес = Новый Структура();
		Если ОтборРегионИспользование Тогда
			_отборадрес.Вставить("region", Новый Структура("guid", ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Region(ОтборРегион)));
		КонецЕсли;
		Если ОтборРайонИспользование Тогда
			_отборадрес.Вставить("district", Новый Структура("guid", ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).District(ОтборРайон)));
		КонецЕсли;
		_отбор.Вставить("juridicalAddress", _отборадрес);
	КонецЕсли;
	
	Пока _ВетисEnterpriseService.GetBusinessEntityListСледующий(_Отбор, _businessEntity, _параметры) Цикл
		
		_СписокВетисСтрока = СписокВетис.Добавить();
		
		ЗаполнитьЗначенияСвойств(_СписокВетисСтрока, _businessEntity);
		
		_СписокВетисСтрока.type = _ВетисCerberusEnterpriseСлой1с.BusinessEntityType(_businessEntity.type);
		
		Если _СписокВетисСтрока.type = Перечисления.ВетисBusinessEntityType.ЮрЛицо Тогда
			Если ЗначениеЗаполнено(_businessEntity.fullName) Тогда
				_СписокВетисСтрока.name = _businessEntity.fullName;
			КонецЕсли;
		Иначе
			_СписокВетисСтрока.name = _businessEntity.fio;
		КонецЕсли;
		
		_СписокВетисСтрока.address = _businessEntity.juridicalAddress.addressView;
		
		Если МаксимальноеКоличество > 0 И СписокВетис.Количество() >= МаксимальноеКоличество Тогда Прервать; КонецЕсли;
		
	КонецЦикла;
	
	СписокВетис.Сортировать("name");
	
КонецПроцедуры

&НаСервере
Процедура СписокВетисЗаполнитьПоGuidСервер()
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисEnterpriseService = ?(_Версия20, ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);

	_businessEntity = _ВетисEnterpriseService.GetBusinessEntityByGuid(ОтборGuid);
	
	_СписокВетисСтрока = СписокВетис.Добавить();
	
	ЗаполнитьЗначенияСвойств(_СписокВетисСтрока, _businessEntity);
	
	_СписокВетисСтрока.type = _ВетисCerberusEnterpriseСлой1с.BusinessEntityType(_businessEntity.type);
	
	Если _СписокВетисСтрока.type = Перечисления.ВетисBusinessEntityType.ЮрЛицо Тогда
		Если ЗначениеЗаполнено(_businessEntity.fullName) Тогда
			_СписокВетисСтрока.name = _businessEntity.fullName;
		КонецЕсли;
	Иначе
		_СписокВетисСтрока.name = _businessEntity.fio;
	КонецЕсли;
	
	_СписокВетисСтрока.address = _businessEntity.juridicalAddress.addressView;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьАвтоматическиСервер(пТолькоВыделенныеСтроки = Ложь)
	
	//сопоставляет автоматически по ИНН
	
	_Версия20 = ВетисXSD.Версия_2_0();
	_ВетисEnterpriseService = ?(_Версия20, ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ИНН,
	|	_Таблица.Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|//ос	И _Таблица.Ссылка В (&Список)
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа
	|	И ИСТИНА";
	
	//если больше одной строки, то пройдем только по выделенным
	Если пТолькоВыделенныеСтроки = Ложь Тогда
		//
	ИначеЕсли Элементы.СправочникСписок.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	Иначе
		Запрос.УстановитьПараметр("Список", Элементы.СправочникСписок.ВыделенныеСтроки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ос", "");
	КонецЕсли;
	
	_список = Запрос.Выполнить().Выгрузить();
	
	Для Каждого _ТекДанные из _список Цикл 
		
		Если ЗначениеЗаполнено(_ТекДанные.ИНН) Тогда
			
			_Отбор          = Новый Структура("inn", _ТекДанные.ИНН);
			_businessEntity = Неопределено;
			_параметры      = Неопределено;
			
			Пока _ВетисEnterpriseService.GetBusinessEntityListСледующий(_Отбор, _businessEntity, _параметры) Цикл
				
				_name = _businessEntity.name;
				
				Если _businessEntity.type = ВетисКонстанты.BusinessEntityType_JURIDICAL() Тогда
					Если ЗначениеЗаполнено(_businessEntity.fullName) Тогда
						_name = _businessEntity.fullName;
					КонецЕсли;
				Иначе
					_name = _businessEntity.fio;
				КонецЕсли;
				
				ВетисСоответствие.Добавить(_ТекДанные.Ссылка, _businessEntity.guid, _name, _businessEntity.inn);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура СоздатьСвязьСервер(пСсылка) Экспорт
	
	_ТекДанные = СписокВетис.НайтиПоИдентификатору(Элементы.СписокВетис.ТекущаяСтрока);
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Добавить(_ТекДанные1с.Ссылка, _ТекДанные.guid, _ТекДанные.name, _ТекДанные.inn);
			
		КонецЦикла;
		
	Иначе
		ВетисСоответствие.Добавить(пСсылка, _ТекДанные.guid, _ТекДанные.name, _ТекДанные.inn);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
			
		КонецЦикла;
	Иначе
		_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
		
		ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВетисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	_ТекДанные = Элементы.СписокВетис.ТекущиеДанные;
	
	Элементы.СправочникСписок.ТекущаяСтрока = СправочникСписокНайти(_ТекДанные.name)
	
КонецПроцедуры

&НаСервере
Функция СправочникСписокНайти(пНаименование)
	
	Возврат Справочники[ВетисИмяСправочника.BusinessEntity()].НайтиПоНаименованию(пНаименование);
	
КонецФункции


&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	
	ОтборПолноеИмя = _ТекДанные.Наименование;
	
	ОтборИНН = _ТекДанные.ИНН;
	
КонецПроцедуры
