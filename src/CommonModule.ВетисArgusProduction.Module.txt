
// Тип, описывающий тип продукции.
Функция ProductTypeОписание(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат "Мясо и мясопродукты";
	ИначеЕсли value = 2 Тогда
		Возврат "Корма и кормовые добавки";
	ИначеЕсли value = 3 Тогда
		Возврат "Живые животные";
	ИначеЕсли value = 4 Тогда
		Возврат "Лекарственные средства";
	ИначеЕсли value = 5 Тогда
		Возврат "Пищевые продукты";
	ИначеЕсли value = 6 Тогда
		Возврат "Непищевые продукты и другое";
	ИначеЕсли value = 7 Тогда
		Возврат "Рыба и морепродукты";
	ИначеЕсли value = 8 Тогда
		Возврат "Продукция, не требующая разрешения";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductTypeСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	Для _Индекс = 1 По 8 Цикл
		_Список.Добавить(_Индекс, ProductTypeОписание(_Индекс));
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции


// Тип, описывающий продукцию.
// Параметры:
//  guid - Строка - guid
//       - Структура - структура со значениями свойств
Функция Product(guid = Неопределено) Экспорт
	
	_Объект = Создать("Product");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция ProductListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "product");
	
КонецФункции


// Тип, описывающий вид продукции.
// Параметры:
//  guid - Строка - guid
//       - Структура - структура со значениями свойств
Функция SubProduct(guid = Неопределено) Экспорт
	
	_Объект = Создать("SubProduct");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция SubProductListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "subProduct");
	
КонецФункции


// Тип, описывающий наименование продукции.
// Параметры:
//  guid - Строка - guid
//       - Структура - структура со значениями свойств
Функция ProductItem(guid = Неопределено) Экспорт
	
	_Объект = Создать("ProductItem");
	
	ВетисОбщегоНазначения.ЗаполнитьОбъект(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция ProductItemListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "productItem");
	
КонецФункции


#Область Service

// Предназначена для получения записи продукции
Функция GetProductByGuid(guid) Экспорт
	
	Попытка
		Возврат Прокси().GetProductByGuid(guid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для получения записи о виде продукции
Функция GetSubProductByGuid(guid) Экспорт
	
	Попытка
		Возврат Прокси().GetSubProductByGuid(guid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// предназначена для получения записи о номенклатуре производителя
Функция GetProductItemByGuid(guid) Экспорт
	
	Попытка
		Возврат Прокси().GetProductItemByGuid(guid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции


// Предназначена для получения списка продукции по указанному типу.
Функция GetProductByTypeList(productType, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductByTypeList(пListOptions, productType)
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция GetProductByTypeListСледующий_(пListResponse, productType, пListOptions) Экспорт
	
	Если пListOptions.offset + пListOptions.count >= Число(пListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
		Попытка
			пListResponse = Прокси().GetProductByTypeList(пListOptions, productType);
		Исключение
			ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
			ВызватьИсключение;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Предназначена для Выборки продукции по указанному типу.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductByTypeListСледующий(productType, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.product[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		_ListResponse = Прокси().GetProductByTypeList(пПараметры.ListOptions, productType);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.product[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка видов продукции, отфильтрованного по указанному продукту.
Функция GetSubProductByProductList(productGuid, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetSubProductByProductList(пListOptions, productGuid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Используется совместно с GetSubProductByProductList
Функция GetSubProductByProductListСледующий_(пListResponse, productGuid, пListOptions) Экспорт
	
	Если пListOptions.offset + пListOptions.count >= Число(пListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
		Попытка
			пListResponse = Прокси().GetSubProductByProductList(пListOptions, productGuid);
		Исключение
			ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
			ВызватьИсключение;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Предназначена для выборки видов продукции, отфильтрованного по указанному продукту.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productGuid - ссылка на продукт
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetSubProductByProductListСледующий(productGuid, пItem, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		_ListResponse = Прокси().GetSubProductByProductList(пПараметры.ListOptions, productGuid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.subProduct[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Предназначена для получения списка наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
Функция GetProductItemList(subProductGuid, enterpriseGuid, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Попытка
		Возврат Прокси().GetProductItemList(ListOptions, subProductGuid, enterpriseGuid);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

// Предназначена для выборки наименований продукции отфильтрованных по указанному продукту
// по номенклатуре определенного предприятия-производителя.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  productType - тип продукта
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetProductItemListСледующий(productType, Item, пПараметры) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.productItem[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Прокси().GetProductItemList(пПараметры.ListOptions, productType);
	Исключение
		ВетисЖурнал.ДобавитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = пПараметры.ListResponse.productItem[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция Прокси()
	
	_Прокси = WSСсылки.ProductServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/argus/production";
	
КонецФункции
