
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	КомандаЗаполнитьНаСервере();
	
	Элементы.Список.Обновить();
	
	КомандаОтборПерейти(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборПерейти(Команда)
	
	Если ОтборНаселенныйПунктИспользование Тогда
		Элементы.Список.ТекущаяСтрока = ОтборНаселенныйПункт;
	ИначеЕсли ОтборРайонИспользование Тогда
		Элементы.Список.ТекущаяСтрока = ОтборРайон;
	ИначеЕсли ОтборРегионИспользование Тогда
		Элементы.Список.ТекущаяСтрока = ОтборРегион;
	ИначеЕсли ОтборСтранаИспользование Тогда
		Элементы.Список.ТекущаяСтрока = ОтборСтрана;
	Иначе
		Элементы.Список.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьПомеченные(Команда)
	
	ВетисОбщегоНазначения.УдалитьПомеченныеОбъекты("Справочник.ВетисAddress");
	
	Элементы.Список.Обновить();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборИспользованиеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтранаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	_оо = Новый ОписаниеОповещения("ОтборОбработкаОповещения", ЭтаФорма, "ОтборСтрана");
	
	_параметры = Новый Структура("Отборы", Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ВетисТипАдреса.Страна")));
	
	ВетисФормы.AddressФормаВыбора(ЭтаФорма, _оо, СтандартнаяОбработка, ОтборСтрана, , _параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРегионНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	_оо = Новый ОписаниеОповещения("ОтборОбработкаОповещения", ЭтаФорма, "ОтборРегион");
	
	_параметры = Новый Структура("Отображение,Отборы", "Список", Новый Структура("Тип", ПредопределенноеЗначение("Перечисление.ВетисТипАдреса.Регион")));
	
	ВетисФормы.AddressФормаВыбора(ЭтаФорма, _оо, СтандартнаяОбработка, ОтборРегион, ОтборСтрана, _параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Выполнить (Параметр + " = Результат;");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимость()
	
	ОтборРегионИспользование = ОтборРегионИспользование И ОтборСтранаИспользование;
	ОтборРайонИспользование = ОтборРайонИспользование И ОтборРегионИспользование И ОтборСтранаИспользование;
	ОтборНаселенныйПунктИспользование = ОтборНаселенныйПунктИспользование И ОтборРайонИспользование И ОтборРегионИспользование И ОтборСтранаИспользование;
	
	Элементы.ОтборСтрана.Доступность = ОтборСтранаИспользование;
	Элементы.ОтборРегион.Доступность = ОтборРегионИспользование;
	Элементы.ОтборРайон.Доступность = ОтборРайонИспользование;
	Элементы.ОтборНаселенныйПункт.Доступность = ОтборНаселенныйПунктИспользование;
	
	Элементы.ОтборРегионИспользование.Доступность = ОтборСтранаИспользование;
	Элементы.ОтборРайонИспользование.Доступность = ОтборРегионИспользование;
	Элементы.ОтборНаселенныйПунктИспользование.Доступность = ОтборРайонИспользование;
	
КонецПроцедуры


&НаСервере
Процедура КомандаЗаполнитьНаСервере(пВсеУровни = Ложь)
	
	Перем _Item, _параметры;
	
	Если ОтборНаселенныйПунктИспользование Тогда
		_Родитель = ОтборНаселенныйПункт;
	ИначеЕсли ОтборРайонИспользование Тогда
		_Родитель = ОтборРайон;
	ИначеЕсли ОтборРегионИспользование Тогда
		_Родитель = ОтборРегион;
	ИначеЕсли ОтборСтранаИспользование Тогда
		_Родитель = ОтборСтрана;
	Иначе
		_Родитель = Справочники.ВетисAddress.ПустаяСсылка();
	КонецЕсли;
	
	_ВсеУровни = ОтборВсеУровни;
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("owner", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("type", Новый ОписаниеТипов("ПеречислениеСсылка.ВетисТипАдреса"));
	
	_Версия20 = ВетисXSD.Версия_2_0();
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	//_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	
	
	_typeC = Перечисления.ВетисТипАдреса.Страна;
	_typeR = Перечисления.ВетисТипАдреса.Регион;
	_typeD = Перечисления.ВетисТипАдреса.Район;
	_typeL = Перечисления.ВетисТипАдреса.НаселенныйПункт;
	
	Если ЗначениеЗаполнено(_Родитель) Тогда
		
		_Тип = _Родитель.Тип;
		Если _Тип = _typeC Тогда
			//_country = _ВетисIkarСлой1с.Country(_Родитель);
			_country = ВетисСоответствие.ПолучитьСсылку(_Родитель, "Справочник.ВетисAddress");
			_region = Неопределено; _параметрыR = Неопределено;
			Пока _Service.GetRegionListByCountryСледующий(_country, _region, _параметрыR) Цикл
				ТаблицаВетисДобавить(_ТаблицаВетис, _region, _typeR, _country);
				Если _ВсеУровни = Истина Тогда
					_district = Неопределено; _параметрыD = Неопределено;
					Пока _Service.GetDistrictListByRegionСледующий(_region.guid, _district, _параметрыD) Цикл
						ТаблицаВетисДобавить(_ТаблицаВетис, _district, _typeD, _region.guid);
						_locality = Неопределено; _параметрыL = Неопределено;
						Пока _Service.GetLocalityListByDistrictСледующий(_district.guid, _locality, _параметрыL) Цикл
							ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _district.guid);
						КонецЦикла;
					КонецЦикла;
					_locality = Неопределено; _параметрыL = Неопределено;
					Пока _Service.GetLocalityListByRegionСледующий(_region.guid, _locality, _параметрыL) Цикл
						ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _region.guid);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли _Тип = _typeR Тогда
			//_region = _ВетисIkarСлой1с.Region(_Родитель);
			_region = ВетисСоответствие.ПолучитьСсылку(_Родитель, "Справочник.ВетисAddress");
			_district = Неопределено; _параметрыD = Неопределено;
			Пока _Service.GetDistrictListByRegionСледующий(_region, _district, _параметрыD) Цикл
				ТаблицаВетисДобавить(_ТаблицаВетис, _district, _typeD, _region);
				Если _ВсеУровни = Истина Тогда
					_locality = Неопределено; _параметрыL = Неопределено;
					Пока _Service.GetLocalityListByDistrictСледующий(_district.guid, _locality, _параметрыL) Цикл
						ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _district.guid);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			_locality = Неопределено; _параметрыL = Неопределено;
			Пока _Service.GetLocalityListByRegionСледующий(_region, _locality, _параметрыL) Цикл
				ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _region);
			КонецЦикла;
		ИначеЕсли _Тип = _typeD Тогда
			//_district = _ВетисIkarСлой1с.District(_Родитель);
			_district = ВетисСоответствие.ПолучитьСсылку(_Родитель, "Справочник.ВетисAddress");
			_locality = Неопределено; _параметрыL = Неопределено;
			Пока _Service.GetLocalityListByDistrictСледующий(_district.guid, _locality, _параметрыL) Цикл
				ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _district.guid);
			КонецЦикла;
		Иначе
			
		КонецЕсли;
	Иначе
		_country = Неопределено; _параметрыC = Неопределено;
		Пока _Service.GetAllCountryListСледующий(_country, _параметры) Цикл
			ТаблицаВетисДобавить(_ТаблицаВетис, _country, _typeC);
			Если _ВсеУровни = Истина Тогда
				_region = Неопределено; _параметрыR = Неопределено;
				Пока _Service.GetRegionListByCountryСледующий(_country.guid, _region, _параметрыR) Цикл
					ТаблицаВетисДобавить(_ТаблицаВетис, _region, _typeR, _country.guid);
					_district = Неопределено; _параметрыD = Неопределено;
					Пока _Service.GetDistrictListByRegionСледующий(_region.guid, _district, _параметрыD) Цикл
						ТаблицаВетисДобавить(_ТаблицаВетис, _district, _typeD, _region.guid);
						_locality = Неопределено; _параметрыL = Неопределено;
						Пока _Service.GetDistrictListByRegionСледующий(_district.guid, _locality, _параметрыL) Цикл
							ТаблицаВетисДобавить(_ТаблицаВетис, _locality, _typeL, _district.guid);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос(ПолучитьТекстЗапроса());
	
	Запрос.УстановитьПараметр("Родитель", _Родитель);
	Запрос.УстановитьПараметр("Тип", _Тип);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Если _ВсеУровни Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ор1", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ор2", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			ВетисОбщегоНазначения.ВывестиСообщение("- " + Выборка.Наименование, "Ветис.Address");
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисAddress.СоздатьЭлемент();
				_Элемент.Родитель = ВетисСоответствие.ПолучитьСсылку(Выборка.owner, "Справочник.ВетисAddress");
				ВетисОбщегоНазначения.ВывестиСообщение("+ " + СокрЛП(Выборка.name), "Ветис.Address");
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
				ВетисОбщегоНазначения.ВывестиСообщение("~ " + СокрЛП(Выборка.name), "Ветис.Address");
			КонецЕсли;
			
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.Тип = Выборка.Тип;
			
			Попытка
				_Элемент.Записать();
				
				ВетисСоответствие.Добавить(_Элемент.Ссылка, Выборка.guid, Выборка.name);
				
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Ветис.Address");
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапроса()
	
	_Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.type КАК Перечисление.ВетисТипАдреса) КАК type,
	|	ВЫРАЗИТЬ(_Таблица.owner КАК СТРОКА(36)) КАК owner,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Наименование,
	|	_Таблица.Тип,
	|	_Соответствие.guid КАК guid
	|ПОМЕСТИТЬ ВСправочник
	|ИЗ
	|	Справочник.ВетисAddress КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Соответствие
	|		ПО _Таблица.Ссылка = _Соответствие.Ссылка
	|ГДЕ
	|	ИСТИНА
	|//ор1	И _Таблица.Ссылка в иерархии(&Родитель)
	|//ор2	И _Таблица.Родитель = &Родитель
	|//от	И _Таблица.Тип = &Тип
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	_Таблица.Ссылка,
	|	_Таблица.Наименование,
	//|	_Таблица.Тип,
	|	_Ветис.name КАК name,
	|	_Ветис.owner,
	|	_Ветис.guid,
	|	_Ветис.type Тип
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВСправочник КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|			И _Ветис.type = _Таблица.Тип
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Возврат _Текст;
	
КонецФункции

Процедура ТаблицаВетисДобавить(пТаблица, пОбъект, пТип, пРодитель = Неопределено)
	
	_Строка = пТаблица.Добавить();
	
	ЗаполнитьЗначенияСвойств(_Строка, пОбъект);
	
	_Строка.type = пТип;
	
	_Строка.owner = пРодитель;
	
КонецПроцедуры
