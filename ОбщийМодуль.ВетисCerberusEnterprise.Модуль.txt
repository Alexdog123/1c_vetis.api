
// тип, описывающий хозяйствующий субъект (ХС)
Функция BusinessEntity(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessEntity"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityНовый(fullName = Неопределено, inn = Неопределено, name = Неопределено, пПараметры = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessEntity"));
	
	_Объект.name = ?(name = Неопределено, "", name);
	_Объект.fullName = ?(fullName = Неопределено, "", fullName);
	_Объект.inn  = ?(inn = Неопределено, "", inn);
	
	Если НЕ пПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(_Объект, пПараметры);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityTypeОписание(type) Экспорт
	
	Если type = 1 Тогда
		Возврат "Юр. лицо";
	ИначеЕсли type = 2 Тогда
		Возврат "Физ. лицо";
	ИначеЕсли type = 3 Тогда
		Возврат "ИП";
	Иначе
		Возврат "<Ошибка>";
	КонецЕсли;
	
КонецФункции

Функция BusinessEntityList(guid = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessEntityList"));
	
	BusinessEntityListДобавить(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.businessEntity.Добавить(ФормаXML.Элемент, URI(), "businessEntity", BusinessEntity(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.businessEntity.Добавить(ФормаXML.Элемент, URI(), "businessEntity", BusinessEntity(guid));
	КонецЕсли;
	
КонецФункции

Функция BusinessEntityListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "businessEntity");
	
КонецФункции


// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:BusinessEntityList - Входящий список ХС
//  resultingList - ent:BusinessEntityList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция BusinessEntityModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BEModificationOperation"));
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessMember"));
	
	_Объект.businessEntity = BusinessEntity(businessEntityGuid);
	_Объект.enterprise     = Enterprise(enterpriseGuid);
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий предприятие
Функция Enterprise(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Enterprise"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseНовый(name = Неопределено, пПараметры = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Enterprise"));
	
	_Объект.name = ?(name = Неопределено, "", name);
	
	Если НЕ пПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(_Объект, пПараметры);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "enterprise");
	
КонецФункции

// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:EnterpriseList - Входящий список площадок
//  resultingList - ent:EnterpriseList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "ENTModificationOperation"));
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


Функция ProducerListИтератор(List) Экспорт
	
	Если ТипЗнч(List.producer) = Тип("СписокXDTO") Тогда
		Возврат List.producer;
	Иначе
		_Список = Новый Массив;
		_Список.Добавить(List.producer);
		Возврат _Список;
	КонецЕсли;
	
КонецФункции



#Область Service

// предназначена для получения последней в истории записи хозяйствующего субъекта
Функция GetBusinessEntityByGuid(guid, пИмяСвойства = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetBusinessEntityByGuid(guid);
	
	Если пИмяСвойства = Неопределено Тогда
		Возврат _объект;
	Иначе
		Возврат ?(_объект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, _объект[пИмяСвойства]);
	КонецЕсли;
	
КонецФункции

// предназначена для получения последней в истории записи предприятия
Функция GetEnterpriseByGuid(guid, пИмяСвойства = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetEnterpriseByGuid(guid);
	
	Если пИмяСвойства = Неопределено Тогда
		Возврат _объект;
	Иначе
		Возврат ?(_объект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, _объект[пИмяСвойства]);
	КонецЕсли;
	
КонецФункции


// предназначена для получения списка хозяйствующих субъектов из реестра Россельхознадзора.
Функция GetBusinessEntityList(fullName = Неопределено, inn = Неопределено, name = Неопределено, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetBusinessEntityList(ListOptions, BusinessEntityНовый(fullName, inn, name));
	
КонецФункции

// Предназначена для выборки хозяйствующих субъектов из реестра Россельхознадзора.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  fullName - полное имя
//  inn - ИНН
//  name - имя
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetBusinessEntityListСледующий(fullName = Неопределено, inn = Неопределено, name = Неопределено, Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.businessEntity[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetBusinessEntityList(пПараметры.ListOptions, BusinessEntityНовый(fullName, inn, name));
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = пПараметры.ListResponse.businessEntity[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


// предназначена для получения списка предприятий, зарегистрированных на территории Российской Федерации.
Функция GetRussianEnterpriseList(name = Неопределено, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetBusinessEntityList(ListOptions, EnterpriseНовый(name));
	
КонецФункции

// Предназначена для выборки предприятий, зарегистрированных на территории Российской Федерации.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  name - имя
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetRussianEnterpriseListСледующий(name = Неопределено, Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.enterprise[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetRussianEnterpriseList(пПараметры.ListOptions, EnterpriseНовый(name));
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = пПараметры.ListResponse.enterprise[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


Функция Прокси()
	
	_Прокси = WSСсылки.EnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/cerberus/enterprise";
	
КонецФункции
