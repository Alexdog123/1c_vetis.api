
// тип, описывающий хозяйствующий субъект (ХС)
Функция BusinessEntity(fullName = Неопределено, inn = Неопределено, name = Неопределено, пПараметры = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessEntity"));
	
	_Объект.name = ?(name = Неопределено, "", name);
	_Объект.fullName = ?(fullName = Неопределено, "", fullName);
	_Объект.inn  = ?(inn = Неопределено, "", inn);
	
	Если НЕ пПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(_Объект, пПараметры);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityList(пПараметры = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessEntityList"));
	
	//Если НЕ пПараметры = Неопределено Тогда
	//	ЗаполнитьЗначенияСвойств(_Объект, пПараметры);
	//КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntity, enterprise) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BusinessMember"));
	
	_Объект.businessEntity = BusinessEntity();
	_Объект.businessEntity.guid = businessEntity;
	
	_Объект.enterprise = Enterprise();
	_Объект.enterprise.guid = enterprise;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий предприятие
Функция Enterprise(name = Неопределено, пПараметры = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Enterprise"));
	
	_Объект.name = ?(name = Неопределено, "", name);
	
	Если НЕ пПараметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(_Объект, пПараметры);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BEModificationOperation(type, affectedList, reason) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "BEModificationOperation"));
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции

#Область Service

// предназначена для получения последней в истории записи хозяйствующего субъекта
// по её глобальному идентификатору (active=true, last=true).
// Выполнение операции заканчивается либо возвратом записи хозяйствующего субъекта, либо ошибкой,
// в случае если параметры запроса не корректны, если запись по запросу не найдена или произошла иная ошибка выполнения запроса.
Функция GetBusinessEntityByGuid(guid, пИмяСвойства = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetBusinessEntityByGuid(guid);
	
	Если пИмяСвойства = Неопределено Тогда
		Возврат _объект;
	Иначе
		Возврат ?(_объект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, _объект[пИмяСвойства]);
	КонецЕсли;
	
КонецФункции

// предназначена для получения списка хозяйствующих субъектов из реестра Россельхознадзора.
// В список попадают только актуальные записи (active = true).
// Поддерживается возможность постраничного вывода и фильтрации по шаблону.
// Выполнение операции заканчивается либо возвратом списка хозяйствующих субъектов, либо ошибкой,
// в случае если параметры запроса не корректны или произошла иная ошибка выполнения запроса.
Функция GetBusinessEntityList(fullName = Неопределено, inn = Неопределено, name = Неопределено, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetBusinessEntityList(ListOptions, BusinessEntity(fullName, inn, name));
	
КонецФункции

// предназначена для получения последней в истории записи предприятия
// по его глобальному идентификатору (active=true, last=true).
// Выполнение операции заканчивается либо возвратом записи предприятия, либо ошибкой,
// в случае если параметры запроса не корректны, если запись по запросу не найдена или произошла иная ошибка выполнения запроса.
Функция GetEnterpriseByGuid(guid, пИмяСвойства = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetEnterpriseByGuid(guid);
	
	Если пИмяСвойства = Неопределено Тогда
		Возврат _объект;
	Иначе
		Возврат ?(_объект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, _объект[пИмяСвойства]);
	КонецЕсли;
	
КонецФункции

// предназначена для получения списка предприятий, зарегистрированных на территории Российской Федерации.
// Выводятся актуальные записи (active=true, last=true).
// Операция поддерживает фильтрацию по полям предприятия и постраничный вывод.
// Выполнение операции заканчивается либо возвратом списка предприятий, либо ошибкой,
// в случае если параметры запроса не корректны или произошла иная ошибка выполнения запроса.
Функция GetRussianEnterpriseList(name = Неопределено, ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetBusinessEntityList(ListOptions, Enterprise(name));
	
КонецФункции

#КонецОбласти


Функция Прокси()
	
	_Прокси = WSСсылки.EnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/cerberus/enterprise";
	
КонецФункции
