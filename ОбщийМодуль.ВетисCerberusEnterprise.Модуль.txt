
// тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntity");
	
	Если ТипЗнч(guid) = Тип("Структура") Тогда
		Для каждого _guid Из guid Цикл
			_Объект[_guid.Ключ] = _guid.Значение;
		КонецЦикла;
	ИначеЕсли НЕ guid = Неопределено Тогда
		_Объект.guid = guid;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityTypeОписание(type) Экспорт
	
	Если type = 1 Тогда
		Возврат "Юр. лицо";
	ИначеЕсли type = 2 Тогда
		Возврат "Физ. лицо";
	ИначеЕсли type = 3 Тогда
		Возврат "ИП";
	Иначе
		Возврат "<Ошибка>";
	КонецЕсли;
	
КонецФункции

Функция BusinessEntityList(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntityList");
	
	Если НЕ guid = Неопределено Тогда
		BusinessEntityListДобавить(_Объект, guid);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция BusinessEntityListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.businessEntity.Добавить(ФормаXML.Элемент, URI(), "businessEntity", BusinessEntity(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.businessEntity.Добавить(ФормаXML.Элемент, URI(), "businessEntity", BusinessEntity(guid));
	КонецЕсли;
	
КонецФункции

Функция BusinessEntityListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "businessEntity");
	
КонецФункции


// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:BusinessEntityList - Входящий список ХС
//  resultingList - ent:BusinessEntityList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция BusinessEntityModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("BEModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid) Экспорт
	
	_Объект = Создать("BusinessMember");
	
	_Объект.businessEntity = BusinessEntity(businessEntityGuid);
	_Объект.enterprise     = Enterprise(enterpriseGuid);
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	_Объект = Создать("Enterprise");
	
	Если ТипЗнч(guid) = Тип("Структура") Тогда
		Для каждого _guid Из guid Цикл
			_Объект[_guid.Ключ] = _guid.Значение;
		КонецЦикла;
	ИначеЕсли НЕ guid = Неопределено Тогда
		_Объект.guid = guid;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "enterprise");
	
КонецФункции

// Операция внесения изменений в реестр ХС
// Параметры:
//  type - bs:RegisterModificationType - Тип операции (CREATE, FIND_OR_CREATE, UPDATE)
//  affectedList - ent:EnterpriseList - Входящий список площадок
//  resultingList - ent:EnterpriseList - Получаемые в результате операции записи
//  reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("ENTModificationOperation");
	
	_Объект.type = type;
	_Объект.affectedList = affectedList;
	_Объект.resultingList = resultingList;
	_Объект.reason  = reason;
	
	Возврат _Объект;
	
КонецФункции


// тип, описывающий производителя продукции
Функция Producer(guid) Экспорт
	
	_Объект = Создать("Producer");
	
	_Объект.enterprise = Enterprise(guid);
	
	//_Объект.role = 
	
	Возврат _Объект;
	
КонецФункции

// Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	_Объект = Создать("ProducerList");
	
	ProducerListДобавить(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция ProducerListДобавить(List, guid) Экспорт
	
	Если ТипЗнч(guid) = Тип("Массив") Тогда
		Для каждого _guid Из guid Цикл
			List.producer.Добавить(ФормаXML.Элемент, URI(), "producer", Producer(_guid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(guid) = Тип("Строка") Тогда
		List.producer.Добавить(ФормаXML.Элемент, URI(), "producer", Producer(guid));
	КонецЕсли;
	
КонецФункции

Функция ProducerListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "producer");
	
КонецФункции



#Область Service

// предназначена для получения последней в истории записи хозяйствующего субъекта
Функция GetBusinessEntityByGuid(guid, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetBusinessEntityByGuid(guid);
	
	Возврат _объект;
	
КонецФункции

// предназначена для получения последней в истории записи предприятия
Функция GetEnterpriseByGuid(guid, ПоУмолчанию = Неопределено) Экспорт
	
	_объект = Прокси().GetEnterpriseByGuid(guid);
	
	Возврат _объект;
	
КонецФункции


// предназначена для получения списка хозяйствующих субъектов из реестра Россельхознадзора.
//  пfiltr - Структура - отбор
//  пListOptions - возвращаемый
Функция GetBusinessEntityList(пfiltr = Неопределено, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Если пfiltr = Неопределено Тогда
		Возврат Прокси().GetBusinessEntityList(пListOptions);
	Иначе
		Возврат Прокси().GetBusinessEntityList(пListOptions, BusinessEntity(пfiltr));
	КонецЕсли;
	
КонецФункции

// Предназначена для выборки хозяйствующих субъектов из реестра Россельхознадзора.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  filtr - Структура - отбор
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetBusinessEntityListСледующий(пfiltr = Неопределено, пItem, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.businessEntity[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если пfiltr = Неопределено Тогда
		_ListResponse = Прокси().GetBusinessEntityList(пПараметры.ListOptions);
	Иначе
		_ListResponse = Прокси().GetBusinessEntityList(пПараметры.ListOptions, BusinessEntity(пfiltr));
	КонецЕсли;
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.businessEntity[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
КонецФункции


// предназначена для получения списка предприятий, зарегистрированных на территории Российской Федерации.
// Параметры:
//  пfiltr - Структура - отбор
//  пListOptions - возвращаемый
Функция GetRussianEnterpriseList(пfiltr = Неопределено, пListOptions = Неопределено) Экспорт
	
	Если пListOptions = Неопределено Тогда
		пListOptions = ВетисBase.ListOptions();
	Иначе
		пListOptions.offset = пListOptions.offset + пListOptions.count;
	КонецЕсли;
	
	Если пfiltr = Неопределено Тогда
		Возврат Прокси().GetRussianEnterpriseList(пListOptions);
	Иначе
		Возврат Прокси().GetRussianEnterpriseList(пListOptions, Enterprise(пfiltr));
	КонецЕсли;
	
КонецФункции

// Предназначена для выборки предприятий, зарегистрированных на территории Российской Федерации.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  filtr - Структура - отбор
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetRussianEnterpriseListСледующий(пfiltr = Неопределено, пItem, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			пItem = пПараметры.ListResponse.enterprise[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если пfiltr = Неопределено Тогда
		_ListResponse = Прокси().GetRussianEnterpriseList(пПараметры.ListOptions);
	Иначе
		_ListResponse = Прокси().GetRussianEnterpriseList(пПараметры.ListOptions, Enterprise(пfiltr));
	КонецЕсли;
	
	пПараметры.Вставить("ListResponse", _ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		пItem = пПараметры.ListResponse.enterprise[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция Прокси()
	
	_Прокси = WSСсылки.EnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/cerberus/enterprise";
	
КонецФункции
