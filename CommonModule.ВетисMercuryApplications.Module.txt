
// Получение записи складского журнала по идентификатору.
Функция getStockEntryByGuidRequest(guid, enterpriseGuid) Экспорт
	
	_Объект = Создать("getStockEntryListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.GUID               = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция getStockEntryByGuidResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getStockEntryByGuidResponse, "getStockEntryByGuidResponse", URI()).stockEntry;
	
КонецФункции


// Получение актуального списка записей складского журнала.
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  count - Максимальное запрашиваемое количество объектов в списке
Функция getStockEntryListRequest(enterpriseGuid, count = 100) Экспорт
	
	_Объект = Создать("getStockEntryListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.listOptions        = ВетисBase.ListOptions(count);
	
	Возврат _Объект;
	
КонецФункции

Функция getStockEntryListRequestСледующий(ListRequest, ListResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ListRequestСледующий(ListRequest, ListResponse);
	
КонецФункции

Функция getStockEntryListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getStockEntryListResponse, "getStockEntryListResponse", URI()).stockEntryList;
	
КонецФункции


// Получение ВСД
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  vetDocumentUuid - Идентификатор ВСД
Функция getVetDocumentByUuidRequest(vetDocumentUuid, enterpriseGuid) Экспорт
	
	_Объект = Создать("getVetDocumentByUuidRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.uuid               = vetDocumentUuid;
	
	Возврат _Объект;
	
КонецФункции

Функция getVetDocumentByUuidResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getVetDocumentByUuidResponse, "getVetDocumentByUuidResponse", URI()).vetDocument;
	
КонецФункции


// Получение всех ВСД предприятия
// Параметры:
//  enterpriseGuid - Идентификатор предприятия
//  vetDocumentType - vetd:VetDocumentType - Тип ВСД
//  vetDocumentStatus - vetd:VetDocumentStatus - Статус ВСД
Функция getVetDocumentListRequest(enterpriseGuid, vetDocumentType = Неопределено, vetDocumentStatus = Неопределено) Экспорт
	
	_Объект = Создать("getVetDocumentListRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterpriseGuid     = enterpriseGuid;
	_Объект.listOptions        = ВетисBase.ListOptions();
	
	Если НЕ vetDocumentType = Неопределено Тогда
		_Объект.vetDocumentType = vetDocumentType;
	КонецЕсли;
	
	Если НЕ vetDocumentType = Неопределено Тогда
		_Объект.vetDocumentStatus = vetDocumentStatus;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция getVetDocumentListRequestСледующий(ListRequest, ListResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ListRequestСледующий(ListRequest, ListResponse);
	
КонецФункции

Функция getVetDocumentListResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.getVetDocumentListResponse, "getVetDocumentListResponse", URI()).vetDocumentList;
	
КонецФункции


#Область MergeOperation

Функция mergeStockEntriesRequest(enterprise, mergeOperation) Экспорт
	
	_Объект = Создать("MergeStockEntriesRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterprise         = enterprise;
	_Объект.mergeOperation     = mergeOperation;
	
	Возврат _Объект;
	
КонецФункции

Функция mergeStockEntriesResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.mergeStockEntriesResponse, "MergeStockEntriesResponse", URI());
	
КонецФункции

#КонецОбласти

#Область IncomingOperation

// Операция предназначена для оформления входящей партии.
// Параметры:
//  delivery - vetd:Delivery - Фактические сведения о принимаемой партии продукции и сопровождающих ее документах
//  deliveryFacts - vetd:DeliveryFactList - Обобщенный результат приема партии продукции
//  discrepancyReport - vetd:DiscrepancyReport - Акт несоответствия
//  returnedDelivery - vetd:Delivery - Сведения о возвращаемой партии
Функция processIncomingConsignmentRequest(delivery, deliveryFacts, discrepancyReport = Неопределено, returnedDelivery = Неопределено) Экспорт
	
	_Объект = Создать("ProcessIncomingConsignmentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.delivery           = delivery;
	_Объект.deliveryFacts      = deliveryFacts;
	
	Если НЕ discrepancyReport = Неопределено Тогда
		Если ТипЗнч(discrepancyReport) = Тип("Массив") Тогда
			Для каждого _discrepancyReport Из discrepancyReport Цикл
				_Объект.discrepancyReport.Добавить(_discrepancyReport);
			КонецЦикла;
		Иначе
			_Объект.discrepancyReport.Добавить(discrepancyReport);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ returnedDelivery = Неопределено Тогда
		_Объект.returnedDelivery = returnedDelivery;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о записях в складском журнале продукции системы Меркурий.
Функция processIncomingConsignmentResponse(пResponse) Экспорт
	
// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39749
// В ответе processIncomingResponse будут отдельные ВСД.
// В случае полного или частичного гашения будут возвращены данные погашенного ВСД
// и в случае частичного гашения также будут возвращены данные возвратного ВСД.
// В случае полного возврата партии возвращаются только данные возвратного сертификата.	
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.processIncomingConsignmentResponse, "ProcessIncomingConsignmentResponse", URI());
	
КонецФункции

#КонецОбласти

#Область TransportOperation

// Операция предназначена для оформления транспортной партии.
// Параметры:
//  delivery - vetd:Delivery - Сведения для оформления транспортного ВСД
Функция prepareOutcomingConsignmentRequest(delivery) Экспорт
	
	_Объект = Создать("PrepareOutcomingConsignmentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.delivery           = delivery;
	
	Возврат _Объект;
	
КонецФункции

Функция prepareOutcomingConsignmentResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.processIncomingConsignmentResponse, "PrepareOutcomingConsignmentResponse", URI());
	
КонецФункции

#КонецОбласти

#Область ResolveDiscrepancyOperation

// Операция предназначена для устранения возможных несоответствий сведений об объёмах в складском журнале продукции системы Меркурий
// и фактических объёмов продукции на складе предприятия, выявленных по результатам проведенной инвентаризации.
// Параметры:
//  enterprise - ent:Enterprise - Площадка на которой осуществляется инвентаризация
//  inventoryDate - xs:dateTime - Дата проведения инвентаризации
//  responsible - argc:User - Ответственный за инвентаризацию
//  stockDiscrepancy - vetd:StockDiscrepancy - Сведения о результате инвентаризации (по одному факту расхождения)
//  discrepancyReport - vetd:DiscrepancyReport - Сведения об акте несоответствия
Функция resolveDiscrepancyRequest(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport) Экспорт
	
	_Объект = Создать("ResolveDiscrepancyRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.enterprise         = enterprise;
	_Объект.inventoryDate      = inventoryDate;
	_Объект.responsible        = responsible;
	_Объект.stockDiscrepancy   = stockDiscrepancy;
	_Объект.discrepancyReport  = discrepancyReport;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о результатах обработки заявки на регистрацию несоответствий
// в записях складского журнала, выявленных в результате инвентаризации.
Функция resolveDiscrepancyResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ResolveDiscrepancyResponse, "ResolveDiscrepancyResponse", URI()).stockEntryList;
	
КонецФункции

#КонецОбласти

#Область WithdrawVetDocumentOperation
// Если ВСД содержит ошибки, либо фактические сведения отличаются от того, что указано в ВСД,
// то такой документ может быть аннулирован, то есть такой документ становится недействительным.
// 
// Операция аннулирования через шлюз Ветис.API доступна ТОЛЬКО для транспортных сертификатов.
// Производственные сертификаты нужно аннулировать через веб-интерфейс через запись журнала или транзакцию.
// 
// После того как ВСД был аннулирован, объем продукции, на которую был выдан данный ВСД, возвращается в журнал предприятия-отправителя
// и взамен аннулированного врач может выдать новый ВСД на эту партию продукции, содержащий верные сведения.
// 
// Аннулировать ВСД может тот, кто его выписал, либо другой ветеринарный врач обслуживающий то предприятие, с которого данный ВСД был выписан.
// Если ВСД был погашен, то его аннулировать уже нельзя, то есть для аннулирования ВСД должен быть в статусе "Оформлен".

// Операция предназначена для аннулирования ВСД.
// Параметры:
//  vetDocumentId	- bs:UUID - Идентификатор ВСД, который аннулируется
//  withdrawReason - vetd:WithdrawReason - Причина аннулирования ВСД
//  withdrawDate - xs:dateTime - Дата аннулирования ВСД
//  vetDoctor - argc:User - Ветеринарный врач, ответственный за аннулирование ВСД
Функция withdrawVetDocumentRequest(vetDocumentId, withdrawReason, withdrawDate, vetDoctor) Экспорт
	
	_Объект = Создать("WithdrawVetDocumentRequest");
	
	_Объект.localTransactionId = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator          = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.vetDocumentId      = vetDocumentId;
	_Объект.withdrawReason     = withdrawReason;
	_Объект.withdrawDate       = withdrawDate;
	_Объект.vetDoctor          = vetDoctor;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения об аннулированном ВСД.
Функция withdrawVetDocumentResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.WithdrawVetDocumentResponse, "WithdrawVetDocumentResponse", URI()).vetDocument;
	
КонецФункции

#КонецОбласти

#Область ModifyBusinessEntityOperation

// Операция предназначена для регистрации новых ХС в реестре,
// а также для изменения информации об уже зарегистрированных.
// Параметры:
//  modificationOperation - ent:BEModificationOperation - Описание операции добавления/изменения информации о ХС.
Функция ModifyBusinessEntityRequest(modificationOperation) Экспорт
	
	_Объект = Создать("ModifyBusinessEntityRequest");
	
	_Объект.localTransactionId    = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator             = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.modificationOperation = modificationOperation;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о ХС, который был изменен или добавлен.
Функция ModifyBusinessEntityResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ModifyBusinessEntityResponse, "ModifyBusinessEntityResponse", URI()).businessEntity;
	
КонецФункции

#КонецОбласти

#Область ModifyEnterpriseOperation

// Операция предназначена для регистрации новых площадок (поднадзорных объектов) в реестре,
// а также для изменения информации об уже зарегистрированных.
// Параметры:
//  modificationOperation - ent:ENTModificationOperation - Описание операции добавления/изменения информации о поднадзорном объекте.
Функция ModifyEnterpriseRequest(modificationOperation) Экспорт
	
	_Объект = Создать("ModifyEnterpriseRequest");
	
	_Объект.localTransactionId    = Строка(Новый УникальныйИдентификатор);
	_Объект.initiator             = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинХС());
	_Объект.modificationOperation = modificationOperation;
	
	Возврат _Объект;
	
КонецФункции

// Объект содержит сведения о поднадзорном объекте, который был изменен или добавлен.
Функция ModifyEnterpriseResponse(пResponse) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse.ModifyEnterpriseResponse, "ModifyEnterpriseResponse", URI()).enterprise;
	
КонецФункции

#КонецОбласти


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), ?(пФабрика = Неопределено, Фабрика(), пФабрика));
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/applications";
	
КонецФункции

Функция Фабрика()
	
	Возврат ФабрикаXDTO;
	
КонецФункции
