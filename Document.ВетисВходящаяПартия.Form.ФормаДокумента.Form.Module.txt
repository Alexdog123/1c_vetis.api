
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "СкладскойЖурналПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СкладскойЖурнал.Очистить();
	
	_Строка = ТекущийОбъект.СкладскойЖурнал.Добавить();
	_Строка.Возвратный = Ложь;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" И НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 3)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	_Строка = ТекущийОбъект.СкладскойЖурнал.Добавить();
	_Строка.Возвратный = Истина;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" И Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 3, СтрДлина(_Реквизит.Имя)-12)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПолучательОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", Объект.Получатель, ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Получатель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Объект.Получатель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ОтправительОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", Объект.Отправитель, ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Отправитель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Объект.Отправитель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры


&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	ЗаполнитьШапкуПоВСД();
	
	ЗаполнитьПродуктПоВСД();
	
	УстановитьДоступность();
	
КонецПроцедуры


&НаКлиенте
Процедура СкладскойЖурналПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	СкладскойЖурналПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналПриИзмененииНаСервере(ЭлементИмя)
	
	Если Элементы[ЭлементИмя].ПутьКДанным = "сжНоменклатура" Тогда
		сжЕдиницаИзмерения = сжНоменклатурнаяГруппа.БазоваяЕдиницаИзмерения;
		сжСтранаПроисхождения = сжНоменклатурнаяГруппа.СтранаПроисхождения;
	ИначеЕсли Элементы[ЭлементИмя].ПутьКДанным = "сжНоменклатураВозвратная" Тогда
		сжЕдиницаИзмеренияВозвратная = сжНоменклатурнаяГруппаВозвратная.БазоваяЕдиницаИзмерения;
		сжСтранаПроисхожденияВозвратная = сжНоменклатурнаяГруппаВозвратная.СтранаПроисхождения;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура сжНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("сжНоменклатураОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.НоменклатурныеГруппы.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", сжНоменклатурнаяГруппа, ПолучитьТекстЗапросаСправочникНоменклатурныеГруппыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура сжНоменклатураОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжНоменклатурнаяГруппа = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура сжПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("сжПроизводительОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораУФ", Новый Структура("Ключ,Запрос", сжПроизводитель, ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура сжПроизводительОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжПроизводитель = Результат;
		сжПроизводительПредприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сжПроизводительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("сжПроизводитель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры


&НаКлиенте
Процедура сжСтранаПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("сжСтранаПроисхожденияОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.КлассификаторСтранМира.Форма.ФормаВыбораУФ", Новый Структура("Ключ, Запрос", сжСтранаПроисхождения, ПолучитьТекстЗапросаСправочникКлассификаторСтранМираФормаВыбора()), ЭтаФорма,,,,оо);
	
КонецПроцедуры

&НаКлиенте
Процедура сжСтранаПроисхожденияОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		сжСтранаПроисхождения = Результат;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(пЗначение, пПараметр) Экспорт
	
	Если НЕ пЗначение = Неопределено Тогда
		Модифицированность = Истина;
		Выполнить пПараметр + " = пЗначение;";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписок(ИмяВладельца)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец ССЫЛКА Справочник.Склады
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.СобственныеКонтрагенты
	|			ГДЕ
	|				РегистрСведений.СобственныеКонтрагенты.Контрагент = &Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", Вычислить(ИмяВладельца));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		_Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

&НаСервере
Функция Элемент_ПутьКДанным(пЭлементИмя)
	
	Возврат Элементы[пЭлементИмя].ПутьКДанным;
	
КонецФункции


&НаКлиенте
Процедура ВозвратныйПриИзменении(Элемент)
	
	Элементы.ГруппаВозвратнаяСтраницы.Доступность = Объект.СоздатьВозвратныйВСД;
	
	Если Объект.СоздатьВозвратныйВСД Тогда
		ЗаполнитьВозвратныйСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставитьАктНесоответствияПриИзменении(Элемент)
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьВозвратный(Команда)
	
	ЗаполнитьВозвратныйСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратныйСервер()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_строка = Лев(_Реквизит.Имя, 3);
			Если Лев(_Реквизит.Имя, 2) = "сж" ИЛИ _строка = "всд" ИЛИ _строка = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя+"Возвратная"] = ЭтаФорма[_Реквизит.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСервер()
	
	Перем _discrepancyReport, _returnedDelivery;
	
	Если НЕ Объект.Проведен ИЛИ НЕ Объект.ВСД.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	_всд = Объект.ВСД.ПолучитьОбъект();
	_сж  = _всд.СкладскойЖурнал[0];
	_ттн = _всд.ТТН[0];
	
	_subProduct = ВетисArgusProduction.GetSubProductByGuid(ВетисArgusProductionСлой1с.SubProduct(_сж.НоменклатурнаяГруппа));
	_product    = ВетисArgusProduction.GetProductByGuid(_subProduct.productGuid);
	
	_unitGuid = ВетисArgusCommonСлой1с.Unit(_сж.ЕдиницаИзмерения);
	_unit1    = ВетисArgusCommon.Unit(_unitGuid);
	_unit2    = ВетисArgusCommon.Unit(_unitGuid);
	
	_unitws     = ВетисArgusCommon.GetUnitByGuid(_unitGuid);
	_unit1.uuid = _unitws.uuid;
	_unit2.uuid = _unitws.uuid;
	
	_врач1 = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
	_врач2 = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
	
	_brokerGuid = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_ттн.Посредник);
	
	
	#Область delivery
	
		#Область consignor
			_consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Отправитель);
			_consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ОтправительПредприятие);
			_consignor1              = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
			_consignor2              = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
			_consignor3              = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
		#КонецОбласти
		
		#Область consignee
			_consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Получатель);
			_consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ПолучательПредприятие);
			_consignee1              = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
			_consignee2              = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
			_consignee3              = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
		#КонецОбласти
		
		#Область consignment
			
			_Consignment = ВетисMercuryVetdocument.Consignment();
			
			_Consignment.subProduct       = ВетисArgusProduction.SubProduct(_subProduct.guid);
			_Consignment.product          = ВетисArgusProduction.Product(_subProduct.productGuid);
			_Consignment.productType      = _product.productType;
			_Consignment.productItem      = ВетисArgusProduction.ProductItem(_subProduct.name);
			_Consignment.volume           = сжКоличество;
			_Consignment.unit             = _unit1;
			_Consignment.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_сж.Упаковка));
			_Consignment.packingAmount    = сжКоличествоМест;
			_Consignment.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_сж.ВыработкаНачало, _сж.ВыработкаКонец);
			_Consignment.expiryDate       = ВетисMercuryVetdocument.GoodsDate(_сж.СрокГодностиНачало, _сж.СрокГодностиКонец);
			_Consignment.perishable       = _сж.Скоропортящаяся;
			_Consignment.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(_сж.СтранаПроисхождения));
			_Consignment.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_сж.ПроизводительПредприятие));
			//_Consignment.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(сжМаркировка);
			_Consignment.lowGradeCargo    = _сж.НекачественныйГруз;
			
		#КонецОбласти
		
		#Область accompanyingForms
			
			#Область waybill
				
				_waybill = ВетисArgusShipment.Создать("Waybill");
				_waybill.issueSeries   = _ттн.Серия;
				_waybill.issueNumber   = _ттн.Номер;
				_waybill.issueDate     = _ттн.Дата;
				_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
				_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(_brokerGuid);
				_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.Транспорт);
				_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
				
			#КонецОбласти
			
			#Область vetCertificate
				
				_vetCertificate = ВетисMercuryVetdocument.Создать("VetDocument");
				
				Если ЗначениеЗаполнено(_всд.Статус) Тогда
					
					_vetCertificate.uuid = _всд.uuid;
					
				Иначе
					
					#Область batch
						
						_batch = ВетисMercuryVetdocument.Batch();
						
						_batch.subProduct       = ВетисArgusProduction.SubProduct(_subProduct.guid);
						_batch.product          = ВетисArgusProduction.Product(_product.guid);
						_batch.productType      = _product.productType;
						_batch.productItem      = ВетисArgusProduction.ProductItem(_subProduct.name);
						_batch.volume           = _сж.Количество;
						_batch.unit             = _unit2;
						_batch.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_сж.Упаковка));
						_batch.packingAmount    = _сж.КоличествоМест;
						_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_сж.ВыработкаНачало, _сж.ВыработкаКонец);
						_batch.expiryDate       = ВетисMercuryVetdocument.GoodsDate(_сж.СрокГодностиНачало, _сж.СрокГодностиКонец);
						_batch.perishable       = _сж.Скоропортящаяся;
						_batch.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(_сж.СтранаПроисхождения));
						_batch.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_сж.ПроизводительПредприятие));
						//_batch.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(_сж.Маркировка);
						_batch.lowGradeCargo    = _сж.НекачественныйГруз;
						
					#КонецОбласти
					
					__всд = _всд.ВСД[0];
					
					_vetCertificate.issueSeries        = __всд.Серия;
					_vetCertificate.issueNumber        = _всд.НомерВСД;
					_vetCertificate.issueDate          = _всд.ДатаВСД;
					_vetCertificate.form               = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_всд.Форма);
					//_vetCertificate.type               = ВетисКонстанты.VetDocumentType_INCOMING();
					_vetCertificate.consignor          = _consignor1;
					_vetCertificate.consignee          = _consignee1;
					_vetCertificate.batch              = _batch;
					_vetCertificate.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(__всд.НазначениеГруза));
					_vetCertificate.broker             = ВетисCerberusEnterprise.BusinessEntity(_brokerGuid);
					_vetCertificate.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.Транспорт);
					_vetCertificate.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
					_vetCertificate.cargoInspected     = __всд.КонтрольГосВетврачем;
					_vetCertificate.cargoExpertized    = __всд.Ветсанэкспертиза;
					_vetCertificate.expertiseInfo      = __всд.ЛабораторныеИсследования;
					_vetCertificate.confirmedBy        = _врач1;
					_vetCertificate.confirmedDate      = __всд.Дата;
					_vetCertificate.locationProsperity = __всд.БлагополучиеМестности;
					_vetCertificate.quarantinePlace    = __всд.КарантированиеМесто;
					_vetCertificate.quarantineDays     = __всд.КарантированиеДней;
					_vetCertificate.immunizationInfo   = __всд.Иммунизация;
					//_vetCertificate.precedingVetDocuments = __всд.ПредыдущиеВСД;
					//_vetCertificate.importPermit       = ВетисArgusCommon.Document(всдРазрешениеНаВвозНазвание, всдРазрешениеНаВвозСерия, всдРазрешениеНаВвозНомер, всдРазрешениеНаВвозДата);
					//_vetCertificate.transferPermit     = ВетисArgusCommon.Document(всдРазрешениеНаВывозНазвание, всдРазрешениеНаВывозСерия, всдРазрешениеНаВывозНомер, всдРазрешениеНаВывозДата);
					_vetCertificate.specialMarks       = __всд.ОсобыеОтметки;
					
				КонецЕсли;
				
			#КонецОбласти
			
			_accompanyingForms = ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _vetCertificate);
			
		#КонецОбласти
		
		_delivery = ВетисMercuryVetdocument.Delivery(_consignor2, _consignee2, _Consignment, _accompanyingForms);
		
	#КонецОбласти
	
	#Область deliveryFacts
		_deliveryFacts = ВетисMercuryVetdocument.DeliveryFactList(
		  ВетисArgusCommonСлой1с.DocumentNature(?(ЗначениеЗаполнено(_всд.Статус), Перечисления.ВетисDocumentNature.ELECTRONIC, Объект.ПриродаВСД)),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(Объект.РезультатПриема)),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(Объект.РезультатВетКонтроля), _врач2),
		  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(Объект.РешениеОПриеме));
	#КонецОбласти
	
	#Область discrepancyReport
		Если Объект.СоставитьАктНесоответствия Тогда
			_discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport(
			  Объект.АктНесоответствияСерия,
				Объект.АктНесоответствияНомер,
				Объект.АктНесоответствияДата,
				Объект.АктНесоответствияПричина,
				Объект.АктНесоответствияОписание);
		КонецЕсли;
	#КонецОбласти
	
	#Область returnedDelivery
		Если Объект.СоздатьВозвратныйВСД Тогда
			_returnedDelivery = ВетисMercuryVetdocument.Delivery(_consignee3, _consignor3, _Consignment, _accompanyingForms);
		КонецЕсли;
	#КонецОбласти
	
	
	_Отладка = кпс.РазрешенаОтладка();
	
	_Request = ВетисMercuryApplications.ProcessIncomingConsignmentRequest(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery);
	
	_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "processIncomingConsignmentRequest", Ложь, _Отладка);
	
	Если НЕ _Response = Ложь Тогда
		
		Модифицированность = Истина;
		
		_stockEntry = ВетисОбщегоНазначения.ПолучитьЗначение(_Response.processIncomingConsignmentResponse, "stockEntry");
		
		сжGuid = _stockEntry.guid;
		
		_vetDocument = ВетисОбщегоНазначения.ПолучитьЗначение(_Response.processIncomingConsignmentResponse, "vetDocument");
		
		_всд.Uuid = _vetDocument.uuid;
		
		_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_vetDocument.status);
		
		_всд.ОбменДанными.Загрузка = Истина;
		
		_всд.Записать();
		
		Попытка
			_всд.Записать();
		Исключение
			ВетисЖурнал.ДобавитьСообщениеОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТекстЗапросаСправочникКонтрагентыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.ЭтоГруппа,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Таблица.ИНН,
	|	_Таблица.КПП,
	|	_Таблица.ОсновнойМенеджерПокупателя КАК Менеджер,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.Контрагенты КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.ЭтоГруппа";
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСправочникКлассификаторСтранМираФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления";
		
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСправочникНоменклатурныеГруппыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления";
		
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Строка Из Объект.СкладскойЖурнал Цикл
		Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
			Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
				Если _Строка.Возвратный Тогда
					Если Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
						ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3, СтрДлина(_Реквизит.Имя)-12)];
					КонецЕсли;
				ИначеЕсли НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
					ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПродуктПоВСД()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВСД) Тогда
		Возврат;
	КонецЕсли;
	
	//Объект.СкладскойЖурнал.Очистить();
	
	Если Объект.СкладскойЖурнал.Количество() > 0 Тогда
		_сж = Объект.СкладскойЖурнал[0];
	Иначе
		_сж = Объект.СкладскойЖурнал.Добавить();
	КонецЕсли;
	
	_всд = Объект.ВСД.СкладскойЖурнал[0];
	
	_Количество = _сж.Количество;
	_КоличествоМест = _сж.КоличествоМест;
	
	ЗаполнитьЗначенияСвойств(_сж, _всд);
	
	_сж.Количество = _Количество;
	_сж.КоличествоМест = _КоличествоМест;
	
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуПоВСД()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВСД) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Отправитель = Объект.ВСД.Отправитель;
	Объект.Получатель = Объект.ВСД.Получатель;
	
	Объект.ОтправительПредприятие = Объект.ВСД.ОтправительПредприятие;
	Объект.ПолучательПредприятие = Объект.ВСД.ПолучательПредприятие;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	_Доступность = НЕ ЗначениеЗаполнено(Объект.ВСД);
	
	Элементы.ГруппаЗаголовок.Доступность = _Доступность;
	
	Элементы.сжНоменклатура.Доступность = _Доступность;
	Элементы.сжЕдиницаИзмерения.Доступность = _Доступность;
	Элементы.сжУпаковка.Доступность = _Доступность;
	Элементы.сжВыработкаНачало.Доступность = _Доступность;
	Элементы.сжВыработкаКонец.Доступность = _Доступность;
	Элементы.сжСрокГодностиНачало.Доступность = _Доступность;
	Элементы.сжСрокГодностиКонец.Доступность = _Доступность;
	Элементы.сжСкоропортящаяся.Доступность = _Доступность;
	Элементы.сжСтранаПроисхождения.Доступность = _Доступность;
	Элементы.сжПроизводитель.Доступность = _Доступность;
	Элементы.сжПроизводительПредприятие.Доступность = _Доступность;
	//Элементы.сжМаркировка.Доступность = _Доступность;
	Элементы.сжНекачественныйГруз.Доступность = _Доступность;
	//Элементы.сжСобственник.Доступность = _Доступность;
	
КонецПроцедуры

