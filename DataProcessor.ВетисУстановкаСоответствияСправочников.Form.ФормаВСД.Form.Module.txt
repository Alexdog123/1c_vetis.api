
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВетисЗаполнить(Команда)
	
	СписокВетисЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура СписокВетисЗаполнитьСервер()
	
	СписокВетис.Очистить();
	
	_issuerId = ВетисCerberusEnterpriseСлой1с.BusinessEntity(ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Организация));
	
	_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(Склад);
	
	_ListRequest = ВетисMercuryApplications.getVetDocumentListRequest(_enterpriseGuid);
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	Пока Истина Цикл
		
		_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_ListRequest, "getVetDocumentListRequest", _issuerId, Ложь, _Отладка);
		
		Если _Response = Ложь Тогда Прервать;	КонецЕсли;
		
		_ListResponse = ВетисMercuryApplications.getVetDocumentListResponse(_Response);
		
		Для Каждого _Item из ВетисMercuryVetdocument.VetDocumentListИтератор(_ListResponse) Цикл
			
			ТаблицаСтрока = СписокВетис.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТаблицаСтрока, _Item);
			
			ТаблицаСтрока.cargoExpertized = _Item.cargoExpertized;
			
			ТаблицаСтрока.cargoInspected = _Item.cargoInspected;
			
			ТаблицаСтрока.confirmedBy = _Item.confirmedBy.fio;
			
			ТаблицаСтрока.consignee = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_Item.consignee.businessEntity.guid);
			
			ТаблицаСтрока.consignor = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_Item.consignor.businessEntity.guid);
			
			ТаблицаСтрока.form = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_Item.form);
			
			ТаблицаСтрока.issueDate = _Item.issueDate;
			
			ТаблицаСтрока.purpose = ВетисArgusCommonСлой1с.Purpose(_Item.purpose.guid);
			
			ТаблицаСтрока.status = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Item.status);
			
			//ТаблицаСтрока.transferPermit = ?(_Item.Свойство("transferPermit"), "№" + _Item.transferPermit.issueNumber + " от " + _Item.transferPermit.issueDate, "");
			
			ТаблицаСтрока.transportInfo = _Item.transportInfo.transportNumber.vehicleNumber;//?(_Item.Свойство("transportInfo"), "номер: " + _Item.transportInfo.transportNumber.vehicleNumber, "");
			
			ТаблицаСтрока.transportType = ВетисArgusShipmentСлой1с.TransportType(_Item.transportInfo.transportType);//?(_Item.Свойство("transportInfo"), ВетисArgusShipmentСлой1с.TransportType(_Item.transportInfo.transportType), Неопределено);
			
			ТаблицаСтрока.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_Item.transportStorageType);
			
			ТаблицаСтрока.type = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_Item.type);
			
			ТаблицаСтрока.waybillType = ВетисArgusShipmentСлой1с.WaybillType(_Item.waybillType);
			
			ТаблицаСтрока.waybill = "№" + _Item.waybillNumber + " от " + ВетисBase.xsDate(_Item.waybillDate);
			
			ТаблицаСтрока.НоменклатурнаяГруппа = ВетисArgusProductionСлой1с.SubProduct(_Item.batch.subProduct.guid);
			
			ТаблицаСтрока.Количество = _Item.batch.volume;
			
			ТаблицаСтрока.КоличествоМест = _Item.batch.packingAmount;
			
			ТаблицаСтрока.ЕдиницаИзмерения = ВетисArgusCommonСлой1с.Unit(_Item.batch.unit.guid);
			
			ТаблицаСтрока.Упаковка = ВетисArgusCommonСлой1с.PackingForm(_Item.batch.packingList);
			
			ТаблицаСтрока.Скоропортящаяся = _Item.batch.perishable;
			
			ТаблицаСтрока.СтранаПроисхождения = ВетисIkarСлой1с.Country(_Item.batch.countryOfOrigin.guid);
			
			ТаблицаСтрока.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_Item.batch.producerList.producer[0].enterprise.guid);
			
			Если НЕ ЗначениеЗаполнено(ТаблицаСтрока.ПроизводительПредприятие) Тогда
				ТаблицаСтрока.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(_Item.batch.producerList.producer[0].enterprise.guid);
			КонецЕсли;
			
			//ТаблицаСтрока.Производитель = ;
			
			ТаблицаСтрока.НекачественныйГруз = _Item.batch.lowGradeCargo;
			
			ТаблицаСтрока.Собственник = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_Item.batch.owner.guid);
			
		КонецЦикла;
		
		Если НЕ ВетисMercuryApplications.getVetDocumentListRequestСледующий(_ListRequest, _ListResponse) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//СписокВетис.Сортировать("name");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязь(Команда)
	
	Если Элементы.СписокВетис.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СправочникСписок.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьСвязьСервер(Элементы.СписокВетис.ТекущиеДанные.uuid, Элементы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер(uuid, пСсылка) Экспорт
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	_issuerId = ВетисCerberusEnterpriseСлой1с.BusinessEntity(ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(Организация));
	
	_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(Склад);
	
	_Request = ВетисMercuryApplications.getVetDocumentByUuidRequest(uuid, _enterpriseGuid);
	
	_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "getVetDocumentByUuidRequest", _issuerId, Ложь, _Отладка);
	
	Если _Response = Ложь Тогда Возврат;	КонецЕсли;
	
	_Response = ВетисMercuryApplications.getVetDocumentByUuidResponse(_Response);
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response);
	
	_док.ОбменДанными.Загрузка = Истина;
	
	_док.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	//Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
	//	Для Каждого _ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
	//		
	//		ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
	//		
	//	КонецЦикла;
	//Иначе
	//	_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//	
	//	ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
	//	
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВетисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//_ТекДанные = Элементы.СписокВетис.ТекущиеДанные;
	//
	//Элементы.СправочникСписок.ТекущаяСтрока = СправочникСписокНайти(_ТекДанные.name)
	
КонецПроцедуры


Функция СправочникСписокНайти(пНаименование)
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(пНаименование);
	
КонецФункции

&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	
	//_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//
	//_СписокВетисСтроки = СписокВетис.НайтиСтроки(Новый Структура("name", _ТекДанные.name));
	//
	//Если _СписокВетисСтроки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элементы.СписокВетис.ТекущаяСтрока = _СписокВетисСтроки[0].ПолучитьИдентификатор();
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	
КонецПроцедуры


&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("СкладыОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", Новый Структура("Ключ,Запрос", Склад, ПолучитьТекстЗапросаСправочникСкладыФормаВыбора()), ,,,, оо);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Склад = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТекстЗапросаСправочникСкладыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.ЭтоГруппа,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.Склады КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	//|	И НЕ _Таблица.ЭтоГруппа
	|	И ИСТИНА";
	
КонецФункции


