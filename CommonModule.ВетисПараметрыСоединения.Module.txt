
Функция Логин() Экспорт
	Возврат ВетисПеременные.Получить("ВетисЛогин");
КонецФункции

Функция Пароль() Экспорт
	Возврат ВетисПеременные.Получить("ВетисПароль");
КонецФункции

Функция apiKey() Экспорт
	Возврат ВетисПеременные.Получить("ВетисКлючАПИ");
КонецФункции

Функция serviceId() Экспорт
	Возврат "mercury-g2b.service";
КонецФункции

Функция ЛогинВрача() Экспорт
	Возврат ВетисПеременные.Получить("ВетисЛогинВрача");
КонецФункции

Функция ЛогинХС() Экспорт
	Возврат ВетисПеременные.Получить("ВетисЛогинХС");
КонецФункции

Функция ПарольХС() Экспорт
	Возврат ВетисПеременные.Получить("ВетисПарольХС");
КонецФункции

Функция Адрес() Экспорт
	Возврат ВетисПеременные.Получить("ВетисАдресТочкиДоступа");
КонецФункции

Функция Порт() Экспорт
	Возврат ВетисПеременные.Получить("ВетисПортТочкиДоступа");
КонецФункции

Функция issuerId() Экспорт
	Возврат ВетисПеременные.Получить("ВетисИдентификаторХС");
КонецФункции

Процедура ИнициализироватьНастройки() Экспорт
	
	ВетисПеременные.Установить("ВетисИдентификаторХС", "<нет настроек>");
	ВетисПеременные.Установить("ВетисХС", Неопределено);
	ВетисПеременные.Установить("ВетисПользователь", Пользователи.ТекущийПользователь());
	
	Если НЕ РольДоступна("ВетисПользователь") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьНастройкиХС(Константы.ВетисОсновнойХС.Получить());
	
	_Настройки = ПолучитьНастройкиПользователя();
	
	ВетисПеременные.Установить("ВетисЛогинХС",    _Настройки.Логин);
	ВетисПеременные.Установить("ВетисПарольХС",   _Настройки.Пароль);
	
КонецПроцедуры

Функция ИнициализироватьНастройкиХС(пОрганизация = Неопределено) Экспорт
	
	Если пОрганизация = Неопределено Тогда
		Возврат ВетисПеременные.Получить("ВетисИдентификаторХС");
		
	ИначеЕсли ТипЗнч(пОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		Если ВетисПеременные.Получить("ВетисХС") = пОрганизация Тогда
			Возврат ВетисПеременные.Получить("ВетисИдентификаторХС");
		Иначе
			_Организация = пОрганизация;
			_issuerId = ВетисCerberusEnterpriseСлой1с.BusinessEntity(ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(пОрганизация));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пОрганизация) = Тип("Строка") И НЕ ПустаяСтрока(пОрганизация) Тогда
		Если ВетисПеременные.Получить("ВетисИдентификаторХС") = пОрганизация Тогда
			Возврат ВетисПеременные.Получить("ВетисИдентификаторХС");
		Иначе
			_Организация = ВетисCerberusEnterpriseСлой1с.BusinessEntity(ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(пОрганизация));
			_issuerId = пОрганизация;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	_Настройки = ПолучитьНастройкиХС(_Организация);
	
	ВетисПеременные.Установить("ВетисЛогин",      _Настройки.Логин);
	ВетисПеременные.Установить("ВетисПароль",     _Настройки.Пароль);
	ВетисПеременные.Установить("ВетисЛогинВрача", _Настройки.ЛогинВрача);
	ВетисПеременные.Установить("ВетисКлючАПИ",    _Настройки.КлючАПИ);
	
	ВетисПеременные.Установить("ВетисХС", _Организация);
	ВетисПеременные.Установить("ВетисИдентификаторХС", _issuerId);
	
	ВетисПеременные.Установить("ВетисАдресТочкиДоступа", ?(_Настройки.Тестовый, "api2.vetrf.ru", "api.vetrf.ru"));
	ВетисПеременные.Установить("ВетисПортТочкиДоступа",  ?(_Настройки.Тестовый, 8002, Неопределено));
	
	Возврат _issuerId;
	
КонецФункции

Функция ПолучитьНастройкиХС(пОрганизация)
	
	_мз = РегистрыСведений.ВетисНастройкиХС.СоздатьМенеджерЗаписи();
	_мз.Организация = пОрганизация;
	
	_мз.Прочитать();
	
	Если _мз.Выбран() Тогда
		Возврат Новый Структура("Логин, Пароль, КлючАПИ, ЛогинВрача, Тестовый", _мз.Логин, _мз.Пароль, _мз.КлючАПИ, _мз.ЛогинВрача, _мз.Тестовый);
	Иначе
		Возврат Новый Структура("Логин, Пароль, КлючАПИ, ЛогинВрача, Тестовый", "", "", "", "", Истина);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиПользователя()
	
	_мз = РегистрыСведений.ВетисПользователи.СоздатьМенеджерЗаписи();
	_мз.Пользователь = ВетисПеременные.Получить("ВетисПользователь");
	_мз.Организация = ВетисПеременные.Получить("ВетисХС");
	
	_мз.Прочитать();
	
	Если _мз.Выбран() Тогда
		Возврат Новый Структура("Логин, Пароль", _мз.Логин, _мз.Пароль);
	Иначе
		Возврат Новый Структура("Логин, Пароль", "", "");
	КонецЕсли;
	
КонецФункции
