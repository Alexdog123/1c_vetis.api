
Функция ПолучитьФабрикуXD() Экспорт
	
	ОпределениеWS = WSСсылки.ApplicationManagementsServiceTest.ПолучитьWSОпределения();
	
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса  
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный  
	МассивURI = Новый Массив;  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);  
	
	Пакеты = Новый Массив;  
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/production"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/common"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  
	
	// создаем общую фабрику  
	ФабрикаXD = Новый ФабрикаXDTO(, Пакеты);
	
	Возврат ФабрикаXD;
	
КонецФункции

Функция ВыполнитьЗапрос(пФункцияXD, пИмяФункции, ПоУмолчанию = Неопределено, пОтладка = Ложь, пОжидание = 5) Экспорт
	
	_ФабрикаXD = ПолучитьФабрикуXD();
	
	_Соединение = ПолучитьСоединение();
	
	
	//запрос на создание заявки
	
	Application = ВетисApplication.Application(пФункцияXD, пИмяФункции);
	
		SubmitRequest = ВетисApplication.submitApplicationRequest(Application);
		
			Envelope = ВетисSoapEnvelope.Envelope(SubmitRequest, "submitApplicationRequest");
			
				_ТекстЗапроса = Сериализовать(_ФабрикаXD, Envelope);
				
				Если пОтладка = Истина Тогда
					ВывестиСообщение(_ТекстЗапроса);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
				
				_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					ВывестиСообщение("Ошибка при отправке запроса");
					ВывестиСообщение(_ТекстЗапроса);
					Возврат ПоУмолчанию;
				КонецЕсли;
				
			Envelope = Десериализовать(_ФабрикаXD, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		SubmitResponse = ВетисSoapEnvelope.Извлечь(Envelope).submitApplicationResponse;
		
		Если пОтладка = Истина Тогда
			ВывестиСообщение(Сериализовать(_ФабрикаXD, SubmitResponse.application));
		КонецЕсли;
		
	//Application = SubmitResponse.Application;
	
	Если НЕ (SubmitResponse.Application.status = ВетисApplication.Status_ACCEPTED()) Тогда 
		ВывестиСообщение("Запрос вернулся со статусом " + SubmitResponse.Application.status);
		Возврат ПоУмолчанию; 
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	receiveRequest = ВетисApplication.receiveApplicationResultRequest(SubmitResponse.Application.applicationId);
	
	Envelope = ВетисSoapEnvelope.Envelope(receiveRequest, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = Сериализовать(_ФабрикаXD, Envelope);
	
	Если пОтладка = Истина Тогда
		ВывестиСообщение(_ТекстЗапроса);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
	
	Пока Истина Цикл
		
		_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			ВывестиСообщение("Ошибка при отправке запроса");
			ВывестиСообщение(_ТекстЗапроса);
			Возврат ПоУмолчанию;
		КонецЕсли;
		
		Envelope = Десериализовать(_ФабрикаXD, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		receiveResponse = ВетисSoapEnvelope.Извлечь(Envelope).receiveApplicationResultResponse;
		
		Если receiveResponse.Application.Status = ВетисApplication.Status_IN_PROCESS() Тогда
			//ВывестиСообщение("Ждем ответа", 1);
		Иначе
			Если НЕ receiveResponse.Application.status = ВетисApplication.Status_COMPLETED() Тогда
				ВывестиСообщение(Сериализовать(_ФабрикаXD, receiveResponse.application.errors.error));
				Возврат ПоУмолчанию;
			Иначе
				Если пОтладка = Истина Тогда
					ВывестиСообщение(Сериализовать(_ФабрикаXD, receiveResponse.application));
				КонецЕсли;
				Возврат ВетисApplication.ApplicationResult(receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСписокТиповПродуктов() Экспорт
	Список = Новый СписокЗначений();
	Список.Добавить(1, "Мясо и мясопродукты");
	Список.Добавить(2, "Корма и кормовые добавки");
	Список.Добавить(3, "Живые животные");
	Список.Добавить(4, "Лекарственные средства");
	Список.Добавить(5, "Пищевые продукты");
	Список.Добавить(6, "Непищевые продукты и другое");
	Список.Добавить(7, "Рыба и морепродукты");
	Список.Добавить(8, "Продукция, не требующая разрешения");
	Возврат(Список);
КонецФункции

Функция ПолучитьСписокСтатусовЗаписейЖурнала() Экспорт
	Список = Новый СписокЗначений();
	Список.Добавить("100", "Запись создана.");
	Список.Добавить("102", "Отправлена. Запись создана хозяйствующим субъектом и отправлена в ГВЭ на рассмотрение.");
	Список.Добавить("110", "Запись создана в результате объединения двух или более других.");
	Список.Добавить("120", "Запись создана в результате разделения другой.");
	Список.Добавить("200", "В запись были внесены изменения.");
	Список.Добавить("201", "Запись журнала аннулирована.");
	Список.Добавить("202", "Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана и часть объёма.");
	Список.Добавить("230", "Запись была обновлена в результате присоединения другой.");
	Список.Добавить("240", "Запись была обновлена в результате отделения от неё другой.");
	Список.Добавить("300", "Запись была перемещена в другую группу (для иерархических справочников).");
	Список.Добавить("400", "Запись была удалена.");
	Список.Добавить("410", "Запись была удалена в результате объединения.");
	Список.Добавить("420", "Запись была удалена в результате разделения.");
	Список.Добавить("430", "Запись была удалена в результате присоединения.");
	Возврат(Список);
КонецФункции 


Функция Десериализовать(пФабрика, пТекст, пТип)
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Возврат пФабрика.ПрочитатьXML(_Чтение, пТип);
	
КонецФункции

Функция Сериализовать(пФабрика, пОбъект)
	
	_ЗаписьXML = Новый ЗаписьXML;  
	_ЗаписьXML.УстановитьСтроку("UTF-8");  
	
	пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);  
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции


Функция ПолучитьСоединение() Экспорт
	
	_п = ВетисПараметрыСоединения;
	
	Возврат Новый HTTPСоединение(_п.Адрес(), _п.Порт(), _п.Логин(), _п.Пароль(), , Истина);  
	
КонецФункции

Функция ПолучитьЗапрос(пТекстЗапроса) Экспорт
	
	_Запрос = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

Функция ПолучитьОтвет(пЗапрос, пСоединение = Неопределено) Экспорт
	
	Если ТипЗнч(пЗапрос) = Тип("Строка") Тогда
		_Запрос = ПолучитьЗапрос(пЗапрос);
	Иначе
		_Запрос = пЗапрос;
	КонецЕсли;
	
	Если пСоединение = Неопределено Тогда
		_Соединение = ПолучитьСоединение();
	Иначе
		_Соединение = пСоединение;
	КонецЕсли;
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		ВывестиСообщение("Ошибка при отправке запроса");
	КонецЕсли;
	
	Возврат _Ответ;
	
КонецФункции


Функция ВывестиСообщение(Текст) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецФункции

