
Функция Фабрика() Экспорт
	
	ОпределениеWS = WSСсылки.ApplicationManagementsServiceTest.ПолучитьWSОпределения();
	
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный
	МассивURI = Новый Массив;  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);  
	
	Пакеты = Новый Массив;  
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/production"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/common"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл  
		Пакеты.Добавить(Пакет);
	КонецЦикла;  
	
	// создаем общую фабрику  
	ФабрикаXD = Новый ФабрикаXDTO(, Пакеты);
	
	Возврат ФабрикаXD;
	
КонецФункции

Функция ВыполнитьЗапрос(пФункцияXD, пИмяФункции, ПоУмолчанию = Неопределено, пОтладка = Ложь, пОжидание = 5) Экспорт
	
	_Фабрика = Фабрика();
	
	_Соединение = ВетисПараметрыСоединения.ПолучитьСоединение();
	
	
	//запрос на создание заявки
	
	Application = ВетисApplication.Application(пФункцияXD, пИмяФункции);
	
		SubmitRequest = ВетисApplication.submitApplicationRequest(Application);
		
			Envelope = ВетисSoapEnvelope.Envelope(SubmitRequest, "submitApplicationRequest");
			
				_ТекстЗапроса = Сериализовать(_Фабрика, Envelope);
				
				Если пОтладка = Истина Тогда
					ВывестиСообщение(_ТекстЗапроса);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
				
				_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					ВывестиСообщение("Ошибка при отправке запроса");
					ВывестиСообщение(_ТекстЗапроса);
					Возврат ПоУмолчанию;
				КонецЕсли;
				
			Envelope = Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		SubmitResponse = ВетисSoapEnvelope.Извлечь(Envelope).submitApplicationResponse;
		
		Если пОтладка = Истина Тогда
			ВывестиСообщение(Сериализовать(_Фабрика, SubmitResponse.application));
		КонецЕсли;
		
	//Application = SubmitResponse.Application;
	
	Если НЕ (SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда 
		ВывестиСообщение("Запрос вернулся со статусом " + SubmitResponse.Application.status);
		Возврат ПоУмолчанию; 
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	receiveRequest = ВетисApplication.receiveApplicationResultRequest(SubmitResponse.Application.applicationId);
	
	Envelope = ВетисSoapEnvelope.Envelope(receiveRequest, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = Сериализовать(_Фабрика, Envelope);
	
	Если пОтладка = Истина Тогда
		ВывестиСообщение(_ТекстЗапроса);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
	
	Пока Истина Цикл
		
		_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			ВывестиСообщение("Ошибка при отправке запроса");
			ВывестиСообщение(_ТекстЗапроса);
			Возврат ПоУмолчанию;
		КонецЕсли;
		
		Envelope = Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		receiveResponse = ВетисSoapEnvelope.Извлечь(Envelope).receiveApplicationResultResponse;
		
		Если receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			//ВывестиСообщение("Ждем ответа", 1);
		Иначе
			Если НЕ receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				ВывестиСообщение(Сериализовать(_Фабрика, receiveResponse.application.errors.error));
				Возврат ПоУмолчанию;
			Иначе
				Если пОтладка = Истина Тогда
					ВывестиСообщение(Сериализовать(_Фабрика, receiveResponse.application));
				КонецЕсли;
				Возврат ВетисApplication.ApplicationResult(receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


Функция Десериализовать(пФабрика, пТекст, пТип)
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Возврат пФабрика.ПрочитатьXML(_Чтение, пТип);
	
КонецФункции

Функция Сериализовать(пФабрика, пОбъект)
	
	_ЗаписьXML = Новый ЗаписьXML;  
	_ЗаписьXML.УстановитьСтроку("UTF-8");  
	
	пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);  
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции


Функция ПолучитьЗапрос(пТекстЗапроса) Экспорт
	
	_Запрос = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

Функция ПолучитьОтвет(пЗапрос, пСоединение = Неопределено) Экспорт
	
	Если ТипЗнч(пЗапрос) = Тип("Строка") Тогда
		_Запрос = ПолучитьЗапрос(пЗапрос);
	Иначе
		_Запрос = пЗапрос;
	КонецЕсли;
	
	Если пСоединение = Неопределено Тогда
		_Соединение = ВетисПараметрыСоединения.ПолучитьСоединение();
	Иначе
		_Соединение = пСоединение;
	КонецЕсли;
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		ВывестиСообщение("Ошибка при отправке запроса");
	КонецЕсли;
	
	Возврат _Ответ;
	
КонецФункции

Функция ПолучитьИтератор(List, пИмя) Экспорт
	
	Если Число(List.Count) = 0 Тогда
		Возврат Новый Массив;
	Иначе
		Если ТипЗнч(List[пИмя]) = Тип("СписокXDTO") Тогда
			Возврат List[пИмя];
		Иначе
			_Список = Новый Массив;
			_Список.Добавить(List[пИмя]);
			Возврат _Список;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Процедура УстановитьЗначениеXDTO(пОбъект, пИмяСвойства, пЗначение, пТекстОшибки = Неопределено) Экспорт
	
	Попытка
		
		пОбъект.Установить(пИмяСвойства, пЗначение);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Заполнение XDTO.
			|Ошибка установки значения свойства ""%1""!'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, пИмяСвойства);
		
		пТекстОшибки = ?(ЗначениеЗаполнено(пТекстОшибки), пТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение) Экспорт
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя) Экспорт
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции


Функция ВывестиСообщение(пТекст, пКонтекст = "") Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекст);
	
	кпсЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + пТекст);
	
КонецФункции

Функция ВывестиСообщениеОбОшибке(пИнформацияОбОшибке, пКонтекст = "", пКратко = Истина) Экспорт
	
	Если пКратко Тогда
		_Текст = КраткоеПредставлениеОшибки(пИнформацияОбОшибке);
	Иначе
		_Текст = ПодробноеПредставлениеОшибки(пИнформацияОбОшибке);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(_Текст);
	
	кпсЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + _Текст);
	
КонецФункции


Функция ListRequestСледующий(ListRequest, ListResponse) Экспорт
	
	Если ListRequest.listOptions.offset + ListRequest.ListOptions.count >= Число(ListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		ListRequest.listOptions.offset = ListRequest.listOptions.offset + ListRequest.ListOptions.count;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

