
Функция Фабрика() Экспорт
	
	ОпределениеWS = WSСсылки.ApplicationManagementsServiceTest.ПолучитьWSОпределения();
	
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный
	МассивURI = Новый Массив;  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);  
	
	Пакеты = Новый Массив;  
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/cerberus/enterprise"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/production"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/argus/common"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл  
		Пакеты.Добавить(Пакет);
	КонецЦикла;  
	
	// создаем общую фабрику  
	ФабрикаXD = Новый ФабрикаXDTO(, Пакеты);
	
	Возврат ФабрикаXD;
	
КонецФункции

Функция ВыполнитьЗапрос(пФункцияXD, пИмяФункции, ПоУмолчанию = Неопределено, пОтладка = Ложь, пОжидание = 5) Экспорт
	
	_Фабрика = Фабрика();
	
	_Соединение = ВетисПараметрыСоединения.ПолучитьСоединение();
	
	
	//запрос на создание заявки
	
	Application = ВетисApplication.Application(пФункцияXD, пИмяФункции);
	
		SubmitRequest = ВетисApplication.submitApplicationRequest(Application);
		
			Envelope = ВетисSoapEnvelope.Envelope(SubmitRequest, "submitApplicationRequest");
			
				_ТекстЗапроса = Сериализовать(_Фабрика, Envelope);
				
				Если пОтладка = Истина Тогда
					ВывестиСообщение(_ТекстЗапроса);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
				
				_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					ВывестиСообщение("Ошибка при отправке запроса");
					ВывестиСообщение(_ТекстЗапроса);
					Возврат ПоУмолчанию;
				КонецЕсли;
				
			Envelope = Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		SubmitResponse = ВетисSoapEnvelope.Извлечь(Envelope).submitApplicationResponse;
		
		Если пОтладка = Истина Тогда
			ВывестиСообщение(Сериализовать(_Фабрика, SubmitResponse.application));
		КонецЕсли;
		
	//Application = SubmitResponse.Application;
	
	Если НЕ (SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда 
		ВывестиСообщение("Запрос вернулся со статусом " + SubmitResponse.Application.status);
		Возврат ПоУмолчанию; 
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	receiveRequest = ВетисApplication.receiveApplicationResultRequest(SubmitResponse.Application.applicationId);
	
	Envelope = ВетисSoapEnvelope.Envelope(receiveRequest, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = Сериализовать(_Фабрика, Envelope);
	
	Если пОтладка = Истина Тогда
		ВывестиСообщение(_ТекстЗапроса);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_ТекстЗапроса);  
	
	Пока Истина Цикл
		
		_Ответ = ПолучитьОтвет(_Запрос, _Соединение);  
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			ВывестиСообщение("Ошибка при отправке запроса");
			ВывестиСообщение(_ТекстЗапроса);
			Возврат ПоУмолчанию;
		КонецЕсли;
		
		Envelope = Десериализовать(_Фабрика, _Ответ.ПолучитьТелоКакСтроку("UTF-8"), Envelope.Тип());
		
		receiveResponse = ВетисSoapEnvelope.Извлечь(Envelope).receiveApplicationResultResponse;
		
		Если receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			//ВывестиСообщение("Ждем ответа", 1);
		Иначе
			Если НЕ receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				ВывестиСообщение(Сериализовать(_Фабрика, receiveResponse.application.errors.error));
				Возврат ПоУмолчанию;
			Иначе
				Если пОтладка = Истина Тогда
					ВывестиСообщение(Сериализовать(_Фабрика, receiveResponse.application));
				КонецЕсли;
				Возврат ВетисApplication.ApplicationResult(receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


Функция Десериализовать(пФабрика, пТекст, пТип)
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Возврат пФабрика.ПрочитатьXML(_Чтение, пТип);
	
КонецФункции

Функция Сериализовать(пФабрика, пОбъект)
	
	_ЗаписьXML = Новый ЗаписьXML;  
	_ЗаписьXML.УстановитьСтроку("UTF-8");  
	
	пФабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);  
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции


Функция ПолучитьЗапрос(пТекстЗапроса) Экспорт
	
	_Запрос = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

Функция ПолучитьОтвет(пЗапрос, пСоединение = Неопределено) Экспорт
	
	Если ТипЗнч(пЗапрос) = Тип("Строка") Тогда
		_Запрос = ПолучитьЗапрос(пЗапрос);
	Иначе
		_Запрос = пЗапрос;
	КонецЕсли;
	
	Если пСоединение = Неопределено Тогда
		_Соединение = ВетисПараметрыСоединения.ПолучитьСоединение();
	Иначе
		_Соединение = пСоединение;
	КонецЕсли;
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		ВывестиСообщение("Ошибка при отправке запроса");
	КонецЕсли;
	
	Возврат _Ответ;
	
КонецФункции

Функция ПолучитьИтератор(List, пИмя) Экспорт
	
	Если ТипЗнч(List) = Тип("ОбъектXDTO") Тогда
		Если List.Свойства().Получить(пИмя) = Неопределено Тогда
			Возврат Новый Массив;
		Иначе
			Если ТипЗнч(List[пИмя]) = Тип("СписокXDTO") Тогда
				Возврат List[пИмя];
			Иначе
				_Список = Новый Массив;
				_Список.Добавить(List[пИмя]);
				Возврат _Список;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(List) = Тип("Структура") Тогда
		Если НЕ List.Свойство(пИмя) Тогда
			Возврат Новый Массив;
		Иначе
			Если ТипЗнч(List[пИмя]) = Тип("Массив") Тогда
				Возврат List[пИмя];
			Иначе
				_Список = Новый Массив;
				_Список.Добавить(List[пИмя]);
				Возврат _Список;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Процедура УстановитьЗначениеXDTO(пОбъект, пИмяСвойства, пЗначение, пТекстОшибки = Неопределено) Экспорт
	
	Если НЕ пЗначение = Неопределено Тогда
		пОбъект[пИмяСвойства] = пЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначение(пОбъект, пИмяСвойства, ПоУмолчанию = Неопределено) Экспорт
	
	Возврат ?(пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено, ПоУмолчанию, пОбъект[пИмяСвойства]);
	
КонецФункции


Функция ВывестиСообщение(пТекст, пКонтекст = "", пОтладка = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекст);
	
	Если пОтладка = Истина Тогда
		кпсЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + пТекст);
	КонецЕсли;
	
КонецФункции

Функция ВывестиСообщениеОбОшибке(пИнформацияОбОшибке, пКонтекст = "", пКратко = Истина) Экспорт
	
	Если пКратко Тогда
		_Текст = КраткоеПредставлениеОшибки(пИнформацияОбОшибке);
	Иначе
		_Текст = ПодробноеПредставлениеОшибки(пИнформацияОбОшибке);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(_Текст);
	
	кпсЖурнал.Добавить(?(пКонтекст = "", "", Строка(пКонтекст) + ": ") + _Текст);
	
КонецФункции

Функция ПолучитьНакопленныеСообщения(пУдалять = Истина) Экспорт
	
	ТекстОшибки = "";
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(пУдалять);
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстОшибки = ТекстОшибки + Сообщение.Текст + Символы.ПС;
	КонецЦикла;

	Возврат ТекстОшибки;
	
КонецФункции


Функция ListRequestСледующий(ListRequest, ListResponse) Экспорт
	
	Если ListRequest.listOptions.offset + ListRequest.ListOptions.count >= Число(ListResponse.Total) Тогда
		Возврат Ложь;
	Иначе
		ListRequest.listOptions.offset = ListRequest.listOptions.offset + ListRequest.ListOptions.count;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СтруктураИзОбъекта(пОбъект) Экспорт
	
	Результат = Новый Структура;
	
	Для каждого _Свойство Из пОбъект.Свойства() Цикл
		
		Если ТипЗнч(пОбъект[_Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			Результат.Вставить(_Свойство.Имя, СтруктураИзОбъекта(пОбъект[_Свойство.Имя]));
		ИначеЕсли ТипЗнч(пОбъект[_Свойство.Имя]) = Тип("СписокXDTO") Тогда
			_Список = Новый Массив;
			Для каждого _Item Из пОбъект[_Свойство.Имя] Цикл
				_Список.Добавить(СтруктураИзОбъекта(_Item));
			КонецЦикла;
			Результат.Вставить(_Свойство.Имя, _Список);
		Иначе
			Результат.Вставить(_Свойство.Имя, пОбъект[_Свойство.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
