
// Тип, описывающий пользователя. Наследуется от типа bs:GenericEntity.
Функция User(login = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "User"));
	
	_Объект.login = login;
	
	Возврат _Объект;
	
КонецФункции


// Тип, описывающий единицу измерения.
Функция Unit(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Unit"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция UnitListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "unit");
	
КонецФункции


// Тип, описывающий упаковку.
// http://help.vetrf.ru/wiki/PackingForm
Функция PackingForm(uuid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "packingForm"));
	
	_Объект.uuid = uuid;
	
	Возврат _Объект;
	
КонецФункции

Функция PackingFormList(uuid = Неопределено) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "PackingFormList"));
	
	PackingFormListДобавить(_Объект, uuid);
	
	Возврат _Объект;
	
КонецФункции

Функция PackingFormListДобавить(List, uuid) Экспорт
	
	Если ТипЗнч(uuid) = Тип("Массив") Тогда
		Для каждого _uuid Из uuid Цикл
			List.packingForm.Добавить(ФормаXML.Элемент, URI(), "packingForm", packingForm(_uuid));
		КонецЦикла;
	ИначеЕсли ТипЗнч(uuid) = Тип("Строка") Тогда
		List.packingForm.Добавить(ФормаXML.Элемент, URI(), "packingForm", packingForm(uuid));
	КонецЕсли;
	
КонецФункции

Функция PackingFormListИтератор(List) Экспорт
	
	Если ТипЗнч(List.packingForm) = Тип("СписокXDTO") Тогда
		Возврат List.packingForm;
	Иначе
		_Список = Новый Массив;
		_Список.Добавить(List.packingForm);
		Возврат _Список;
	КонецЕсли;
	
КонецФункции


// Тип, описывающий назначение груза.
Функция Purpose(guid) Экспорт
	
	_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI(), "Purpose"));
	
	_Объект.guid = guid;
	
	Возврат _Объект;
	
КонецФункции

Функция PurposeListИтератор(List) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПолучитьИтератор(List, "purpose");
	
КонецФункции

Функция PurposeListТаблица() Экспорт
	
	_Таблица = Новый ТаблицаЗначений;
	_Таблица.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_Таблица.Колонки.Добавить("forSubstandard", Новый ОписаниеТипов("Булево"));
	
	Возврат _Таблица;
	
КонецФункции


#Область DocumentNature
// Природа ВСД (электронный или бумажный).

Функция DocumentNature(nature) Экспорт
	
	Если      nature = 1 Тогда
		Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
	ИначеЕсли nature = 2 Тогда
		Возврат ВетисКонстанты.DocumentNature_PAPER();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DocumentNatureОписание(nature) Экспорт
	
	Если      nature = ВетисКонстанты.DocumentNature_ELECTRONIC() ИЛИ nature = 1 Тогда
		Возврат "Электронный документ";
	ИначеЕсли nature = ВетисКонстанты.DocumentNature_PAPER() ИЛИ nature = 2 Тогда
		Возврат "Бумажный документ";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция DocumentNatureСписок() Экспорт
	
	_Список = Новый СписокЗначений();
	
	_Список.Добавить(DocumentNature(1), DocumentNatureОписание(1));
	_Список.Добавить(DocumentNature(2), DocumentNatureОписание(2));
	
	Возврат _Список;
	
КонецФункции

#КонецОбласти


#Область Service

// Получение единицы измерения.
Функция GetUnitByGuid(guid) Экспорт
	
	Возврат Прокси().GetUnitByGuid(guid);
	
КонецФункции

// Получение назначения груза.
Функция GetPurposeByGuid(guid) Экспорт
	
	Возврат Прокси().GetPurposeByGuid(guid);
	
КонецФункции


// Получение списка всех единиц измерения.
Функция GetUnitList(ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetUnitList(ListOptions);
	
КонецФункции

// Получение списка всех единиц измерения.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetUnitListСледующий(Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.unit[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetUnitList(пПараметры.ListOptions);
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = пПараметры.ListResponse.unit[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Получение списка всех назначений груза.
Функция GetPurposeList(ListOptions = Неопределено) Экспорт
	
	Если ListOptions = Неопределено Тогда
		ListOptions = ВетисBase.ListOptions();
	Иначе
		ListOptions.offset = ListOptions.offset + ListOptions.count;
	КонецЕсли;
	
	Возврат Прокси().GetPurposeList(ListOptions);
	
КонецФункции

// Получение списка всех назначений груза.
// Используется самостоятельно в цикле Пока.
// Параметры:
//  Item - элемент списка, возвращаемый параметр
//  пПараметры - для внутреннего использования, начальное значение - Неопределено, обязательный
// Возвращаемое значение:
//	Булево - Ложь значит список пройден весь
Функция GetPurposeListСледующий(Item, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("ListOptions", ВетисBase.ListOptions());
		пПараметры.Вставить("Индекс", 0);
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = пПараметры.ListResponse.purpose[пПараметры.Индекс];
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ListResponse = Прокси().GetPurposeList(пПараметры.ListOptions);
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = пПараметры.ListResponse.purpose[пПараметры.Индекс];
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


Функция Прокси()
	
	_Прокси = WSСсылки.DictionaryServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort");
	_Прокси.Пароль       = ВетисПараметрыСоединения.Пароль();
	_Прокси.Пользователь = ВетисПараметрыСоединения.Логин();
	
	Возврат _Прокси;
	
КонецФункции

Функция URI()
	
	Возврат "http://api.vetrf.ru/schema/cdm/argus/common";
	
КонецФункции

