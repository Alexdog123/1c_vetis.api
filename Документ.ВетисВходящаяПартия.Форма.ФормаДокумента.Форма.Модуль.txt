
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого _Строка Из Объект.СкладскойЖурнал Цикл
		Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
			Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
				Если _Строка.Возвратный Тогда
					Если Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
						ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3, СтрДлина(_Реквизит.Имя)-12)];
					КонецЕсли;
				ИначеЕсли НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
					ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого _Строка Из Объект.ВСД Цикл
		Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
			Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
				Если _Строка.Возвратный Тогда
					Если Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
						ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4, СтрДлина(_Реквизит.Имя)-13)];
					КонецЕсли;
				ИначеЕсли НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
					ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого _Строка Из Объект.ТТН Цикл
		Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				Если _Строка.Возвратный Тогда
					Если Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
						ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4, СтрДлина(_Реквизит.Имя)-13)];
					КонецЕсли;
				ИначеЕсли НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
					ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "СкладскойЖурналПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаВозвратнаяСтраницы.Доступность = Объект.Возвратный;
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СкладскойЖурнал.Очистить();
	ТекущийОбъект.ВСД.Очистить();
	ТекущийОбъект.ТТН.Очистить();
	
	
	_Строка = ТекущийОбъект.СкладскойЖурнал.Добавить();
	_Строка.Возвратный = Ложь;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" И НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 3)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
	_Строка = ТекущийОбъект.СкладскойЖурнал.Добавить();
	_Строка.Возвратный = Истина;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" И Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 3, СтрДлина(_Реквизит.Имя)-12)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
	_Строка = ТекущийОбъект.ВСД.Добавить();
	_Строка.Возвратный = Ложь;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "всд" И НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
	_Строка = ТекущийОбъект.ВСД.Добавить();
	_Строка.Возвратный = Истина;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "всд" И Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 4, СтрДлина(_Реквизит.Имя)-13)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
	_Строка = ТекущийОбъект.ТТН.Добавить();
	_Строка.Возвратный = Ложь;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "ттн" И НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
	_Строка = ТекущийОбъект.ТТН.Добавить();
	_Строка.Возвратный = Истина;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 3) = "ттн" И Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_Строка[Сред(_Реквизит.Имя, 4, СтрДлина(_Реквизит.Имя)-13)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	СкладскойЖурналПриИзмененииНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналПриИзмененииНаСервере(ЭлементИмя)
	
	Если Элементы[ЭлементИмя].ПутьКДанным = "сжНоменклатура" Тогда
		сжЕдиницаИзмерения = сжНоменклатурнаяГруппа.БазоваяЕдиницаИзмерения;
		сжСтранаПроисхождения = сжНоменклатурнаяГруппа.СтранаПроисхождения;
	ИначеЕсли Элементы[ЭлементИмя].ПутьКДанным = "сжНоменклатураВозвратная" Тогда
		сжЕдиницаИзмеренияВозвратная = сжНоменклатурнаяГруппаВозвратная.БазоваяЕдиницаИзмерения;
		сжСтранаПроисхожденияВозвратная = сжНоменклатурнаяГруппаВозвратная.СтранаПроисхождения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Отправитель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения", ЭтаФорма, Элемент_ПутьКДанным(Элемент.Имя));
	
	ОткрытьФорму("Справочник.кпсПунктыНазначения.ФормаВыбора", Новый Структура("Владелец, Заголовок", ПолучитьСписок("Получатель"), "Предприятия"), ,,,, оо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(пЗначение, пПараметр) Экспорт
	
	Выполнить пПараметр + " = пЗначение;";
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСписок(ИмяВладельца)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.Владелец
	|ИЗ
	|	Справочник.кпсПунктыНазначения КАК _Таблица
	|ГДЕ
	|	_Таблица.Владелец ССЫЛКА Справочник.Склады
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.СобственныеКонтрагенты
	|			ГДЕ
	|				РегистрСведений.СобственныеКонтрагенты.Контрагент = &Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", Объект[ИмяВладельца]);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Список = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		_Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат _Список;
	
КонецФункции

Функция Элемент_ПутьКДанным(пЭлементИмя)
	Возврат Элементы[пЭлементИмя].ПутьКДанным;
КонецФункции


&НаКлиенте
Процедура ВозвратныйПриИзменении(Элемент)
	
	Элементы.ГруппаВозвратнаяСтраницы.Доступность = Объект.Возвратный;
	
	Если Объект.Возвратный Тогда
		ЗаполнитьВозвратныйСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставитьАктНесоответствияПриИзменении(Элемент)
	
	Элементы.ГруппаАктНесоответствияКолонка.Доступность = Объект.СоставитьАктНесоответствия;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьВозвратный(Команда)
	
	ЗаполнитьВозвратныйСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвратныйСервер()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если НЕ Прав(_Реквизит.Имя, 10) = "Возвратная" Тогда
			_строка = Лев(_Реквизит.Имя, 3);
			Если Лев(_Реквизит.Имя, 2) = "сж" ИЛИ _строка = "всд" ИЛИ _строка = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя+"Возвратная"] = ЭтаФорма[_Реквизит.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьСервер();
	
КонецПроцедуры

Процедура ОтправитьСервер()
	
	Перем discrepancyReport, returnedDelivery;
	
	_врач = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
	
	#Область initiator
	
	#КонецОбласти
	
	#Область delivery
	
		#Область consignor
			consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Отправитель);
			consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ОтправительПредприятие);
			consignor               = ВетисCerberusEnterprise.BusinessMember(consignorBusinessEntity, consignorEnterprise);
		#КонецОбласти
		
		#Область consignee
			consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(Объект.Получатель);
			consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(Объект.ПолучательПредприятие);
			consignee               = ВетисCerberusEnterprise.BusinessMember(consigneeBusinessEntity, consigneeEnterprise);
		#КонецОбласти
		
		#Область consignment
			_сж = Объект.СкладскойЖурнал[0];
			
			Consignment = ВетисMercuryVetdocument.Consignment();
			
			Consignment.subProduct       = ВетисArgusProduction.GetSubProductByGuid(ВетисArgusProductionСлой1с.SubProduct(_сж.Номенклатура));
			Consignment.product          = ВетисArgusProduction.GetProductByGuid(Consignment.subProduct.productGuid);
			Consignment.productType      = Consignment.product.productType;
			Consignment.volume           = _сж.Количество;
			Consignment.unit             = ВетисArgusCommon.Unit(ВетисArgusCommonСлой1с.Unit(_сж.ЕдиницаИзмерения));
			Consignment.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_сж.Упаковка));
			Consignment.packingAmount    = _сж.КоличествоМест;
			Consignment.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_сж.ВыработкаНачало, _сж.ВыработкаКонец);
			Consignment.expiryDate       = ВетисMercuryVetdocument.GoodsDate(_сж.СрокГодностиНачало, _сж.СрокГодностиКонец);
			Consignment.perishable       = ВетисBase.xsBoolean(_сж.Скоропортящаяся);
			Consignment.countryOfOrigin  = ВетисIkarСлой1с.Country(_сж.СтранаПроисхождения);
			Consignment.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_сж.Производитель));
			Consignment.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(_сж.Маркировка);
			Consignment.lowGradeCargo    = ВетисBase.xsBoolean(_сж.НекачественныйГруз);
			
		#КонецОбласти
		
		#Область accompanyingForms
			
			#Область waybill
				_ттн = Объект.ТТН[0];
				
				waybill = ВетисArgusShipment.Создать("Waybill");
				waybill.issueSeries   = _ттн.Серия;
				waybill.issueNumber   = _ттн.Номер;
				waybill.issueDate     = ВетисBase.xsDate(_ттн.Дата);
				waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
				waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_ттн.Посредник));
				waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.Транспорт);
				waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
				
			#КонецОбласти
			
			#Область vetCertificate
				_всд = Объект.ВСД[0];
				
				vetCertificate = ВетисMercuryVetdocument.Создать("VetDocument");
				vetCertificate.issueSeries        = _всд.Серия;
				vetCertificate.issueNumber        = _всд.Номер;
				vetCertificate.issueDate          = ВетисBase.xsDate(_всд.Дата);
				vetCertificate.type               = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_ттн.Форма);
				vetCertificate.consignor          = consignor;
				vetCertificate.consignee          = consignee;
				vetCertificate.batch              = ВетисMercuryVetdocument.Создать("Batch");
				                                    ЗаполнитьЗначенияСвойств(vetCertificate.batch, Consignment);
				vetCertificate.purpose            = ВетисArgusCommonСлой1с.Purpose(_всд.НазначениеГруза);
				vetCertificate.broker             = waybill.broker;
				vetCertificate.transportInfo      = waybill.transportInfo;
				vetCertificate.transportStorageType = waybill.transportStorageType;
				vetCertificate.cargoInspected     = ВетисBase.xsBoolean(_всд.КонтрольГосВетврачем);
				vetCertificate.cargoExpertized    = ВетисBase.xsBoolean(_всд.Ветсанэкспертиза);
				vetCertificate.expertiseInfo      = _всд.ЛабораторныеИсследования;
				vetCertificate.confirmedBy        = _врач;
				vetCertificate.confirmedDate      = ВетисBase.xsDate(_всд.Дата);
				vetCertificate.locationProsperity = _всд.БлагополучиеМестности;
				vetCertificate.quarantinePlace    = _всд.КарантированиеМесто;
				vetCertificate.quarantineDays     = _всд.КарантированиеДней;
				vetCertificate.immunizationInfo   = _всд.Иммунизация;
				vetCertificate.precedingVetDocuments = _всд.ПредыдущиеВСД;
				vetCertificate.importPermit       = ВетисArgusCommon.Document(_всд.РазрешениеНаВвозНазвание, _всд.РазрешениеНаВвозСерия, _всд.РазрешениеНаВвозНомер, _всд.РазрешениеНаВвозДата);
				vetCertificate.transferPermit     = ВетисArgusCommon.Document(_всд.РазрешениеНаВывозНазвание, _всд.РазрешениеНаВывозСерия, _всд.РазрешениеНаВывозНомер, _всд.РазрешениеНаВывозДата);
				vetCertificate.specialMarks       = _всд.ОсобыеОтметки;
				
			#КонецОбласти
			
			accompanyingForms = ВетисMercuryVetdocument.ConsignmentDocumentList(waybill, vetCertificate);
			
		#КонецОбласти
		
		delivery = ВетисMercuryVetdocument.Delivery(consignor, consignee, Consignment, accompanyingForms);
		
	#КонецОбласти
	
	#Область deliveryFacts
		deliveryFacts = ВетисMercuryVetdocument.DeliveryFactList(
		  ВетисArgusCommonСлой1с.DocumentNature(Объект.ПриродаВСД),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(Объект.РезультатПриема)),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(Объект.РезультатВетКонтроля), _врач),
		  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(Объект.РешениеОПриеме));
	#КонецОбласти
	
	#Область discrepancyReport
		Если Объект.СоставитьАктНесоответствия Тогда
			discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport(
			  Объект.АктНесоответствияСерия,
				Объект.АктНесоответствияНомер,
				Объект.АктНесоответствияДата,
				Объект.АктНесоответствияПричина,
				Объект.АктНесоответствияОписание);
		КонецЕсли;
	#КонецОбласти
	
	#Область returnedDelivery
		Если Объект.Возвратный Тогда
			returnedDelivery = ВетисMercuryVetdocument.Delivery(consignee, consignor, Consignment, accompanyingForms);
		КонецЕсли;
	#КонецОбласти
	
	ВетисMercuryApplications.ProcessIncomingConsignmentRequest(delivery, deliveryFacts, discrepancyReport, returnedDelivery);
	
КонецПроцедуры
