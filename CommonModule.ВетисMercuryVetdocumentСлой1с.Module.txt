
Функция VetDocumentForm(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentForm") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT61();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT62();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT63();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentForm_CERTCU1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_NOTE4() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT5I() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT61() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT62() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT63() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentStatus(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentStatus") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentStatus_CONFIRMED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_WITHDRAWN() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_UTILIZED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_INCOMING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentType_INCOMING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_OUTGOING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResult(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryInspectionResult") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_MISMATCH() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecision(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryDecision") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryDecision_ACCEPT_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_PARTIALLY() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_RETURN_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocument(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент") Тогда
		Возврат value.uuid;
	ИначеЕсли ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		Возврат Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту(value.uuid);
	Иначе
		Возврат Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту(value);
	КонецЕсли;
	
КонецФункции

Функция VetDocumentКонвертировать(value1, value2) Экспорт
	
	Если ТипЗнч(value1) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
		
		_док = value1;
		_всд = value2;
		
		_док.uuid     = _всд.uuid;
		
		_док.СерияВСД = _всд.issueSeries;
		_док.НомерВСД = _всд.issueNumber;
		_док.ДатаВСД  = _всд.issueDate;
		_док.Тип      = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_всд.type);
		_док.Статус   = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_всд.status);
		_док.Форма    = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_всд.form);
		
		_док.Отправитель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignor.businessEntity);
		_док.Получатель  = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignee.businessEntity);
		
		_док.ОтправительПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignor.enterprise);
		_док.ПолучательПредприятие  = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignee.enterprise);
		
		_строкаВСД = ?(_док.ВСД.Количество() = 0, _док.ВСД.Добавить(), _док.ВСД[0]);
		
		//_строкаВСД.Серия    = _всд.issueSeries;
		//_строкаВСД.Номер    = _всд.issueNumber;
		//_строкаВСД.Дата     = _всд.issueDate;
		//_строкаВСД.Тип      = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_всд.type);
		//_строкаВСД.Статус   = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_всд.status);
		//_строкаВСД.Форма    = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_всд.form);
		_строкаВСД.БлагополучиеМестности  = _всд.locationProsperity;
		_строкаВСД.Ветсанэкспертиза       = _всд.cargoExpertized;
		//_строкаВСД.ГосударственныйВетврач = _всд.confirmedBy.fio;
		_строкаВСД.ГосударственныйВетврачДата = ?(_всд.confirmedDate = Неопределено, _строкаВСД.ГосударственныйВетврачДата, _всд.confirmedDate);
		_строкаВСД.ДатаОбновления         = ?(_всд.lastUpdateDate = Неопределено, _строкаВСД.ДатаОбновления, _всд.lastUpdateDate);
		_строкаВСД.Иммунизация            = ?(_всд.immunizationInfo = Неопределено, _строкаВСД.Иммунизация, _всд.immunizationInfo);
		_строкаВСД.КарантированиеДней     = ?(_всд.quarantineDays = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantineDays);
		_строкаВСД.КарантированиеМесто    = ?(_всд.quarantinePlace = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantinePlace);
		_строкаВСД.КонтрольГосВетврачем   = ?(_всд.cargoInspected = Неопределено, _строкаВСД.КонтрольГосВетврачем, _всд.cargoInspected);
		_строкаВСД.ЛабораторныеИсследования = _всд.expertiseInfo;
		_строкаВСД.НазначениеГруза        = ВетисArgusCommonСлой1с.Purpose(_всд.purpose);
		_строкаВСД.ОсобыеОтметки          = _всд.specialMarks;
		_строкаВСД.ПредыдущиеВСД          = ?(_всд.precedingVetDocuments = Неопределено, _строкаВСД.ПредыдущиеВСД, _всд.precedingVetDocuments);
		
		_строкаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
		
		_строкаТТН.Серия          = _всд.waybillSeries;
		_строкаТТН.Номер          = _всд.waybillNumber;
		_строкаТТН.Дата           = _всд.waybillDate;
		_строкаТТН.Тип            = ВетисArgusShipmentСлой1с.WaybillType(_всд.waybillType);
		_строкаТТН.Посредник      = ?(_всд.broker = Неопределено, _строкаТТН.Посредник, ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.broker));
		_строкаТТН.СпособХранения = ВетисArgusShipmentСлой1с.TransportationStorageType(_всд.transportStorageType);
		_строкаТТН.Транспорт      = ВетисArgusShipmentСлой1с.TransportInfo(_всд.transportInfo);
		
		_строкаСЖ = ?(_док.СкладскойЖурнал.Количество() = 0, _док.СкладскойЖурнал.Добавить(), _док.СкладскойЖурнал[0]);
		
		BatchКонвертировать(_строкаСЖ, _всд.batch);
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
		
		_всд = value1;
		_док = value2;
		
		_СтрокаВСД = _док.ВСД[0];
		_СтрокаСЖ  = _док.СкладскойЖурнал[0];
		_СтрокаТТН = _док.ТТН[0];
		
		_consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Отправитель);
		_consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ОтправительПредприятие);
		
		_consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Получатель);
		_consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ПолучательПредприятие);
		
		_всд.issueSeries        = _док.СерияВСД;
		_всд.issueNumber        = _док.НомерВСД;
		_всд.issueDate          = _док.ДатаВСД;
		_всд.form               = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_док.Форма);
		//_всд.type               = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_док.Тип);
		_всд.consignor          = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
		_всд.consignee          = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
		_всд.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
		_всд.broker             = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_всд.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.Транспорт);
		_всд.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		_всд.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
		_всд.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
		_всд.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
		_всд.confirmedBy        = ВетисArgusCommon.User(ВетисПараметрыСоединения.ЛогинВрача());
		_всд.confirmedDate      = _док.ДатаВСД;
		_всд.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		_всд.quarantinePlace    = _СтрокаВСД.КарантированиеМесто;
		_всд.quarantineDays     = _СтрокаВСД.КарантированиеДней;
		_всд.immunizationInfo   = _СтрокаВСД.Иммунизация;
		//_всд.precedingVetDocuments = _СтрокаВСД.ПредыдущиеВСД;
		//_всд.importPermit       = ВетисArgusCommon.Document(всдРазрешениеНаВвозНазвание, всдРазрешениеНаВвозСерия, всдРазрешениеНаВвозНомер, всдРазрешениеНаВвозДата);
		//_всд.transferPermit     = ВетисArgusCommon.Document(всдРазрешениеНаВывозНазвание, всдРазрешениеНаВывозСерия, всдРазрешениеНаВывозНомер, всдРазрешениеНаВывозДата);
		_всд.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		
		_всд.batch = ВетисMercuryVetdocument.Batch();
		
		BatchКонвертировать(_всд.batch, _СтрокаСЖ);
		
	КонецЕсли;
	
КонецФункции

Функция BatchКонвертировать(value1, value2) Экспорт
	
	Если ТипЗнч(value1) = Тип("ДокументТабличнаяЧастьСтрока.ВетисВетеринарноСопроводительныйДокумент.СкладскойЖурнал") Тогда
		
		_СтрокаСЖ = value1;
		_batch    = value2;
		
		_строкаСЖ.НоменклатурнаяГруппа = ВетисArgusProductionСлой1с.SubProduct(_batch.subProduct);
		_строкаСЖ.Количество           = _batch.volume;
		_строкаСЖ.КоличествоМест       = _batch.packingAmount;
		_строкаСЖ.ЕдиницаИзмерения     = ВетисArgusCommonСлой1с.Unit(_batch.unit);
		_строкаСЖ.Упаковка             = ВетисArgusCommonСлой1с.PackingForm(_batch.packingList);
		_строкаСЖ.ВыработкаНачало      = ВетисBase.ComplexDate(_batch.dateOfProduction.firstDate);
		_строкаСЖ.ВыработкаКонец       = ВетисBase.ComplexDate(_batch.dateOfProduction.secondDate);
		_строкаСЖ.СрокГодностиНачало   = ВетисBase.ComplexDate(_batch.expiryDate.firstDate);
		_строкаСЖ.СрокГодностиКонец    = ВетисBase.ComplexDate(_batch.expiryDate.secondDate);
		_строкаСЖ.Скоропортящаяся      = _batch.perishable;
		_строкаСЖ.СтранаПроисхождения  = ВетисIkarСлой1с.Country(_batch.countryOfOrigin);
		_строкаСЖ.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.Producer(_batch.producerList);
		_строкаСЖ.Производитель        = _строкаСЖ.ПроизводительПредприятие.Владелец;
		_строкаСЖ.Собственник          = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_batch.owner);
		//_строкаСЖ.Маркировка           = ВетисMercuryVetdocumentСлой1с.ProductMarking(_batch.productMarkingList);
		_строкаСЖ.НекачественныйГруз   = _batch.lowGradeCargo;
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументТабличнаяЧастьСтрока.ВетисВетеринарноСопроводительныйДокумент.СкладскойЖурнал") Тогда
		
		_batch    = value1;
		_СтрокаСЖ = value2;
		
		_subProduct = ВетисArgusProduction.GetSubProductByGuid(ВетисArgusProductionСлой1с.SubProduct(_СтрокаСЖ.НоменклатурнаяГруппа));
		_product    = ВетисArgusProduction.GetProductByGuid(_subProduct.productGuid);
		
		_unitGuid = ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения);
		_unit     = ВетисArgusCommon.Unit(_unitGuid);
		
		_unitws    = ВетисArgusCommon.GetUnitByGuid(_unitGuid);
		_unit.uuid = _unitws.uuid;
		
		_batch.subProduct       = ВетисArgusProduction.SubProduct(_subProduct.guid);
		_batch.product          = ВетисArgusProduction.Product(_subProduct.productGuid);
		_batch.productType      = _product.productType;
		_batch.productItem      = ВетисArgusProduction.ProductItem(_subProduct.name);
		_batch.volume           = _СтрокаСЖ.Количество;
		_batch.unit             = _unit;
		_batch.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
		_batch.packingAmount    = _СтрокаСЖ.КоличествоМест;
		_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.ВыработкаНачало, _СтрокаСЖ.ВыработкаКонец);
		_batch.expiryDate       = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.СрокГодностиНачало, _СтрокаСЖ.СрокГодностиКонец);
		_batch.perishable       = _СтрокаСЖ.Скоропортящаяся;
		_batch.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(_СтрокаСЖ.СтранаПроисхождения));
		_batch.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.Enterprise(_СтрокаСЖ.ПроизводительПредприятие));
		//_batch.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(_СтрокаСЖ.Маркировка);
		_batch.lowGradeCargo    = _СтрокаСЖ.НекачественныйГруз;
		
	КонецЕсли;
	
КонецФункции

Процедура Синхронизировать(пСсылка = Неопределено) Экспорт
	
	_Отладка = ВетисОбщегоНазначения.РазрешенаОтладка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.uuid,
	|	_Таблица.Тип,
	|	_Таблица.Статус
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И НЕ _Таблица.uuid = """"";
	
	_Ветки = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.guid
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка ССЫЛКА Справочник.Склады";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Request = ВетисMercuryApplications.getVetDocumentListRequest(Выборка.guid);
		
		Пока Истина Цикл
			
			_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "getVetDocumentListRequest", , Ложь, _Отладка);
			
			Если _Response = Ложь Тогда Прервать;	КонецЕсли;
			
			_Response = ВетисMercuryApplications.getVetDocumentListResponse(_Response);
			
			Для Каждого _VetDocument из ВетисMercuryVetdocument.VetDocumentListИтератор(_Response) Цикл
				
				_Строка = _Ветки.Найти(_VetDocument.uuid, "uuid");
				
				Если _Строка = Неопределено Тогда
					_док = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
					_док.Дата = ТекущаяДата();
				ИначеЕсли _Строка.Тип = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_VetDocument.type)
					И _Строка.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_VetDocument.status) Тогда
					//считаем что ничего не изменилось
					_Ветки.Удалить(_Строка);
					Продолжить;
				Иначе
					_док = _Строка.Ссылка.ПолучитьОбъект();
					_Ветки.Удалить(_Строка);
				КонецЕсли;
				
				ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _VetDocument);
				
				_док.ДатаОбновления = ТекущаяДата();
				
				_док.ДополнительныеСвойства.Вставить("Загрузка");
				
				_док.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЦикла;
			
			Если НЕ ВетисMercuryApplications.getVetDocumentListRequestСледующий(_Request, _Response) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;//запрос к апи
		
	КонецЦикла;// список предприятий
	
	Для каждого _Строка Из _Ветки Цикл
		_Строка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура Аннулировать(пСсылка, пПричина) Экспорт
	
	ВетисMercuryApplicationsСлой1с.WithdrawVetDocumentOperation(пСсылка, пПричина);
	
КонецПроцедуры
