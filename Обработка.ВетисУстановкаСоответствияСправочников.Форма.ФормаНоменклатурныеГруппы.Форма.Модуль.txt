
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Для каждого _эл Из ВетисArgusProduction.ProductTypeСписок() Цикл
	//	Элементы.ТипПродукции.СписокВыбора.Добавить(_эл.Значение, _эл.Представление);
	//КонецЦикла;
	//
	//ТипПродукции = 1;
	
	ТипПродукции = ПредопределенноеЗначение("Перечисление.ВетисProductType.МясоИМясопродукты");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВетисЗаполнить(Команда)
	
	СписокВетисЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура СписокВетисЗаполнитьСервер()
	
	СписокВетис.Очистить();
	
	_ListOptionsP = Неопределено;
	
	_ТипПродукции = Перечисления.ВетисProductType.Индекс(ТипПродукции) + 1;
	
	Пока Истина Цикл
		
		Попытка
			_ProductList = ВетисArgusProduction.GetProductByTypeList(_ТипПродукции, _ListOptionsP);
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого _Product из ВетисArgusProduction.ProductListИтератор(_ProductList) Цикл
			
			_ListOptionsS = Неопределено;
			
			Пока Истина Цикл
				
				Попытка
					_SubProductList = ВетисArgusProduction.GetSubProductByProductList(_Product.guid, _ListOptionsS);
				Исключение
					Прервать;
				КонецПопытки;
				
				Для Каждого _subProduct из ВетисArgusProduction.SubProductListИтератор(_SubProductList) Цикл
					ТаблицаСтрока = СписокВетис.Добавить();
					ТаблицаСтрока.name = _subProduct.name;
					ТаблицаСтрока.guid = _subProduct.guid;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокВетис.Сортировать("name");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязь(Команда)
	
	ТекущиеДанные = Элементы.СправочникСписок.ТекущиеДанные;
	
	СоздатьСвязьСервер(ТекущиеДанные.Ссылка);
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер(п1сСсылка) Экспорт
	
	_ТекДанные = СписокВетис.НайтиПоИдентификатору(Элементы.СписокВетис.ТекущаяСтрока);
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Добавить(_ТекДанные1с.Ссылка, _ТекДанные.guid, _ТекДанные.name);
			
		КонецЦикла;
		
	Иначе
		ВетисСоответствие.Добавить(п1сСсылка, _ТекДанные.guid, _ТекДанные.name);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
			
		КонецЦикла;
	Иначе
		_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
		
		ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВетисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//_ТекДанные = Элементы.СписокВетис.ТекущиеДанные;
	//
	//Элементы.СправочникСписок.ТекущаяСтрока = СправочникСписокНайти(_ТекДанные.name)
	
КонецПроцедуры

Функция СправочникСписокНайти(пНаименование)
	
	Возврат Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(пНаименование);
	
КонецФункции


&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//
	//_СписокВетисСтроки = СписокВетис.НайтиСтроки(Новый Структура("name", _ТекДанные.name));
	//
	//Если _СписокВетисСтроки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элементы.СписокВетис.ТекущаяСтрока = _СписокВетисСтроки[0].ПолучитьИдентификатор();
	
КонецПроцедуры

