
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НомерСкладаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВетисЗаполнить(Команда)
	
	СписокВетисЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура СписокВетисЗаполнитьСервер()
	
	СписокВетис.Очистить();
	
	_ListRequest = ВетисMercuryApplications.getVetDocumentListRequest(enterpriseGuid);
	
	_Отладка = кпс.РазрешенаОтладка();
	
	Пока Истина Цикл
		
		_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_ListRequest, "getVetDocumentListRequest", Ложь, _Отладка);
		
		Если _Response = Ложь Тогда Прервать;	КонецЕсли;
		
		_ListResponse = ВетисMercuryApplications.getVetDocumentListResponse(_Response);
		
		Для Каждого _Item из ВетисMercuryVetdocument.VetDocumentListИтератор(_ListResponse) Цикл
			
			_Item = ВетисОбщегоНазначения.СтруктураИзОбъекта(_Item);
			
			ТаблицаСтрока = СписокВетис.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТаблицаСтрока, _Item);
			
			ТаблицаСтрока.cargoExpertized = ?(_Item.Свойство("cargoExpertized"), ВетисBase.xsBoolean(_Item.cargoExpertized), Ложь);
			
			ТаблицаСтрока.cargoInspected = ?(_Item.Свойство("cargoInspected"), ВетисBase.xsBoolean(_Item.cargoInspected), Ложь);
			
			ТаблицаСтрока.confirmedBy = ?(_Item.Свойство("confirmedBy"), _Item.confirmedBy.fio, "");
			
			ТаблицаСтрока.consignee = ВетисCerberusEnterpriseСлой1с.BusinessEntityОрганизация(_Item.consignee.businessEntity.guid);
			
			ТаблицаСтрока.consignor = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Item.consignor.businessEntity.guid);
			
			ТаблицаСтрока.form = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_Item.form);
			
			ТаблицаСтрока.issueDate = ВетисBase.xsDate(_Item.issueDate);
			
			ТаблицаСтрока.purpose = ВетисArgusCommonСлой1с.Purpose(_Item.purpose.guid);
			
			ТаблицаСтрока.status = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Item.status);
			
			ТаблицаСтрока.transferPermit = ?(_Item.Свойство("transferPermit"), "№" + _Item.transferPermit.issueNumber + " от " + _Item.transferPermit.issueDate, "");
			
			ТаблицаСтрока.transportInfo = ?(_Item.Свойство("transportInfo"), "номер: " + _Item.transportInfo.transportNumber.vehicleNumber, "");
			
			ТаблицаСтрока.transportType = ?(_Item.Свойство("transportInfo"), ВетисArgusShipmentСлой1с.TransportType(_Item.transportInfo.transportType), Неопределено);
			
			ТаблицаСтрока.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_Item.transportStorageType);
			
			ТаблицаСтрока.type = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_Item.type);
			
			ТаблицаСтрока.waybillType = ВетисArgusShipmentСлой1с.WaybillType(_Item.waybillType);
			
			ТаблицаСтрока.waybill = "№" + _Item.waybillNumber + " от " + ВетисBase.xsDate(_Item.waybillDate);
			
		КонецЦикла;
		
		Если НЕ ВетисMercuryApplications.getVetDocumentListRequestСледующий(_ListRequest, _ListResponse) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//СписокВетис.Сортировать("name");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязь(Команда)
	
	ТекущиеДанные = Элементы.СправочникСписок.ТекущиеДанные;
	
	СоздатьСвязьСервер(ТекущиеДанные.Ссылка);
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер(п1сСсылка) Экспорт
	
	_ТекДанные = СписокВетис.НайтиПоИдентификатору(Элементы.СписокВетис.ТекущаяСтрока);
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные1с из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Добавить(_ТекДанные1с.Ссылка, _ТекДанные.guid, _ТекДанные.name);
			
		КонецЦикла;
		
	Иначе
		ВетисСоответствие.Добавить(п1сСсылка, _ТекДанные.guid, _ТекДанные.name);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого _ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
			
			ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
			
		КонецЦикла;
	Иначе
		_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
		
		ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВетисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//_ТекДанные = Элементы.СписокВетис.ТекущиеДанные;
	//
	//Элементы.СправочникСписок.ТекущаяСтрока = СправочникСписокНайти(_ТекДанные.name)
	
КонецПроцедуры

Функция СправочникСписокНайти(пНаименование)
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(пНаименование);
	
КонецФункции


&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//
	//_СписокВетисСтроки = СписокВетис.НайтиСтроки(Новый Структура("name", _ТекДанные.name));
	//
	//Если _СписокВетисСтроки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элементы.СписокВетис.ТекущаяСтрока = _СписокВетисСтроки[0].ПолучитьИдентификатор();
	
КонецПроцедуры


&НаКлиенте
Процедура НомерСкладаПриИзменении(Элемент = Неопределено)
	
	enterpriseGuid = ВетисПараметрыСоединения.enterpriseGuid(НомерСклада);
	
	_Склад = ВетисCerberusEnterprise.GetEnterpriseByGuid(enterpriseGuid);
	
	Склад = _Склад.address.addressView;
	
КонецПроцедуры

