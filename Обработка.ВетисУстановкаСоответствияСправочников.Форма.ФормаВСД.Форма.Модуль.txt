
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НомерСкладаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВетисЗаполнить(Команда)
	
	СписокВетисЗаполнитьСервер();
	
КонецПроцедуры

&НаСервере
Процедура СписокВетисЗаполнитьСервер()
	
	СписокВетис.Очистить();
	
	_ListRequest = ВетисMercuryApplications.getVetDocumentListRequest(enterpriseGuid);
	
	_Отладка = кпс.РазрешенаОтладка();
	
	Пока Истина Цикл
		
		_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_ListRequest, "getVetDocumentListRequest", Ложь, _Отладка);
		
		Если _Response = Ложь Тогда Прервать;	КонецЕсли;
		
		_ListResponse = ВетисMercuryApplications.getVetDocumentListResponse(_Response);
		
		Для Каждого _Item из ВетисMercuryVetdocument.VetDocumentListИтератор(_ListResponse) Цикл
			
			ТаблицаСтрока = СписокВетис.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТаблицаСтрока, _Item);
			
			ТаблицаСтрока.cargoExpertized = _Item.cargoExpertized;
			
			ТаблицаСтрока.cargoInspected = _Item.cargoInspected;
			
			ТаблицаСтрока.confirmedBy = _Item.confirmedBy.fio;
			
			ТаблицаСтрока.consignee = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Item.consignee.businessEntity.guid);
			
			ТаблицаСтрока.consignor = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Item.consignor.businessEntity.guid);
			
			ТаблицаСтрока.form = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_Item.form);
			
			ТаблицаСтрока.issueDate = _Item.issueDate;
			
			ТаблицаСтрока.purpose = ВетисArgusCommonСлой1с.Purpose(_Item.purpose.guid);
			
			ТаблицаСтрока.status = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Item.status);
			
			//ТаблицаСтрока.transferPermit = ?(_Item.Свойство("transferPermit"), "№" + _Item.transferPermit.issueNumber + " от " + _Item.transferPermit.issueDate, "");
			
			ТаблицаСтрока.transportInfo = _Item.transportInfo.transportNumber.vehicleNumber;//?(_Item.Свойство("transportInfo"), "номер: " + _Item.transportInfo.transportNumber.vehicleNumber, "");
			
			ТаблицаСтрока.transportType = ВетисArgusShipmentСлой1с.TransportType(_Item.transportInfo.transportType);//?(_Item.Свойство("transportInfo"), ВетисArgusShipmentСлой1с.TransportType(_Item.transportInfo.transportType), Неопределено);
			
			ТаблицаСтрока.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_Item.transportStorageType);
			
			ТаблицаСтрока.type = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_Item.type);
			
			ТаблицаСтрока.waybillType = ВетисArgusShipmentСлой1с.WaybillType(_Item.waybillType);
			
			ТаблицаСтрока.waybill = "№" + _Item.waybillNumber + " от " + ВетисBase.xsDate(_Item.waybillDate);
			
			ТаблицаСтрока.НоменклатурнаяГруппа = ВетисArgusProductionСлой1с.SubProduct(_Item.batch.subProduct.guid);
			
			ТаблицаСтрока.Количество = _Item.batch.volume;
			
			ТаблицаСтрока.КоличествоМест = _Item.batch.packingAmount;
			
			ТаблицаСтрока.ЕдиницаИзмерения = ВетисArgusCommonСлой1с.Unit(_Item.batch.unit.guid);
			
			ТаблицаСтрока.Упаковка = ВетисArgusCommonСлой1с.PackingForm(_Item.batch.packingList);
			
			ТаблицаСтрока.Скоропортящаяся = _Item.batch.perishable;
			
			ТаблицаСтрока.СтранаПроисхождения = ВетисIkarСлой1с.Country(_Item.batch.countryOfOrigin.guid);
			
			ТаблицаСтрока.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_Item.batch.producerList.producer[0].enterprise.guid);
			
			Если НЕ ЗначениеЗаполнено(ТаблицаСтрока.ПроизводительПредприятие) Тогда
				ТаблицаСтрока.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(_Item.batch.producerList.producer[0].enterprise.guid);
			КонецЕсли;
			
			//ТаблицаСтрока.Производитель = ;
			
			ТаблицаСтрока.НекачественныйГруз = _Item.batch.lowGradeCargo;
			
			ТаблицаСтрока.Собственник = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Item.batch.owner.guid);
			
		КонецЦикла;
		
		Если НЕ ВетисMercuryApplications.getVetDocumentListRequestСледующий(_ListRequest, _ListResponse) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//СписокВетис.Сортировать("name");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязь(Команда)
	
	Если Элементы.СписокВетис.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СправочникСписок.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьСвязьСервер(Элементы.СписокВетис.ТекущиеДанные.uuid, Элементы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязьСервер(uuid, пСсылка) Экспорт
	
	_Отладка = кпс.РазрешенаОтладка();
	
	_Request = ВетисMercuryApplications.getVetDocumentByUuidRequest(uuid, enterpriseGuid);
	
	_Response = ВетисОбщегоНазначения.ВыполнитьЗапрос(_Request, "getVetDocumentByUuidRequest", Ложь, _Отладка);
	
	Если _Response = Ложь Тогда Возврат;	КонецЕсли;
	
	_Response = ВетисMercuryApplications.getVetDocumentByUuidResponse(_Response);
	
	_док = пСсылка.ПолучитьОбъект();
	
	_док.uuid     = _Response.uuid;
	
	_док.НомерВСД = _Response.issueNumber;
	_док.ДатаВСД  = _Response.issueDate;
	_док.Статус   = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Response.status);
	_док.Форма    = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_Response.form);
	
	_док.Отправитель = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Response.consignor.businessEntity);
	_док.Получатель  = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Response.consignee.businessEntity);
	
	_док.ОтправительПредприятие = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_Response.consignor.enterprise);
	_док.ПолучательПредприятие  = ВетисCerberusEnterpriseСлой1с.EnterpriseПунктНазначения(_Response.consignee.enterprise);
	
	_всд = ?(_док.ВСД.Количество() = 0, _док.ВСД.Добавить(), _док.ВСД[0]);
	
	//Если _док.ВСД.Количество() = 2 Тогда _док.ВСД.Удалить(0); КонецЕсли;
	
	_всд.Серия    = _Response.issueSeries;
	_всд.Номер    = _Response.issueNumber;
	_всд.Дата     = _Response.issueDate;
	_всд.Статус   = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Response.status);
	_всд.Форма    = ВетисMercuryVetdocumentСлой1с.VetDocumentForm(_Response.form);
	_всд.Тип      = ВетисMercuryVetdocumentСлой1с.VetDocumentType(_Response.type);
	_всд.БлагополучиеМестности  = _Response.locationProsperity;
	_всд.Ветсанэкспертиза       = _Response.cargoExpertized;
	//_всд.ГосударственныйВетврач = _Response.confirmedBy.fio;
	_всд.ГосударственныйВетврачДата = ?(_Response.confirmedDate = Неопределено, _всд.ГосударственныйВетврачДата, _Response.confirmedDate);
	_всд.ДатаОбновления         = ?(_Response.lastUpdateDate = Неопределено, _всд.ДатаОбновления, _Response.lastUpdateDate);
	_всд.Иммунизация            = ?(_Response.immunizationInfo = Неопределено, _всд.Иммунизация, _Response.immunizationInfo);
	_всд.КарантированиеДней     = ?(_Response.quarantineDays = Неопределено, _всд.КарантированиеДней, _Response.quarantineDays);
	_всд.КарантированиеМесто    = ?(_Response.quarantinePlace = Неопределено, _всд.КарантированиеДней, _Response.quarantinePlace);
	_всд.КонтрольГосВетврачем   = ?(_Response.cargoInspected = Неопределено, _всд.КонтрольГосВетврачем, _Response.cargoInspected);
	_всд.ЛабораторныеИсследования = _Response.expertiseInfo;
	_всд.НазначениеГруза        = ВетисArgusCommonСлой1с.Purpose(_Response.purpose);
	_всд.ОсобыеОтметки          = _Response.specialMarks;
	_всд.ПредыдущиеВСД          = ?(_Response.precedingVetDocuments = Неопределено, _всд.ПредыдущиеВСД, _Response.precedingVetDocuments);
	
	_ттн = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
	
	//Если _док.ТТН.Количество() = 2 Тогда _док.ТТН.Удалить(0); КонецЕсли;
	
	_ттн.Серия          = _Response.waybillSeries;
	_ттн.Номер          = _Response.waybillNumber;
	_ттн.Дата           = _Response.waybillDate;
	_ттн.Тип            = ВетисArgusShipmentСлой1с.WaybillType(_Response.waybillType);
	_ттн.Посредник      = ?(_Response.broker = Неопределено, _ттн.Посредник, ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Response.broker));
	_ттн.СпособХранения = ВетисArgusShipmentСлой1с.TransportationStorageType(_Response.transportStorageType);
	_ттн.Транспорт      = ВетисArgusShipmentСлой1с.TransportInfo(_Response.transportInfo);
	
	_сж = ?(_док.СкладскойЖурнал.Количество() = 0, _док.СкладскойЖурнал.Добавить(), _док.СкладскойЖурнал[0]);
	
	//Если _док.СкладскойЖурнал.Количество() = 2 Тогда _док.СкладскойЖурнал.Удалить(0); КонецЕсли;
	
	_сж.НоменклатурнаяГруппа = ВетисArgusProductionСлой1с.SubProduct(_Response.batch.subProduct);
	_сж.Количество           = _Response.batch.volume;
	_сж.КоличествоМест       = _Response.batch.packingAmount;
	_сж.ЕдиницаИзмерения     = ВетисArgusCommonСлой1с.Unit(_Response.batch.unit);
	_сж.Упаковка             = ВетисArgusCommonСлой1с.PackingForm(_Response.batch.packingList);
	_сж.Скоропортящаяся      = _Response.batch.perishable;
	_сж.СтранаПроисхождения  = ВетисIkarСлой1с.Country(_Response.batch.countryOfOrigin);
	_сж.ПроизводительПредприятие = ВетисCerberusEnterpriseСлой1с.Producer(_Response.batch.producerList);
	_сж.Производитель        = _сж.ПроизводительПредприятие.Владелец;
	_сж.НекачественныйГруз   = _Response.batch.lowGradeCargo;
	_сж.Собственник          = ВетисCerberusEnterpriseСлой1с.BusinessEntityКонтрагент(_Response.batch.owner);
	//_сж.Маркировка           = ВетисMercuryVetdocumentСлой1с.ProductMarking(_Response.batch.productMarkingList);
	_сж.ВыработкаНачало      = ВетисBase.ComplexDate(_Response.batch.dateOfProduction.firstDate);
	_сж.ВыработкаКонец       = ВетисBase.ComplexDate(_Response.batch.dateOfProduction.secondDate);
	_сж.СрокГодностиНачало   = ВетисBase.ComplexDate(_Response.batch.expiryDate.firstDate);
	_сж.СрокГодностиКонец    = ВетисBase.ComplexDate(_Response.batch.expiryDate.secondDate);
	
	_док.ОбменДанными.Загрузка = Истина;
	
	_док.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	УдалитьСвязьСервер();
	
	Элементы.СправочникСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязьСервер()
	
	//Если Элементы.СправочникСписок.ВыделенныеСтроки.Количество() > 0 Тогда
	//	Для Каждого _ТекДанные из Элементы.СправочникСписок.ВыделенныеСтроки Цикл
	//		
	//		ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
	//		
	//	КонецЦикла;
	//Иначе
	//	_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//	
	//	ВетисСоответствие.Удалить(_ТекДанные.Ссылка);
	//	
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВетисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//_ТекДанные = Элементы.СписокВетис.ТекущиеДанные;
	//
	//Элементы.СправочникСписок.ТекущаяСтрока = СправочникСписокНайти(_ТекДанные.name)
	
КонецПроцедуры

Функция СправочникСписокНайти(пНаименование)
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(пНаименование);
	
КонецФункции


&НаКлиенте
Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	
	//_ТекДанные = Элементы.СправочникСписок.ТекущиеДанные;
	//
	//_СписокВетисСтроки = СписокВетис.НайтиСтроки(Новый Структура("name", _ТекДанные.name));
	//
	//Если _СписокВетисСтроки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Элементы.СписокВетис.ТекущаяСтрока = _СписокВетисСтроки[0].ПолучитьИдентификатор();
	
КонецПроцедуры


&НаКлиенте
Процедура НомерСкладаПриИзменении(Элемент = Неопределено)
	
	//enterpriseGuid = ВетисПараметрыСоединения.enterpriseGuid(НомерСклада);
	//
	//_Склад = ВетисCerberusEnterprise.GetEnterpriseByGuid(enterpriseGuid);
	//
	//Склад = _Склад.address.addressView;
	
	enterpriseGuid = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(Склад);
	
КонецПроцедуры


&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	enterpriseGuid = ВетисCerberusEnterpriseСлой1с.EnterpriseСклад(Склад);
	
КонецПроцедуры


&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	оо = Новый ОписаниеОповещения("СкладыОбработкаОповещения", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Склады.Форма.кпсФормаВыбораУФ", Новый Структура("Ключ,Запрос", Склад, ПолучитьТекстЗапросаСправочникСкладыФормаВыбора()), ,,,, оо);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Склад = Результат;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТекстЗапросаСправочникСкладыФормаВыбора()
	
	Возврат
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.ЭтоГруппа,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	ВЫБОР
	|		КОГДА _Ветис.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Подсветка
	|ИЗ
	|	Справочник.Склады КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВетисСоответствие КАК _Ветис
	|		ПО _Таблица.Ссылка = _Ветис.Ссылка
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	//|	И НЕ _Таблица.ЭтоГруппа
	|	И ИСТИНА";
	
КонецФункции

